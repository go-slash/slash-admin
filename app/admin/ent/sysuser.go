// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slash-admin/app/admin/ent/sysrole"
	"slash-admin/app/admin/ent/sysuser"
	"slash-admin/pkg/types"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysUser is the model entity for the SysUser schema.
type SysUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 用户 UUID
	UUID string `json:"uuid,omitempty"`
	// 登录名
	Username string `json:"username,omitempty"`
	// 密码
	Password string `json:"password,omitempty"`
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// 布局方式
	SideMode string `json:"side_mode,omitempty"`
	// 头像路径
	Avatar string `json:"avatar,omitempty"`
	// 后台页面色调
	BaseColor string `json:"base_color,omitempty"`
	// 当前激活的颜色设定
	ActiveColor string `json:"active_color,omitempty"`
	// 角色ID
	RoleID uint64 `json:"role_id,omitempty"`
	// 手机号
	Mobile string `json:"mobile,omitempty"`
	// 邮箱号
	Email string `json:"email,omitempty"`
	// 0=正常 1=禁用
	Status types.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysUserQuery when eager-loading is set.
	Edges SysUserEdges `json:"edges"`
}

// SysUserEdges holds the relations/edges for other nodes in the graph.
type SysUserEdges struct {
	// 角色
	Role *SysRole `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysUserEdges) RoleOrErr() (*SysRole, error) {
	if e.loadedTypes[0] {
		if e.Role == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sysrole.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID, sysuser.FieldRoleID:
			values[i] = new(sql.NullInt64)
		case sysuser.FieldUUID, sysuser.FieldUsername, sysuser.FieldPassword, sysuser.FieldNickname, sysuser.FieldSideMode, sysuser.FieldAvatar, sysuser.FieldBaseColor, sysuser.FieldActiveColor, sysuser.FieldMobile, sysuser.FieldEmail:
			values[i] = new(sql.NullString)
		case sysuser.FieldCreatedAt, sysuser.FieldUpdatedAt, sysuser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sysuser.FieldStatus:
			values[i] = new(types.Status)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysUser fields.
func (su *SysUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			su.ID = uint64(value.Int64)
		case sysuser.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				su.UUID = value.String
			}
		case sysuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				su.Username = value.String
			}
		case sysuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				su.Password = value.String
			}
		case sysuser.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				su.Nickname = value.String
			}
		case sysuser.FieldSideMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field side_mode", values[i])
			} else if value.Valid {
				su.SideMode = value.String
			}
		case sysuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				su.Avatar = value.String
			}
		case sysuser.FieldBaseColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_color", values[i])
			} else if value.Valid {
				su.BaseColor = value.String
			}
		case sysuser.FieldActiveColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field active_color", values[i])
			} else if value.Valid {
				su.ActiveColor = value.String
			}
		case sysuser.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				su.RoleID = uint64(value.Int64)
			}
		case sysuser.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				su.Mobile = value.String
			}
		case sysuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				su.Email = value.String
			}
		case sysuser.FieldStatus:
			if value, ok := values[i].(*types.Status); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				su.Status = *value
			}
		case sysuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				su.CreatedAt = value.Time
			}
		case sysuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				su.UpdatedAt = value.Time
			}
		case sysuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				su.DeletedAt = new(time.Time)
				*su.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryRole queries the "role" edge of the SysUser entity.
func (su *SysUser) QueryRole() *SysRoleQuery {
	return (&SysUserClient{config: su.config}).QueryRole(su)
}

// Update returns a builder for updating this SysUser.
// Note that you need to call SysUser.Unwrap() before calling this method if this SysUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SysUser) Update() *SysUserUpdateOne {
	return (&SysUserClient{config: su.config}).UpdateOne(su)
}

// Unwrap unwraps the SysUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SysUser) Unwrap() *SysUser {
	_tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysUser is not a transactional entity")
	}
	su.config.driver = _tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SysUser) String() string {
	var builder strings.Builder
	builder.WriteString("SysUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", su.ID))
	builder.WriteString("uuid=")
	builder.WriteString(su.UUID)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(su.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(su.Password)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(su.Nickname)
	builder.WriteString(", ")
	builder.WriteString("side_mode=")
	builder.WriteString(su.SideMode)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(su.Avatar)
	builder.WriteString(", ")
	builder.WriteString("base_color=")
	builder.WriteString(su.BaseColor)
	builder.WriteString(", ")
	builder.WriteString("active_color=")
	builder.WriteString(su.ActiveColor)
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", su.RoleID))
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(su.Mobile)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(su.Email)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", su.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(su.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(su.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := su.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysUsers is a parsable slice of SysUser.
type SysUsers []*SysUser

func (su SysUsers) config(cfg config) {
	for _i := range su {
		su[_i].config = cfg
	}
}
