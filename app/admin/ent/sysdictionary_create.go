// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/sysdictionary"
	"slash-admin/pkg/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysDictionaryCreate is the builder for creating a SysDictionary entity.
type SysDictionaryCreate struct {
	config
	mutation *SysDictionaryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (sdc *SysDictionaryCreate) SetTitle(s string) *SysDictionaryCreate {
	sdc.mutation.SetTitle(s)
	return sdc
}

// SetName sets the "name" field.
func (sdc *SysDictionaryCreate) SetName(s string) *SysDictionaryCreate {
	sdc.mutation.SetName(s)
	return sdc
}

// SetStatus sets the "status" field.
func (sdc *SysDictionaryCreate) SetStatus(t types.Status) *SysDictionaryCreate {
	sdc.mutation.SetStatus(t)
	return sdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sdc *SysDictionaryCreate) SetNillableStatus(t *types.Status) *SysDictionaryCreate {
	if t != nil {
		sdc.SetStatus(*t)
	}
	return sdc
}

// SetDesc sets the "desc" field.
func (sdc *SysDictionaryCreate) SetDesc(s string) *SysDictionaryCreate {
	sdc.mutation.SetDesc(s)
	return sdc
}

// SetCreatedAt sets the "created_at" field.
func (sdc *SysDictionaryCreate) SetCreatedAt(t time.Time) *SysDictionaryCreate {
	sdc.mutation.SetCreatedAt(t)
	return sdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdc *SysDictionaryCreate) SetNillableCreatedAt(t *time.Time) *SysDictionaryCreate {
	if t != nil {
		sdc.SetCreatedAt(*t)
	}
	return sdc
}

// SetUpdatedAt sets the "updated_at" field.
func (sdc *SysDictionaryCreate) SetUpdatedAt(t time.Time) *SysDictionaryCreate {
	sdc.mutation.SetUpdatedAt(t)
	return sdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sdc *SysDictionaryCreate) SetNillableUpdatedAt(t *time.Time) *SysDictionaryCreate {
	if t != nil {
		sdc.SetUpdatedAt(*t)
	}
	return sdc
}

// SetDeletedAt sets the "deleted_at" field.
func (sdc *SysDictionaryCreate) SetDeletedAt(t time.Time) *SysDictionaryCreate {
	sdc.mutation.SetDeletedAt(t)
	return sdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sdc *SysDictionaryCreate) SetNillableDeletedAt(t *time.Time) *SysDictionaryCreate {
	if t != nil {
		sdc.SetDeletedAt(*t)
	}
	return sdc
}

// SetID sets the "id" field.
func (sdc *SysDictionaryCreate) SetID(u uint64) *SysDictionaryCreate {
	sdc.mutation.SetID(u)
	return sdc
}

// Mutation returns the SysDictionaryMutation object of the builder.
func (sdc *SysDictionaryCreate) Mutation() *SysDictionaryMutation {
	return sdc.mutation
}

// Save creates the SysDictionary in the database.
func (sdc *SysDictionaryCreate) Save(ctx context.Context) (*SysDictionary, error) {
	var (
		err  error
		node *SysDictionary
	)
	sdc.defaults()
	if len(sdc.hooks) == 0 {
		if err = sdc.check(); err != nil {
			return nil, err
		}
		node, err = sdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysDictionaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sdc.check(); err != nil {
				return nil, err
			}
			sdc.mutation = mutation
			if node, err = sdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sdc.hooks) - 1; i >= 0; i-- {
			if sdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysDictionary)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysDictionaryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *SysDictionaryCreate) SaveX(ctx context.Context) *SysDictionary {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *SysDictionaryCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *SysDictionaryCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *SysDictionaryCreate) defaults() {
	if _, ok := sdc.mutation.Status(); !ok {
		v := sysdictionary.DefaultStatus
		sdc.mutation.SetStatus(v)
	}
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		v := sysdictionary.DefaultCreatedAt()
		sdc.mutation.SetCreatedAt(v)
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		v := sysdictionary.DefaultUpdatedAt()
		sdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *SysDictionaryCreate) check() error {
	if _, ok := sdc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SysDictionary.title"`)}
	}
	if _, ok := sdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SysDictionary.name"`)}
	}
	if _, ok := sdc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "SysDictionary.desc"`)}
	}
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysDictionary.created_at"`)}
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysDictionary.updated_at"`)}
	}
	return nil
}

func (sdc *SysDictionaryCreate) sqlSave(ctx context.Context) (*SysDictionary, error) {
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (sdc *SysDictionaryCreate) createSpec() (*SysDictionary, *sqlgraph.CreateSpec) {
	var (
		_node = &SysDictionary{config: sdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysdictionary.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysdictionary.FieldID,
			},
		}
	)
	_spec.OnConflict = sdc.conflict
	if id, ok := sdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sdc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdictionary.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := sdc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdictionary.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sdc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysdictionary.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sdc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdictionary.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := sdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysdictionary.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysdictionary.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sdc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysdictionary.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysDictionary.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysDictionaryUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (sdc *SysDictionaryCreate) OnConflict(opts ...sql.ConflictOption) *SysDictionaryUpsertOne {
	sdc.conflict = opts
	return &SysDictionaryUpsertOne{
		create: sdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysDictionary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sdc *SysDictionaryCreate) OnConflictColumns(columns ...string) *SysDictionaryUpsertOne {
	sdc.conflict = append(sdc.conflict, sql.ConflictColumns(columns...))
	return &SysDictionaryUpsertOne{
		create: sdc,
	}
}

type (
	// SysDictionaryUpsertOne is the builder for "upsert"-ing
	//  one SysDictionary node.
	SysDictionaryUpsertOne struct {
		create *SysDictionaryCreate
	}

	// SysDictionaryUpsert is the "OnConflict" setter.
	SysDictionaryUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *SysDictionaryUpsert) SetTitle(v string) *SysDictionaryUpsert {
	u.Set(sysdictionary.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SysDictionaryUpsert) UpdateTitle() *SysDictionaryUpsert {
	u.SetExcluded(sysdictionary.FieldTitle)
	return u
}

// SetName sets the "name" field.
func (u *SysDictionaryUpsert) SetName(v string) *SysDictionaryUpsert {
	u.Set(sysdictionary.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysDictionaryUpsert) UpdateName() *SysDictionaryUpsert {
	u.SetExcluded(sysdictionary.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *SysDictionaryUpsert) SetStatus(v types.Status) *SysDictionaryUpsert {
	u.Set(sysdictionary.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysDictionaryUpsert) UpdateStatus() *SysDictionaryUpsert {
	u.SetExcluded(sysdictionary.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SysDictionaryUpsert) AddStatus(v types.Status) *SysDictionaryUpsert {
	u.Add(sysdictionary.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *SysDictionaryUpsert) ClearStatus() *SysDictionaryUpsert {
	u.SetNull(sysdictionary.FieldStatus)
	return u
}

// SetDesc sets the "desc" field.
func (u *SysDictionaryUpsert) SetDesc(v string) *SysDictionaryUpsert {
	u.Set(sysdictionary.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *SysDictionaryUpsert) UpdateDesc() *SysDictionaryUpsert {
	u.SetExcluded(sysdictionary.FieldDesc)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SysDictionaryUpsert) SetCreatedAt(v time.Time) *SysDictionaryUpsert {
	u.Set(sysdictionary.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysDictionaryUpsert) UpdateCreatedAt() *SysDictionaryUpsert {
	u.SetExcluded(sysdictionary.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysDictionaryUpsert) SetUpdatedAt(v time.Time) *SysDictionaryUpsert {
	u.Set(sysdictionary.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysDictionaryUpsert) UpdateUpdatedAt() *SysDictionaryUpsert {
	u.SetExcluded(sysdictionary.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysDictionaryUpsert) SetDeletedAt(v time.Time) *SysDictionaryUpsert {
	u.Set(sysdictionary.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysDictionaryUpsert) UpdateDeletedAt() *SysDictionaryUpsert {
	u.SetExcluded(sysdictionary.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysDictionaryUpsert) ClearDeletedAt() *SysDictionaryUpsert {
	u.SetNull(sysdictionary.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysDictionary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysdictionary.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysDictionaryUpsertOne) UpdateNewValues() *SysDictionaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysdictionary.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysDictionary.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysDictionaryUpsertOne) Ignore() *SysDictionaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysDictionaryUpsertOne) DoNothing() *SysDictionaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysDictionaryCreate.OnConflict
// documentation for more info.
func (u *SysDictionaryUpsertOne) Update(set func(*SysDictionaryUpsert)) *SysDictionaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysDictionaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *SysDictionaryUpsertOne) SetTitle(v string) *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SysDictionaryUpsertOne) UpdateTitle() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateTitle()
	})
}

// SetName sets the "name" field.
func (u *SysDictionaryUpsertOne) SetName(v string) *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysDictionaryUpsertOne) UpdateName() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *SysDictionaryUpsertOne) SetStatus(v types.Status) *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SysDictionaryUpsertOne) AddStatus(v types.Status) *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysDictionaryUpsertOne) UpdateStatus() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SysDictionaryUpsertOne) ClearStatus() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.ClearStatus()
	})
}

// SetDesc sets the "desc" field.
func (u *SysDictionaryUpsertOne) SetDesc(v string) *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *SysDictionaryUpsertOne) UpdateDesc() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateDesc()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysDictionaryUpsertOne) SetCreatedAt(v time.Time) *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysDictionaryUpsertOne) UpdateCreatedAt() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysDictionaryUpsertOne) SetUpdatedAt(v time.Time) *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysDictionaryUpsertOne) UpdateUpdatedAt() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysDictionaryUpsertOne) SetDeletedAt(v time.Time) *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysDictionaryUpsertOne) UpdateDeletedAt() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysDictionaryUpsertOne) ClearDeletedAt() *SysDictionaryUpsertOne {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysDictionaryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysDictionaryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysDictionaryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysDictionaryUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysDictionaryUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysDictionaryCreateBulk is the builder for creating many SysDictionary entities in bulk.
type SysDictionaryCreateBulk struct {
	config
	builders []*SysDictionaryCreate
	conflict []sql.ConflictOption
}

// Save creates the SysDictionary entities in the database.
func (sdcb *SysDictionaryCreateBulk) Save(ctx context.Context) ([]*SysDictionary, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*SysDictionary, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysDictionaryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *SysDictionaryCreateBulk) SaveX(ctx context.Context) []*SysDictionary {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *SysDictionaryCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *SysDictionaryCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysDictionary.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysDictionaryUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (sdcb *SysDictionaryCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysDictionaryUpsertBulk {
	sdcb.conflict = opts
	return &SysDictionaryUpsertBulk{
		create: sdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysDictionary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sdcb *SysDictionaryCreateBulk) OnConflictColumns(columns ...string) *SysDictionaryUpsertBulk {
	sdcb.conflict = append(sdcb.conflict, sql.ConflictColumns(columns...))
	return &SysDictionaryUpsertBulk{
		create: sdcb,
	}
}

// SysDictionaryUpsertBulk is the builder for "upsert"-ing
// a bulk of SysDictionary nodes.
type SysDictionaryUpsertBulk struct {
	create *SysDictionaryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysDictionary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysdictionary.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysDictionaryUpsertBulk) UpdateNewValues() *SysDictionaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysdictionary.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysDictionary.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysDictionaryUpsertBulk) Ignore() *SysDictionaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysDictionaryUpsertBulk) DoNothing() *SysDictionaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysDictionaryCreateBulk.OnConflict
// documentation for more info.
func (u *SysDictionaryUpsertBulk) Update(set func(*SysDictionaryUpsert)) *SysDictionaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysDictionaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *SysDictionaryUpsertBulk) SetTitle(v string) *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SysDictionaryUpsertBulk) UpdateTitle() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateTitle()
	})
}

// SetName sets the "name" field.
func (u *SysDictionaryUpsertBulk) SetName(v string) *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysDictionaryUpsertBulk) UpdateName() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *SysDictionaryUpsertBulk) SetStatus(v types.Status) *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SysDictionaryUpsertBulk) AddStatus(v types.Status) *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysDictionaryUpsertBulk) UpdateStatus() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SysDictionaryUpsertBulk) ClearStatus() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.ClearStatus()
	})
}

// SetDesc sets the "desc" field.
func (u *SysDictionaryUpsertBulk) SetDesc(v string) *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *SysDictionaryUpsertBulk) UpdateDesc() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateDesc()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysDictionaryUpsertBulk) SetCreatedAt(v time.Time) *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysDictionaryUpsertBulk) UpdateCreatedAt() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysDictionaryUpsertBulk) SetUpdatedAt(v time.Time) *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysDictionaryUpsertBulk) UpdateUpdatedAt() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysDictionaryUpsertBulk) SetDeletedAt(v time.Time) *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysDictionaryUpsertBulk) UpdateDeletedAt() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysDictionaryUpsertBulk) ClearDeletedAt() *SysDictionaryUpsertBulk {
	return u.Update(func(s *SysDictionaryUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysDictionaryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysDictionaryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysDictionaryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysDictionaryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
