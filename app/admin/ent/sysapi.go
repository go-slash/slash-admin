// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slash-admin/app/admin/ent/sysapi"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysApi is the model entity for the SysApi schema.
type SysApi struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// API path
	Path string `json:"path,omitempty"`
	// API description
	Description string `json:"description,omitempty"`
	// API group
	APIGroup string `json:"api_group,omitempty"`
	// HTTP method
	Method string `json:"method,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysApi) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysapi.FieldID:
			values[i] = new(sql.NullInt64)
		case sysapi.FieldPath, sysapi.FieldDescription, sysapi.FieldAPIGroup, sysapi.FieldMethod:
			values[i] = new(sql.NullString)
		case sysapi.FieldCreatedAt, sysapi.FieldUpdatedAt, sysapi.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysApi", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysApi fields.
func (sa *SysApi) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysapi.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = uint64(value.Int64)
		case sysapi.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				sa.Path = value.String
			}
		case sysapi.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sa.Description = value.String
			}
		case sysapi.FieldAPIGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_group", values[i])
			} else if value.Valid {
				sa.APIGroup = value.String
			}
		case sysapi.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				sa.Method = value.String
			}
		case sysapi.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = value.Time
			}
		case sysapi.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sa.UpdatedAt = value.Time
			}
		case sysapi.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sa.DeletedAt = new(time.Time)
				*sa.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SysApi.
// Note that you need to call SysApi.Unwrap() before calling this method if this SysApi
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SysApi) Update() *SysApiUpdateOne {
	return (&SysApiClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the SysApi entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SysApi) Unwrap() *SysApi {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysApi is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SysApi) String() string {
	var builder strings.Builder
	builder.WriteString("SysApi(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("path=")
	builder.WriteString(sa.Path)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sa.Description)
	builder.WriteString(", ")
	builder.WriteString("api_group=")
	builder.WriteString(sa.APIGroup)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(sa.Method)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sa.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysApis is a parsable slice of SysApi.
type SysApis []*SysApi

func (sa SysApis) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
