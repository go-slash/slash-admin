// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slash-admin/app/admin/ent/systoken"
	"slash-admin/pkg/types"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysToken is the model entity for the SysToken schema.
type SysToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	//  用户的UUID
	UUID string `json:"uuid,omitempty"`
	//  Token 字符串
	Token string `json:"token,omitempty"`
	//  Token 来源 （本地为core, 第三方如github等）
	Source string `json:"source,omitempty"`
	// 0=禁用 1=正常
	Status types.Status `json:"status,omitempty"`
	//  过期时间
	ExpiredAt time.Time `json:"expired_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systoken.FieldID:
			values[i] = new(sql.NullInt64)
		case systoken.FieldUUID, systoken.FieldToken, systoken.FieldSource:
			values[i] = new(sql.NullString)
		case systoken.FieldExpiredAt, systoken.FieldCreatedAt, systoken.FieldUpdatedAt, systoken.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case systoken.FieldStatus:
			values[i] = new(types.Status)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysToken fields.
func (st *SysToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = uint64(value.Int64)
		case systoken.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				st.UUID = value.String
			}
		case systoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				st.Token = value.String
			}
		case systoken.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				st.Source = value.String
			}
		case systoken.FieldStatus:
			if value, ok := values[i].(*types.Status); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				st.Status = *value
			}
		case systoken.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				st.ExpiredAt = value.Time
			}
		case systoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case systoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		case systoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				st.DeletedAt = new(time.Time)
				*st.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SysToken.
// Note that you need to call SysToken.Unwrap() before calling this method if this SysToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SysToken) Update() *SysTokenUpdateOne {
	return (&SysTokenClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the SysToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SysToken) Unwrap() *SysToken {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysToken is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SysToken) String() string {
	var builder strings.Builder
	builder.WriteString("SysToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("uuid=")
	builder.WriteString(st.UUID)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(st.Token)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(st.Source)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", st.Status))
	builder.WriteString(", ")
	builder.WriteString("expired_at=")
	builder.WriteString(st.ExpiredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := st.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysTokens is a parsable slice of SysToken.
type SysTokens []*SysToken

func (st SysTokens) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
