// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"slash-admin/app/admin/ent/migrate"

	"slash-admin/app/admin/ent/casbinrule"
	"slash-admin/app/admin/ent/sysapi"
	"slash-admin/app/admin/ent/sysdictionary"
	"slash-admin/app/admin/ent/sysdictionarydetail"
	"slash-admin/app/admin/ent/sysmenu"
	"slash-admin/app/admin/ent/sysmenuparam"
	"slash-admin/app/admin/ent/sysoauthprovider"
	"slash-admin/app/admin/ent/sysrole"
	"slash-admin/app/admin/ent/systoken"
	"slash-admin/app/admin/ent/sysuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CasbinRule is the client for interacting with the CasbinRule builders.
	CasbinRule *CasbinRuleClient
	// SysApi is the client for interacting with the SysApi builders.
	SysApi *SysApiClient
	// SysDictionary is the client for interacting with the SysDictionary builders.
	SysDictionary *SysDictionaryClient
	// SysDictionaryDetail is the client for interacting with the SysDictionaryDetail builders.
	SysDictionaryDetail *SysDictionaryDetailClient
	// SysMenu is the client for interacting with the SysMenu builders.
	SysMenu *SysMenuClient
	// SysMenuParam is the client for interacting with the SysMenuParam builders.
	SysMenuParam *SysMenuParamClient
	// SysOauthProvider is the client for interacting with the SysOauthProvider builders.
	SysOauthProvider *SysOauthProviderClient
	// SysRole is the client for interacting with the SysRole builders.
	SysRole *SysRoleClient
	// SysToken is the client for interacting with the SysToken builders.
	SysToken *SysTokenClient
	// SysUser is the client for interacting with the SysUser builders.
	SysUser *SysUserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CasbinRule = NewCasbinRuleClient(c.config)
	c.SysApi = NewSysApiClient(c.config)
	c.SysDictionary = NewSysDictionaryClient(c.config)
	c.SysDictionaryDetail = NewSysDictionaryDetailClient(c.config)
	c.SysMenu = NewSysMenuClient(c.config)
	c.SysMenuParam = NewSysMenuParamClient(c.config)
	c.SysOauthProvider = NewSysOauthProviderClient(c.config)
	c.SysRole = NewSysRoleClient(c.config)
	c.SysToken = NewSysTokenClient(c.config)
	c.SysUser = NewSysUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		CasbinRule:          NewCasbinRuleClient(cfg),
		SysApi:              NewSysApiClient(cfg),
		SysDictionary:       NewSysDictionaryClient(cfg),
		SysDictionaryDetail: NewSysDictionaryDetailClient(cfg),
		SysMenu:             NewSysMenuClient(cfg),
		SysMenuParam:        NewSysMenuParamClient(cfg),
		SysOauthProvider:    NewSysOauthProviderClient(cfg),
		SysRole:             NewSysRoleClient(cfg),
		SysToken:            NewSysTokenClient(cfg),
		SysUser:             NewSysUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		CasbinRule:          NewCasbinRuleClient(cfg),
		SysApi:              NewSysApiClient(cfg),
		SysDictionary:       NewSysDictionaryClient(cfg),
		SysDictionaryDetail: NewSysDictionaryDetailClient(cfg),
		SysMenu:             NewSysMenuClient(cfg),
		SysMenuParam:        NewSysMenuParamClient(cfg),
		SysOauthProvider:    NewSysOauthProviderClient(cfg),
		SysRole:             NewSysRoleClient(cfg),
		SysToken:            NewSysTokenClient(cfg),
		SysUser:             NewSysUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CasbinRule.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CasbinRule.Use(hooks...)
	c.SysApi.Use(hooks...)
	c.SysDictionary.Use(hooks...)
	c.SysDictionaryDetail.Use(hooks...)
	c.SysMenu.Use(hooks...)
	c.SysMenuParam.Use(hooks...)
	c.SysOauthProvider.Use(hooks...)
	c.SysRole.Use(hooks...)
	c.SysToken.Use(hooks...)
	c.SysUser.Use(hooks...)
}

// CasbinRuleClient is a client for the CasbinRule schema.
type CasbinRuleClient struct {
	config
}

// NewCasbinRuleClient returns a client for the CasbinRule from the given config.
func NewCasbinRuleClient(c config) *CasbinRuleClient {
	return &CasbinRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `casbinrule.Hooks(f(g(h())))`.
func (c *CasbinRuleClient) Use(hooks ...Hook) {
	c.hooks.CasbinRule = append(c.hooks.CasbinRule, hooks...)
}

// Create returns a builder for creating a CasbinRule entity.
func (c *CasbinRuleClient) Create() *CasbinRuleCreate {
	mutation := newCasbinRuleMutation(c.config, OpCreate)
	return &CasbinRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CasbinRule entities.
func (c *CasbinRuleClient) CreateBulk(builders ...*CasbinRuleCreate) *CasbinRuleCreateBulk {
	return &CasbinRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CasbinRule.
func (c *CasbinRuleClient) Update() *CasbinRuleUpdate {
	mutation := newCasbinRuleMutation(c.config, OpUpdate)
	return &CasbinRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CasbinRuleClient) UpdateOne(cr *CasbinRule) *CasbinRuleUpdateOne {
	mutation := newCasbinRuleMutation(c.config, OpUpdateOne, withCasbinRule(cr))
	return &CasbinRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CasbinRuleClient) UpdateOneID(id int) *CasbinRuleUpdateOne {
	mutation := newCasbinRuleMutation(c.config, OpUpdateOne, withCasbinRuleID(id))
	return &CasbinRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CasbinRule.
func (c *CasbinRuleClient) Delete() *CasbinRuleDelete {
	mutation := newCasbinRuleMutation(c.config, OpDelete)
	return &CasbinRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CasbinRuleClient) DeleteOne(cr *CasbinRule) *CasbinRuleDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CasbinRuleClient) DeleteOneID(id int) *CasbinRuleDeleteOne {
	builder := c.Delete().Where(casbinrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CasbinRuleDeleteOne{builder}
}

// Query returns a query builder for CasbinRule.
func (c *CasbinRuleClient) Query() *CasbinRuleQuery {
	return &CasbinRuleQuery{
		config: c.config,
	}
}

// Get returns a CasbinRule entity by its id.
func (c *CasbinRuleClient) Get(ctx context.Context, id int) (*CasbinRule, error) {
	return c.Query().Where(casbinrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CasbinRuleClient) GetX(ctx context.Context, id int) *CasbinRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CasbinRuleClient) Hooks() []Hook {
	return c.hooks.CasbinRule
}

// SysApiClient is a client for the SysApi schema.
type SysApiClient struct {
	config
}

// NewSysApiClient returns a client for the SysApi from the given config.
func NewSysApiClient(c config) *SysApiClient {
	return &SysApiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysapi.Hooks(f(g(h())))`.
func (c *SysApiClient) Use(hooks ...Hook) {
	c.hooks.SysApi = append(c.hooks.SysApi, hooks...)
}

// Create returns a builder for creating a SysApi entity.
func (c *SysApiClient) Create() *SysApiCreate {
	mutation := newSysApiMutation(c.config, OpCreate)
	return &SysApiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysApi entities.
func (c *SysApiClient) CreateBulk(builders ...*SysApiCreate) *SysApiCreateBulk {
	return &SysApiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysApi.
func (c *SysApiClient) Update() *SysApiUpdate {
	mutation := newSysApiMutation(c.config, OpUpdate)
	return &SysApiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysApiClient) UpdateOne(sa *SysApi) *SysApiUpdateOne {
	mutation := newSysApiMutation(c.config, OpUpdateOne, withSysApi(sa))
	return &SysApiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysApiClient) UpdateOneID(id uint64) *SysApiUpdateOne {
	mutation := newSysApiMutation(c.config, OpUpdateOne, withSysApiID(id))
	return &SysApiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysApi.
func (c *SysApiClient) Delete() *SysApiDelete {
	mutation := newSysApiMutation(c.config, OpDelete)
	return &SysApiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysApiClient) DeleteOne(sa *SysApi) *SysApiDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysApiClient) DeleteOneID(id uint64) *SysApiDeleteOne {
	builder := c.Delete().Where(sysapi.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysApiDeleteOne{builder}
}

// Query returns a query builder for SysApi.
func (c *SysApiClient) Query() *SysApiQuery {
	return &SysApiQuery{
		config: c.config,
	}
}

// Get returns a SysApi entity by its id.
func (c *SysApiClient) Get(ctx context.Context, id uint64) (*SysApi, error) {
	return c.Query().Where(sysapi.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysApiClient) GetX(ctx context.Context, id uint64) *SysApi {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysApiClient) Hooks() []Hook {
	return c.hooks.SysApi
}

// SysDictionaryClient is a client for the SysDictionary schema.
type SysDictionaryClient struct {
	config
}

// NewSysDictionaryClient returns a client for the SysDictionary from the given config.
func NewSysDictionaryClient(c config) *SysDictionaryClient {
	return &SysDictionaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysdictionary.Hooks(f(g(h())))`.
func (c *SysDictionaryClient) Use(hooks ...Hook) {
	c.hooks.SysDictionary = append(c.hooks.SysDictionary, hooks...)
}

// Create returns a builder for creating a SysDictionary entity.
func (c *SysDictionaryClient) Create() *SysDictionaryCreate {
	mutation := newSysDictionaryMutation(c.config, OpCreate)
	return &SysDictionaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysDictionary entities.
func (c *SysDictionaryClient) CreateBulk(builders ...*SysDictionaryCreate) *SysDictionaryCreateBulk {
	return &SysDictionaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysDictionary.
func (c *SysDictionaryClient) Update() *SysDictionaryUpdate {
	mutation := newSysDictionaryMutation(c.config, OpUpdate)
	return &SysDictionaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysDictionaryClient) UpdateOne(sd *SysDictionary) *SysDictionaryUpdateOne {
	mutation := newSysDictionaryMutation(c.config, OpUpdateOne, withSysDictionary(sd))
	return &SysDictionaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysDictionaryClient) UpdateOneID(id uint64) *SysDictionaryUpdateOne {
	mutation := newSysDictionaryMutation(c.config, OpUpdateOne, withSysDictionaryID(id))
	return &SysDictionaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysDictionary.
func (c *SysDictionaryClient) Delete() *SysDictionaryDelete {
	mutation := newSysDictionaryMutation(c.config, OpDelete)
	return &SysDictionaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysDictionaryClient) DeleteOne(sd *SysDictionary) *SysDictionaryDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysDictionaryClient) DeleteOneID(id uint64) *SysDictionaryDeleteOne {
	builder := c.Delete().Where(sysdictionary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysDictionaryDeleteOne{builder}
}

// Query returns a query builder for SysDictionary.
func (c *SysDictionaryClient) Query() *SysDictionaryQuery {
	return &SysDictionaryQuery{
		config: c.config,
	}
}

// Get returns a SysDictionary entity by its id.
func (c *SysDictionaryClient) Get(ctx context.Context, id uint64) (*SysDictionary, error) {
	return c.Query().Where(sysdictionary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysDictionaryClient) GetX(ctx context.Context, id uint64) *SysDictionary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDetails queries the details edge of a SysDictionary.
func (c *SysDictionaryClient) QueryDetails(sd *SysDictionary) *SysDictionaryDetailQuery {
	query := &SysDictionaryDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdictionary.Table, sysdictionary.FieldID, id),
			sqlgraph.To(sysdictionarydetail.Table, sysdictionarydetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysdictionary.DetailsTable, sysdictionary.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysDictionaryClient) Hooks() []Hook {
	return c.hooks.SysDictionary
}

// SysDictionaryDetailClient is a client for the SysDictionaryDetail schema.
type SysDictionaryDetailClient struct {
	config
}

// NewSysDictionaryDetailClient returns a client for the SysDictionaryDetail from the given config.
func NewSysDictionaryDetailClient(c config) *SysDictionaryDetailClient {
	return &SysDictionaryDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysdictionarydetail.Hooks(f(g(h())))`.
func (c *SysDictionaryDetailClient) Use(hooks ...Hook) {
	c.hooks.SysDictionaryDetail = append(c.hooks.SysDictionaryDetail, hooks...)
}

// Create returns a builder for creating a SysDictionaryDetail entity.
func (c *SysDictionaryDetailClient) Create() *SysDictionaryDetailCreate {
	mutation := newSysDictionaryDetailMutation(c.config, OpCreate)
	return &SysDictionaryDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysDictionaryDetail entities.
func (c *SysDictionaryDetailClient) CreateBulk(builders ...*SysDictionaryDetailCreate) *SysDictionaryDetailCreateBulk {
	return &SysDictionaryDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysDictionaryDetail.
func (c *SysDictionaryDetailClient) Update() *SysDictionaryDetailUpdate {
	mutation := newSysDictionaryDetailMutation(c.config, OpUpdate)
	return &SysDictionaryDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysDictionaryDetailClient) UpdateOne(sdd *SysDictionaryDetail) *SysDictionaryDetailUpdateOne {
	mutation := newSysDictionaryDetailMutation(c.config, OpUpdateOne, withSysDictionaryDetail(sdd))
	return &SysDictionaryDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysDictionaryDetailClient) UpdateOneID(id uint64) *SysDictionaryDetailUpdateOne {
	mutation := newSysDictionaryDetailMutation(c.config, OpUpdateOne, withSysDictionaryDetailID(id))
	return &SysDictionaryDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysDictionaryDetail.
func (c *SysDictionaryDetailClient) Delete() *SysDictionaryDetailDelete {
	mutation := newSysDictionaryDetailMutation(c.config, OpDelete)
	return &SysDictionaryDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysDictionaryDetailClient) DeleteOne(sdd *SysDictionaryDetail) *SysDictionaryDetailDeleteOne {
	return c.DeleteOneID(sdd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysDictionaryDetailClient) DeleteOneID(id uint64) *SysDictionaryDetailDeleteOne {
	builder := c.Delete().Where(sysdictionarydetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysDictionaryDetailDeleteOne{builder}
}

// Query returns a query builder for SysDictionaryDetail.
func (c *SysDictionaryDetailClient) Query() *SysDictionaryDetailQuery {
	return &SysDictionaryDetailQuery{
		config: c.config,
	}
}

// Get returns a SysDictionaryDetail entity by its id.
func (c *SysDictionaryDetailClient) Get(ctx context.Context, id uint64) (*SysDictionaryDetail, error) {
	return c.Query().Where(sysdictionarydetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysDictionaryDetailClient) GetX(ctx context.Context, id uint64) *SysDictionaryDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a SysDictionaryDetail.
func (c *SysDictionaryDetailClient) QueryParent(sdd *SysDictionaryDetail) *SysDictionaryQuery {
	query := &SysDictionaryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sdd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdictionarydetail.Table, sysdictionarydetail.FieldID, id),
			sqlgraph.To(sysdictionary.Table, sysdictionary.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysdictionarydetail.ParentTable, sysdictionarydetail.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(sdd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysDictionaryDetailClient) Hooks() []Hook {
	return c.hooks.SysDictionaryDetail
}

// SysMenuClient is a client for the SysMenu schema.
type SysMenuClient struct {
	config
}

// NewSysMenuClient returns a client for the SysMenu from the given config.
func NewSysMenuClient(c config) *SysMenuClient {
	return &SysMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysmenu.Hooks(f(g(h())))`.
func (c *SysMenuClient) Use(hooks ...Hook) {
	c.hooks.SysMenu = append(c.hooks.SysMenu, hooks...)
}

// Create returns a builder for creating a SysMenu entity.
func (c *SysMenuClient) Create() *SysMenuCreate {
	mutation := newSysMenuMutation(c.config, OpCreate)
	return &SysMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysMenu entities.
func (c *SysMenuClient) CreateBulk(builders ...*SysMenuCreate) *SysMenuCreateBulk {
	return &SysMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysMenu.
func (c *SysMenuClient) Update() *SysMenuUpdate {
	mutation := newSysMenuMutation(c.config, OpUpdate)
	return &SysMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysMenuClient) UpdateOne(sm *SysMenu) *SysMenuUpdateOne {
	mutation := newSysMenuMutation(c.config, OpUpdateOne, withSysMenu(sm))
	return &SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysMenuClient) UpdateOneID(id uint64) *SysMenuUpdateOne {
	mutation := newSysMenuMutation(c.config, OpUpdateOne, withSysMenuID(id))
	return &SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysMenu.
func (c *SysMenuClient) Delete() *SysMenuDelete {
	mutation := newSysMenuMutation(c.config, OpDelete)
	return &SysMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysMenuClient) DeleteOne(sm *SysMenu) *SysMenuDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysMenuClient) DeleteOneID(id uint64) *SysMenuDeleteOne {
	builder := c.Delete().Where(sysmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysMenuDeleteOne{builder}
}

// Query returns a query builder for SysMenu.
func (c *SysMenuClient) Query() *SysMenuQuery {
	return &SysMenuQuery{
		config: c.config,
	}
}

// Get returns a SysMenu entity by its id.
func (c *SysMenuClient) Get(ctx context.Context, id uint64) (*SysMenu, error) {
	return c.Query().Where(sysmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysMenuClient) GetX(ctx context.Context, id uint64) *SysMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a SysMenu.
func (c *SysMenuClient) QueryRoles(sm *SysMenu) *SysRoleQuery {
	query := &SysRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysmenu.Table, sysmenu.FieldID, id),
			sqlgraph.To(sysrole.Table, sysrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, sysmenu.RolesTable, sysmenu.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a SysMenu.
func (c *SysMenuClient) QueryParent(sm *SysMenu) *SysMenuQuery {
	query := &SysMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysmenu.Table, sysmenu.FieldID, id),
			sqlgraph.To(sysmenu.Table, sysmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysmenu.ParentTable, sysmenu.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a SysMenu.
func (c *SysMenuClient) QueryChildren(sm *SysMenu) *SysMenuQuery {
	query := &SysMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysmenu.Table, sysmenu.FieldID, id),
			sqlgraph.To(sysmenu.Table, sysmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysmenu.ChildrenTable, sysmenu.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysMenuClient) Hooks() []Hook {
	return c.hooks.SysMenu
}

// SysMenuParamClient is a client for the SysMenuParam schema.
type SysMenuParamClient struct {
	config
}

// NewSysMenuParamClient returns a client for the SysMenuParam from the given config.
func NewSysMenuParamClient(c config) *SysMenuParamClient {
	return &SysMenuParamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysmenuparam.Hooks(f(g(h())))`.
func (c *SysMenuParamClient) Use(hooks ...Hook) {
	c.hooks.SysMenuParam = append(c.hooks.SysMenuParam, hooks...)
}

// Create returns a builder for creating a SysMenuParam entity.
func (c *SysMenuParamClient) Create() *SysMenuParamCreate {
	mutation := newSysMenuParamMutation(c.config, OpCreate)
	return &SysMenuParamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysMenuParam entities.
func (c *SysMenuParamClient) CreateBulk(builders ...*SysMenuParamCreate) *SysMenuParamCreateBulk {
	return &SysMenuParamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysMenuParam.
func (c *SysMenuParamClient) Update() *SysMenuParamUpdate {
	mutation := newSysMenuParamMutation(c.config, OpUpdate)
	return &SysMenuParamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysMenuParamClient) UpdateOne(smp *SysMenuParam) *SysMenuParamUpdateOne {
	mutation := newSysMenuParamMutation(c.config, OpUpdateOne, withSysMenuParam(smp))
	return &SysMenuParamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysMenuParamClient) UpdateOneID(id uint64) *SysMenuParamUpdateOne {
	mutation := newSysMenuParamMutation(c.config, OpUpdateOne, withSysMenuParamID(id))
	return &SysMenuParamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysMenuParam.
func (c *SysMenuParamClient) Delete() *SysMenuParamDelete {
	mutation := newSysMenuParamMutation(c.config, OpDelete)
	return &SysMenuParamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysMenuParamClient) DeleteOne(smp *SysMenuParam) *SysMenuParamDeleteOne {
	return c.DeleteOneID(smp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysMenuParamClient) DeleteOneID(id uint64) *SysMenuParamDeleteOne {
	builder := c.Delete().Where(sysmenuparam.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysMenuParamDeleteOne{builder}
}

// Query returns a query builder for SysMenuParam.
func (c *SysMenuParamClient) Query() *SysMenuParamQuery {
	return &SysMenuParamQuery{
		config: c.config,
	}
}

// Get returns a SysMenuParam entity by its id.
func (c *SysMenuParamClient) Get(ctx context.Context, id uint64) (*SysMenuParam, error) {
	return c.Query().Where(sysmenuparam.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysMenuParamClient) GetX(ctx context.Context, id uint64) *SysMenuParam {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysMenuParamClient) Hooks() []Hook {
	return c.hooks.SysMenuParam
}

// SysOauthProviderClient is a client for the SysOauthProvider schema.
type SysOauthProviderClient struct {
	config
}

// NewSysOauthProviderClient returns a client for the SysOauthProvider from the given config.
func NewSysOauthProviderClient(c config) *SysOauthProviderClient {
	return &SysOauthProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysoauthprovider.Hooks(f(g(h())))`.
func (c *SysOauthProviderClient) Use(hooks ...Hook) {
	c.hooks.SysOauthProvider = append(c.hooks.SysOauthProvider, hooks...)
}

// Create returns a builder for creating a SysOauthProvider entity.
func (c *SysOauthProviderClient) Create() *SysOauthProviderCreate {
	mutation := newSysOauthProviderMutation(c.config, OpCreate)
	return &SysOauthProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysOauthProvider entities.
func (c *SysOauthProviderClient) CreateBulk(builders ...*SysOauthProviderCreate) *SysOauthProviderCreateBulk {
	return &SysOauthProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysOauthProvider.
func (c *SysOauthProviderClient) Update() *SysOauthProviderUpdate {
	mutation := newSysOauthProviderMutation(c.config, OpUpdate)
	return &SysOauthProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysOauthProviderClient) UpdateOne(sop *SysOauthProvider) *SysOauthProviderUpdateOne {
	mutation := newSysOauthProviderMutation(c.config, OpUpdateOne, withSysOauthProvider(sop))
	return &SysOauthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysOauthProviderClient) UpdateOneID(id uint64) *SysOauthProviderUpdateOne {
	mutation := newSysOauthProviderMutation(c.config, OpUpdateOne, withSysOauthProviderID(id))
	return &SysOauthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysOauthProvider.
func (c *SysOauthProviderClient) Delete() *SysOauthProviderDelete {
	mutation := newSysOauthProviderMutation(c.config, OpDelete)
	return &SysOauthProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysOauthProviderClient) DeleteOne(sop *SysOauthProvider) *SysOauthProviderDeleteOne {
	return c.DeleteOneID(sop.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysOauthProviderClient) DeleteOneID(id uint64) *SysOauthProviderDeleteOne {
	builder := c.Delete().Where(sysoauthprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysOauthProviderDeleteOne{builder}
}

// Query returns a query builder for SysOauthProvider.
func (c *SysOauthProviderClient) Query() *SysOauthProviderQuery {
	return &SysOauthProviderQuery{
		config: c.config,
	}
}

// Get returns a SysOauthProvider entity by its id.
func (c *SysOauthProviderClient) Get(ctx context.Context, id uint64) (*SysOauthProvider, error) {
	return c.Query().Where(sysoauthprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysOauthProviderClient) GetX(ctx context.Context, id uint64) *SysOauthProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysOauthProviderClient) Hooks() []Hook {
	return c.hooks.SysOauthProvider
}

// SysRoleClient is a client for the SysRole schema.
type SysRoleClient struct {
	config
}

// NewSysRoleClient returns a client for the SysRole from the given config.
func NewSysRoleClient(c config) *SysRoleClient {
	return &SysRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysrole.Hooks(f(g(h())))`.
func (c *SysRoleClient) Use(hooks ...Hook) {
	c.hooks.SysRole = append(c.hooks.SysRole, hooks...)
}

// Create returns a builder for creating a SysRole entity.
func (c *SysRoleClient) Create() *SysRoleCreate {
	mutation := newSysRoleMutation(c.config, OpCreate)
	return &SysRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysRole entities.
func (c *SysRoleClient) CreateBulk(builders ...*SysRoleCreate) *SysRoleCreateBulk {
	return &SysRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysRole.
func (c *SysRoleClient) Update() *SysRoleUpdate {
	mutation := newSysRoleMutation(c.config, OpUpdate)
	return &SysRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysRoleClient) UpdateOne(sr *SysRole) *SysRoleUpdateOne {
	mutation := newSysRoleMutation(c.config, OpUpdateOne, withSysRole(sr))
	return &SysRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysRoleClient) UpdateOneID(id uint64) *SysRoleUpdateOne {
	mutation := newSysRoleMutation(c.config, OpUpdateOne, withSysRoleID(id))
	return &SysRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysRole.
func (c *SysRoleClient) Delete() *SysRoleDelete {
	mutation := newSysRoleMutation(c.config, OpDelete)
	return &SysRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysRoleClient) DeleteOne(sr *SysRole) *SysRoleDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysRoleClient) DeleteOneID(id uint64) *SysRoleDeleteOne {
	builder := c.Delete().Where(sysrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysRoleDeleteOne{builder}
}

// Query returns a query builder for SysRole.
func (c *SysRoleClient) Query() *SysRoleQuery {
	return &SysRoleQuery{
		config: c.config,
	}
}

// Get returns a SysRole entity by its id.
func (c *SysRoleClient) Get(ctx context.Context, id uint64) (*SysRole, error) {
	return c.Query().Where(sysrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysRoleClient) GetX(ctx context.Context, id uint64) *SysRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMenus queries the menus edge of a SysRole.
func (c *SysRoleClient) QueryMenus(sr *SysRole) *SysMenuQuery {
	query := &SysMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysrole.Table, sysrole.FieldID, id),
			sqlgraph.To(sysmenu.Table, sysmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sysrole.MenusTable, sysrole.MenusPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a SysRole.
func (c *SysRoleClient) QueryRole(sr *SysRole) *SysUserQuery {
	query := &SysUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysrole.Table, sysrole.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysrole.RoleTable, sysrole.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysRoleClient) Hooks() []Hook {
	return c.hooks.SysRole
}

// SysTokenClient is a client for the SysToken schema.
type SysTokenClient struct {
	config
}

// NewSysTokenClient returns a client for the SysToken from the given config.
func NewSysTokenClient(c config) *SysTokenClient {
	return &SysTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systoken.Hooks(f(g(h())))`.
func (c *SysTokenClient) Use(hooks ...Hook) {
	c.hooks.SysToken = append(c.hooks.SysToken, hooks...)
}

// Create returns a builder for creating a SysToken entity.
func (c *SysTokenClient) Create() *SysTokenCreate {
	mutation := newSysTokenMutation(c.config, OpCreate)
	return &SysTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysToken entities.
func (c *SysTokenClient) CreateBulk(builders ...*SysTokenCreate) *SysTokenCreateBulk {
	return &SysTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysToken.
func (c *SysTokenClient) Update() *SysTokenUpdate {
	mutation := newSysTokenMutation(c.config, OpUpdate)
	return &SysTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysTokenClient) UpdateOne(st *SysToken) *SysTokenUpdateOne {
	mutation := newSysTokenMutation(c.config, OpUpdateOne, withSysToken(st))
	return &SysTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysTokenClient) UpdateOneID(id uint64) *SysTokenUpdateOne {
	mutation := newSysTokenMutation(c.config, OpUpdateOne, withSysTokenID(id))
	return &SysTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysToken.
func (c *SysTokenClient) Delete() *SysTokenDelete {
	mutation := newSysTokenMutation(c.config, OpDelete)
	return &SysTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysTokenClient) DeleteOne(st *SysToken) *SysTokenDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysTokenClient) DeleteOneID(id uint64) *SysTokenDeleteOne {
	builder := c.Delete().Where(systoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysTokenDeleteOne{builder}
}

// Query returns a query builder for SysToken.
func (c *SysTokenClient) Query() *SysTokenQuery {
	return &SysTokenQuery{
		config: c.config,
	}
}

// Get returns a SysToken entity by its id.
func (c *SysTokenClient) Get(ctx context.Context, id uint64) (*SysToken, error) {
	return c.Query().Where(systoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysTokenClient) GetX(ctx context.Context, id uint64) *SysToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysTokenClient) Hooks() []Hook {
	return c.hooks.SysToken
}

// SysUserClient is a client for the SysUser schema.
type SysUserClient struct {
	config
}

// NewSysUserClient returns a client for the SysUser from the given config.
func NewSysUserClient(c config) *SysUserClient {
	return &SysUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuser.Hooks(f(g(h())))`.
func (c *SysUserClient) Use(hooks ...Hook) {
	c.hooks.SysUser = append(c.hooks.SysUser, hooks...)
}

// Create returns a builder for creating a SysUser entity.
func (c *SysUserClient) Create() *SysUserCreate {
	mutation := newSysUserMutation(c.config, OpCreate)
	return &SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUser entities.
func (c *SysUserClient) CreateBulk(builders ...*SysUserCreate) *SysUserCreateBulk {
	return &SysUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUser.
func (c *SysUserClient) Update() *SysUserUpdate {
	mutation := newSysUserMutation(c.config, OpUpdate)
	return &SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserClient) UpdateOne(su *SysUser) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUser(su))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysUserClient) UpdateOneID(id uint64) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUserID(id))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUser.
func (c *SysUserClient) Delete() *SysUserDelete {
	mutation := newSysUserMutation(c.config, OpDelete)
	return &SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysUserClient) DeleteOne(su *SysUser) *SysUserDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysUserClient) DeleteOneID(id uint64) *SysUserDeleteOne {
	builder := c.Delete().Where(sysuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysUserDeleteOne{builder}
}

// Query returns a query builder for SysUser.
func (c *SysUserClient) Query() *SysUserQuery {
	return &SysUserQuery{
		config: c.config,
	}
}

// Get returns a SysUser entity by its id.
func (c *SysUserClient) Get(ctx context.Context, id uint64) (*SysUser, error) {
	return c.Query().Where(sysuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysUserClient) GetX(ctx context.Context, id uint64) *SysUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a SysUser.
func (c *SysUserClient) QueryRole(su *SysUser) *SysRoleQuery {
	query := &SysRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(sysrole.Table, sysrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysuser.RoleTable, sysuser.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysUserClient) Hooks() []Hook {
	return c.hooks.SysUser
}
