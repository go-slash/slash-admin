// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/sysoauthprovider"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysOauthProviderCreate is the builder for creating a SysOauthProvider entity.
type SysOauthProviderCreate struct {
	config
	mutation *SysOauthProviderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (sopc *SysOauthProviderCreate) SetName(s string) *SysOauthProviderCreate {
	sopc.mutation.SetName(s)
	return sopc
}

// SetClientID sets the "client_id" field.
func (sopc *SysOauthProviderCreate) SetClientID(s string) *SysOauthProviderCreate {
	sopc.mutation.SetClientID(s)
	return sopc
}

// SetClientSecret sets the "client_secret" field.
func (sopc *SysOauthProviderCreate) SetClientSecret(s string) *SysOauthProviderCreate {
	sopc.mutation.SetClientSecret(s)
	return sopc
}

// SetRedirectURL sets the "redirect_url" field.
func (sopc *SysOauthProviderCreate) SetRedirectURL(s string) *SysOauthProviderCreate {
	sopc.mutation.SetRedirectURL(s)
	return sopc
}

// SetScopes sets the "scopes" field.
func (sopc *SysOauthProviderCreate) SetScopes(s string) *SysOauthProviderCreate {
	sopc.mutation.SetScopes(s)
	return sopc
}

// SetAuthURL sets the "auth_url" field.
func (sopc *SysOauthProviderCreate) SetAuthURL(s string) *SysOauthProviderCreate {
	sopc.mutation.SetAuthURL(s)
	return sopc
}

// SetTokenURL sets the "token_url" field.
func (sopc *SysOauthProviderCreate) SetTokenURL(s string) *SysOauthProviderCreate {
	sopc.mutation.SetTokenURL(s)
	return sopc
}

// SetAuthStyle sets the "auth_style" field.
func (sopc *SysOauthProviderCreate) SetAuthStyle(u uint8) *SysOauthProviderCreate {
	sopc.mutation.SetAuthStyle(u)
	return sopc
}

// SetInfoURL sets the "info_url" field.
func (sopc *SysOauthProviderCreate) SetInfoURL(s string) *SysOauthProviderCreate {
	sopc.mutation.SetInfoURL(s)
	return sopc
}

// SetCreatedAt sets the "created_at" field.
func (sopc *SysOauthProviderCreate) SetCreatedAt(t time.Time) *SysOauthProviderCreate {
	sopc.mutation.SetCreatedAt(t)
	return sopc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sopc *SysOauthProviderCreate) SetNillableCreatedAt(t *time.Time) *SysOauthProviderCreate {
	if t != nil {
		sopc.SetCreatedAt(*t)
	}
	return sopc
}

// SetUpdatedAt sets the "updated_at" field.
func (sopc *SysOauthProviderCreate) SetUpdatedAt(t time.Time) *SysOauthProviderCreate {
	sopc.mutation.SetUpdatedAt(t)
	return sopc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sopc *SysOauthProviderCreate) SetNillableUpdatedAt(t *time.Time) *SysOauthProviderCreate {
	if t != nil {
		sopc.SetUpdatedAt(*t)
	}
	return sopc
}

// SetDeletedAt sets the "deleted_at" field.
func (sopc *SysOauthProviderCreate) SetDeletedAt(t time.Time) *SysOauthProviderCreate {
	sopc.mutation.SetDeletedAt(t)
	return sopc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sopc *SysOauthProviderCreate) SetNillableDeletedAt(t *time.Time) *SysOauthProviderCreate {
	if t != nil {
		sopc.SetDeletedAt(*t)
	}
	return sopc
}

// SetID sets the "id" field.
func (sopc *SysOauthProviderCreate) SetID(u uint64) *SysOauthProviderCreate {
	sopc.mutation.SetID(u)
	return sopc
}

// Mutation returns the SysOauthProviderMutation object of the builder.
func (sopc *SysOauthProviderCreate) Mutation() *SysOauthProviderMutation {
	return sopc.mutation
}

// Save creates the SysOauthProvider in the database.
func (sopc *SysOauthProviderCreate) Save(ctx context.Context) (*SysOauthProvider, error) {
	var (
		err  error
		node *SysOauthProvider
	)
	sopc.defaults()
	if len(sopc.hooks) == 0 {
		if err = sopc.check(); err != nil {
			return nil, err
		}
		node, err = sopc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysOauthProviderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sopc.check(); err != nil {
				return nil, err
			}
			sopc.mutation = mutation
			if node, err = sopc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sopc.hooks) - 1; i >= 0; i-- {
			if sopc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sopc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sopc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysOauthProvider)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysOauthProviderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sopc *SysOauthProviderCreate) SaveX(ctx context.Context) *SysOauthProvider {
	v, err := sopc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sopc *SysOauthProviderCreate) Exec(ctx context.Context) error {
	_, err := sopc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sopc *SysOauthProviderCreate) ExecX(ctx context.Context) {
	if err := sopc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sopc *SysOauthProviderCreate) defaults() {
	if _, ok := sopc.mutation.CreatedAt(); !ok {
		v := sysoauthprovider.DefaultCreatedAt()
		sopc.mutation.SetCreatedAt(v)
	}
	if _, ok := sopc.mutation.UpdatedAt(); !ok {
		v := sysoauthprovider.DefaultUpdatedAt()
		sopc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sopc *SysOauthProviderCreate) check() error {
	if _, ok := sopc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SysOauthProvider.name"`)}
	}
	if _, ok := sopc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "SysOauthProvider.client_id"`)}
	}
	if _, ok := sopc.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "SysOauthProvider.client_secret"`)}
	}
	if _, ok := sopc.mutation.RedirectURL(); !ok {
		return &ValidationError{Name: "redirect_url", err: errors.New(`ent: missing required field "SysOauthProvider.redirect_url"`)}
	}
	if _, ok := sopc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "SysOauthProvider.scopes"`)}
	}
	if _, ok := sopc.mutation.AuthURL(); !ok {
		return &ValidationError{Name: "auth_url", err: errors.New(`ent: missing required field "SysOauthProvider.auth_url"`)}
	}
	if _, ok := sopc.mutation.TokenURL(); !ok {
		return &ValidationError{Name: "token_url", err: errors.New(`ent: missing required field "SysOauthProvider.token_url"`)}
	}
	if _, ok := sopc.mutation.AuthStyle(); !ok {
		return &ValidationError{Name: "auth_style", err: errors.New(`ent: missing required field "SysOauthProvider.auth_style"`)}
	}
	if _, ok := sopc.mutation.InfoURL(); !ok {
		return &ValidationError{Name: "info_url", err: errors.New(`ent: missing required field "SysOauthProvider.info_url"`)}
	}
	if _, ok := sopc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysOauthProvider.created_at"`)}
	}
	if _, ok := sopc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysOauthProvider.updated_at"`)}
	}
	return nil
}

func (sopc *SysOauthProviderCreate) sqlSave(ctx context.Context) (*SysOauthProvider, error) {
	_node, _spec := sopc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sopc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (sopc *SysOauthProviderCreate) createSpec() (*SysOauthProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &SysOauthProvider{config: sopc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysoauthprovider.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysoauthprovider.FieldID,
			},
		}
	)
	_spec.OnConflict = sopc.conflict
	if id, ok := sopc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sopc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sopc.mutation.ClientID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldClientID,
		})
		_node.ClientID = value
	}
	if value, ok := sopc.mutation.ClientSecret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldClientSecret,
		})
		_node.ClientSecret = value
	}
	if value, ok := sopc.mutation.RedirectURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldRedirectURL,
		})
		_node.RedirectURL = value
	}
	if value, ok := sopc.mutation.Scopes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldScopes,
		})
		_node.Scopes = value
	}
	if value, ok := sopc.mutation.AuthURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldAuthURL,
		})
		_node.AuthURL = value
	}
	if value, ok := sopc.mutation.TokenURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldTokenURL,
		})
		_node.TokenURL = value
	}
	if value, ok := sopc.mutation.AuthStyle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysoauthprovider.FieldAuthStyle,
		})
		_node.AuthStyle = value
	}
	if value, ok := sopc.mutation.InfoURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldInfoURL,
		})
		_node.InfoURL = value
	}
	if value, ok := sopc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoauthprovider.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sopc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoauthprovider.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sopc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoauthprovider.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysOauthProvider.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysOauthProviderUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (sopc *SysOauthProviderCreate) OnConflict(opts ...sql.ConflictOption) *SysOauthProviderUpsertOne {
	sopc.conflict = opts
	return &SysOauthProviderUpsertOne{
		create: sopc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysOauthProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sopc *SysOauthProviderCreate) OnConflictColumns(columns ...string) *SysOauthProviderUpsertOne {
	sopc.conflict = append(sopc.conflict, sql.ConflictColumns(columns...))
	return &SysOauthProviderUpsertOne{
		create: sopc,
	}
}

type (
	// SysOauthProviderUpsertOne is the builder for "upsert"-ing
	//  one SysOauthProvider node.
	SysOauthProviderUpsertOne struct {
		create *SysOauthProviderCreate
	}

	// SysOauthProviderUpsert is the "OnConflict" setter.
	SysOauthProviderUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *SysOauthProviderUpsert) SetName(v string) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateName() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldName)
	return u
}

// SetClientID sets the "client_id" field.
func (u *SysOauthProviderUpsert) SetClientID(v string) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateClientID() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldClientID)
	return u
}

// SetClientSecret sets the "client_secret" field.
func (u *SysOauthProviderUpsert) SetClientSecret(v string) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateClientSecret() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldClientSecret)
	return u
}

// SetRedirectURL sets the "redirect_url" field.
func (u *SysOauthProviderUpsert) SetRedirectURL(v string) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldRedirectURL, v)
	return u
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateRedirectURL() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldRedirectURL)
	return u
}

// SetScopes sets the "scopes" field.
func (u *SysOauthProviderUpsert) SetScopes(v string) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldScopes, v)
	return u
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateScopes() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldScopes)
	return u
}

// SetAuthURL sets the "auth_url" field.
func (u *SysOauthProviderUpsert) SetAuthURL(v string) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldAuthURL, v)
	return u
}

// UpdateAuthURL sets the "auth_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateAuthURL() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldAuthURL)
	return u
}

// SetTokenURL sets the "token_url" field.
func (u *SysOauthProviderUpsert) SetTokenURL(v string) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldTokenURL, v)
	return u
}

// UpdateTokenURL sets the "token_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateTokenURL() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldTokenURL)
	return u
}

// SetAuthStyle sets the "auth_style" field.
func (u *SysOauthProviderUpsert) SetAuthStyle(v uint8) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldAuthStyle, v)
	return u
}

// UpdateAuthStyle sets the "auth_style" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateAuthStyle() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldAuthStyle)
	return u
}

// AddAuthStyle adds v to the "auth_style" field.
func (u *SysOauthProviderUpsert) AddAuthStyle(v uint8) *SysOauthProviderUpsert {
	u.Add(sysoauthprovider.FieldAuthStyle, v)
	return u
}

// SetInfoURL sets the "info_url" field.
func (u *SysOauthProviderUpsert) SetInfoURL(v string) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldInfoURL, v)
	return u
}

// UpdateInfoURL sets the "info_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateInfoURL() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldInfoURL)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SysOauthProviderUpsert) SetCreatedAt(v time.Time) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateCreatedAt() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysOauthProviderUpsert) SetUpdatedAt(v time.Time) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateUpdatedAt() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysOauthProviderUpsert) SetDeletedAt(v time.Time) *SysOauthProviderUpsert {
	u.Set(sysoauthprovider.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsert) UpdateDeletedAt() *SysOauthProviderUpsert {
	u.SetExcluded(sysoauthprovider.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysOauthProviderUpsert) ClearDeletedAt() *SysOauthProviderUpsert {
	u.SetNull(sysoauthprovider.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysOauthProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysoauthprovider.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysOauthProviderUpsertOne) UpdateNewValues() *SysOauthProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysoauthprovider.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysOauthProvider.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysOauthProviderUpsertOne) Ignore() *SysOauthProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysOauthProviderUpsertOne) DoNothing() *SysOauthProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysOauthProviderCreate.OnConflict
// documentation for more info.
func (u *SysOauthProviderUpsertOne) Update(set func(*SysOauthProviderUpsert)) *SysOauthProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysOauthProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SysOauthProviderUpsertOne) SetName(v string) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateName() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateName()
	})
}

// SetClientID sets the "client_id" field.
func (u *SysOauthProviderUpsertOne) SetClientID(v string) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateClientID() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *SysOauthProviderUpsertOne) SetClientSecret(v string) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateClientSecret() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateClientSecret()
	})
}

// SetRedirectURL sets the "redirect_url" field.
func (u *SysOauthProviderUpsertOne) SetRedirectURL(v string) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetRedirectURL(v)
	})
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateRedirectURL() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateRedirectURL()
	})
}

// SetScopes sets the "scopes" field.
func (u *SysOauthProviderUpsertOne) SetScopes(v string) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateScopes() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateScopes()
	})
}

// SetAuthURL sets the "auth_url" field.
func (u *SysOauthProviderUpsertOne) SetAuthURL(v string) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetAuthURL(v)
	})
}

// UpdateAuthURL sets the "auth_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateAuthURL() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateAuthURL()
	})
}

// SetTokenURL sets the "token_url" field.
func (u *SysOauthProviderUpsertOne) SetTokenURL(v string) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetTokenURL(v)
	})
}

// UpdateTokenURL sets the "token_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateTokenURL() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateTokenURL()
	})
}

// SetAuthStyle sets the "auth_style" field.
func (u *SysOauthProviderUpsertOne) SetAuthStyle(v uint8) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetAuthStyle(v)
	})
}

// AddAuthStyle adds v to the "auth_style" field.
func (u *SysOauthProviderUpsertOne) AddAuthStyle(v uint8) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.AddAuthStyle(v)
	})
}

// UpdateAuthStyle sets the "auth_style" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateAuthStyle() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateAuthStyle()
	})
}

// SetInfoURL sets the "info_url" field.
func (u *SysOauthProviderUpsertOne) SetInfoURL(v string) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetInfoURL(v)
	})
}

// UpdateInfoURL sets the "info_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateInfoURL() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateInfoURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysOauthProviderUpsertOne) SetCreatedAt(v time.Time) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateCreatedAt() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysOauthProviderUpsertOne) SetUpdatedAt(v time.Time) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateUpdatedAt() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysOauthProviderUpsertOne) SetDeletedAt(v time.Time) *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsertOne) UpdateDeletedAt() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysOauthProviderUpsertOne) ClearDeletedAt() *SysOauthProviderUpsertOne {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysOauthProviderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysOauthProviderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysOauthProviderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysOauthProviderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysOauthProviderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysOauthProviderCreateBulk is the builder for creating many SysOauthProvider entities in bulk.
type SysOauthProviderCreateBulk struct {
	config
	builders []*SysOauthProviderCreate
	conflict []sql.ConflictOption
}

// Save creates the SysOauthProvider entities in the database.
func (sopcb *SysOauthProviderCreateBulk) Save(ctx context.Context) ([]*SysOauthProvider, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sopcb.builders))
	nodes := make([]*SysOauthProvider, len(sopcb.builders))
	mutators := make([]Mutator, len(sopcb.builders))
	for i := range sopcb.builders {
		func(i int, root context.Context) {
			builder := sopcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysOauthProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sopcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sopcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sopcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sopcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sopcb *SysOauthProviderCreateBulk) SaveX(ctx context.Context) []*SysOauthProvider {
	v, err := sopcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sopcb *SysOauthProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := sopcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sopcb *SysOauthProviderCreateBulk) ExecX(ctx context.Context) {
	if err := sopcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysOauthProvider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysOauthProviderUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (sopcb *SysOauthProviderCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysOauthProviderUpsertBulk {
	sopcb.conflict = opts
	return &SysOauthProviderUpsertBulk{
		create: sopcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysOauthProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sopcb *SysOauthProviderCreateBulk) OnConflictColumns(columns ...string) *SysOauthProviderUpsertBulk {
	sopcb.conflict = append(sopcb.conflict, sql.ConflictColumns(columns...))
	return &SysOauthProviderUpsertBulk{
		create: sopcb,
	}
}

// SysOauthProviderUpsertBulk is the builder for "upsert"-ing
// a bulk of SysOauthProvider nodes.
type SysOauthProviderUpsertBulk struct {
	create *SysOauthProviderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysOauthProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysoauthprovider.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysOauthProviderUpsertBulk) UpdateNewValues() *SysOauthProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysoauthprovider.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysOauthProvider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysOauthProviderUpsertBulk) Ignore() *SysOauthProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysOauthProviderUpsertBulk) DoNothing() *SysOauthProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysOauthProviderCreateBulk.OnConflict
// documentation for more info.
func (u *SysOauthProviderUpsertBulk) Update(set func(*SysOauthProviderUpsert)) *SysOauthProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysOauthProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SysOauthProviderUpsertBulk) SetName(v string) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateName() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateName()
	})
}

// SetClientID sets the "client_id" field.
func (u *SysOauthProviderUpsertBulk) SetClientID(v string) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateClientID() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *SysOauthProviderUpsertBulk) SetClientSecret(v string) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateClientSecret() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateClientSecret()
	})
}

// SetRedirectURL sets the "redirect_url" field.
func (u *SysOauthProviderUpsertBulk) SetRedirectURL(v string) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetRedirectURL(v)
	})
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateRedirectURL() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateRedirectURL()
	})
}

// SetScopes sets the "scopes" field.
func (u *SysOauthProviderUpsertBulk) SetScopes(v string) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateScopes() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateScopes()
	})
}

// SetAuthURL sets the "auth_url" field.
func (u *SysOauthProviderUpsertBulk) SetAuthURL(v string) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetAuthURL(v)
	})
}

// UpdateAuthURL sets the "auth_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateAuthURL() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateAuthURL()
	})
}

// SetTokenURL sets the "token_url" field.
func (u *SysOauthProviderUpsertBulk) SetTokenURL(v string) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetTokenURL(v)
	})
}

// UpdateTokenURL sets the "token_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateTokenURL() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateTokenURL()
	})
}

// SetAuthStyle sets the "auth_style" field.
func (u *SysOauthProviderUpsertBulk) SetAuthStyle(v uint8) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetAuthStyle(v)
	})
}

// AddAuthStyle adds v to the "auth_style" field.
func (u *SysOauthProviderUpsertBulk) AddAuthStyle(v uint8) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.AddAuthStyle(v)
	})
}

// UpdateAuthStyle sets the "auth_style" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateAuthStyle() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateAuthStyle()
	})
}

// SetInfoURL sets the "info_url" field.
func (u *SysOauthProviderUpsertBulk) SetInfoURL(v string) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetInfoURL(v)
	})
}

// UpdateInfoURL sets the "info_url" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateInfoURL() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateInfoURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysOauthProviderUpsertBulk) SetCreatedAt(v time.Time) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateCreatedAt() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysOauthProviderUpsertBulk) SetUpdatedAt(v time.Time) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateUpdatedAt() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysOauthProviderUpsertBulk) SetDeletedAt(v time.Time) *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysOauthProviderUpsertBulk) UpdateDeletedAt() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysOauthProviderUpsertBulk) ClearDeletedAt() *SysOauthProviderUpsertBulk {
	return u.Update(func(s *SysOauthProviderUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysOauthProviderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysOauthProviderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysOauthProviderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysOauthProviderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
