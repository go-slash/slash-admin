// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/sysuser"
	"slash-admin/pkg/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysUserCreate is the builder for creating a SysUser entity.
type SysUserCreate struct {
	config
	mutation *SysUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUUID sets the "uuid" field.
func (suc *SysUserCreate) SetUUID(s string) *SysUserCreate {
	suc.mutation.SetUUID(s)
	return suc
}

// SetUsername sets the "username" field.
func (suc *SysUserCreate) SetUsername(s string) *SysUserCreate {
	suc.mutation.SetUsername(s)
	return suc
}

// SetPassword sets the "password" field.
func (suc *SysUserCreate) SetPassword(s string) *SysUserCreate {
	suc.mutation.SetPassword(s)
	return suc
}

// SetNickname sets the "nickname" field.
func (suc *SysUserCreate) SetNickname(s string) *SysUserCreate {
	suc.mutation.SetNickname(s)
	return suc
}

// SetSideMode sets the "side_mode" field.
func (suc *SysUserCreate) SetSideMode(s string) *SysUserCreate {
	suc.mutation.SetSideMode(s)
	return suc
}

// SetNillableSideMode sets the "side_mode" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableSideMode(s *string) *SysUserCreate {
	if s != nil {
		suc.SetSideMode(*s)
	}
	return suc
}

// SetAvatar sets the "avatar" field.
func (suc *SysUserCreate) SetAvatar(s string) *SysUserCreate {
	suc.mutation.SetAvatar(s)
	return suc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableAvatar(s *string) *SysUserCreate {
	if s != nil {
		suc.SetAvatar(*s)
	}
	return suc
}

// SetBaseColor sets the "base_color" field.
func (suc *SysUserCreate) SetBaseColor(s string) *SysUserCreate {
	suc.mutation.SetBaseColor(s)
	return suc
}

// SetNillableBaseColor sets the "base_color" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableBaseColor(s *string) *SysUserCreate {
	if s != nil {
		suc.SetBaseColor(*s)
	}
	return suc
}

// SetActiveColor sets the "active_color" field.
func (suc *SysUserCreate) SetActiveColor(s string) *SysUserCreate {
	suc.mutation.SetActiveColor(s)
	return suc
}

// SetNillableActiveColor sets the "active_color" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableActiveColor(s *string) *SysUserCreate {
	if s != nil {
		suc.SetActiveColor(*s)
	}
	return suc
}

// SetRoleID sets the "role_id" field.
func (suc *SysUserCreate) SetRoleID(u uint32) *SysUserCreate {
	suc.mutation.SetRoleID(u)
	return suc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableRoleID(u *uint32) *SysUserCreate {
	if u != nil {
		suc.SetRoleID(*u)
	}
	return suc
}

// SetMobile sets the "mobile" field.
func (suc *SysUserCreate) SetMobile(s string) *SysUserCreate {
	suc.mutation.SetMobile(s)
	return suc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableMobile(s *string) *SysUserCreate {
	if s != nil {
		suc.SetMobile(*s)
	}
	return suc
}

// SetEmail sets the "email" field.
func (suc *SysUserCreate) SetEmail(s string) *SysUserCreate {
	suc.mutation.SetEmail(s)
	return suc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableEmail(s *string) *SysUserCreate {
	if s != nil {
		suc.SetEmail(*s)
	}
	return suc
}

// SetStatus sets the "status" field.
func (suc *SysUserCreate) SetStatus(t types.Status) *SysUserCreate {
	suc.mutation.SetStatus(t)
	return suc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableStatus(t *types.Status) *SysUserCreate {
	if t != nil {
		suc.SetStatus(*t)
	}
	return suc
}

// SetCreatedAt sets the "created_at" field.
func (suc *SysUserCreate) SetCreatedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetCreatedAt(t)
	return suc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableCreatedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetCreatedAt(*t)
	}
	return suc
}

// SetUpdatedAt sets the "updated_at" field.
func (suc *SysUserCreate) SetUpdatedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetUpdatedAt(t)
	return suc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableUpdatedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetUpdatedAt(*t)
	}
	return suc
}

// SetDeletedAt sets the "deleted_at" field.
func (suc *SysUserCreate) SetDeletedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetDeletedAt(t)
	return suc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableDeletedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetDeletedAt(*t)
	}
	return suc
}

// SetID sets the "id" field.
func (suc *SysUserCreate) SetID(u uint64) *SysUserCreate {
	suc.mutation.SetID(u)
	return suc
}

// Mutation returns the SysUserMutation object of the builder.
func (suc *SysUserCreate) Mutation() *SysUserMutation {
	return suc.mutation
}

// Save creates the SysUser in the database.
func (suc *SysUserCreate) Save(ctx context.Context) (*SysUser, error) {
	var (
		err  error
		node *SysUser
	)
	suc.defaults()
	if len(suc.hooks) == 0 {
		if err = suc.check(); err != nil {
			return nil, err
		}
		node, err = suc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suc.check(); err != nil {
				return nil, err
			}
			suc.mutation = mutation
			if node, err = suc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(suc.hooks) - 1; i >= 0; i-- {
			if suc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SysUserCreate) SaveX(ctx context.Context) *SysUser {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SysUserCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SysUserCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *SysUserCreate) defaults() {
	if _, ok := suc.mutation.SideMode(); !ok {
		v := sysuser.DefaultSideMode
		suc.mutation.SetSideMode(v)
	}
	if _, ok := suc.mutation.Avatar(); !ok {
		v := sysuser.DefaultAvatar
		suc.mutation.SetAvatar(v)
	}
	if _, ok := suc.mutation.BaseColor(); !ok {
		v := sysuser.DefaultBaseColor
		suc.mutation.SetBaseColor(v)
	}
	if _, ok := suc.mutation.ActiveColor(); !ok {
		v := sysuser.DefaultActiveColor
		suc.mutation.SetActiveColor(v)
	}
	if _, ok := suc.mutation.RoleID(); !ok {
		v := sysuser.DefaultRoleID
		suc.mutation.SetRoleID(v)
	}
	if _, ok := suc.mutation.Status(); !ok {
		v := sysuser.DefaultStatus
		suc.mutation.SetStatus(v)
	}
	if _, ok := suc.mutation.CreatedAt(); !ok {
		v := sysuser.DefaultCreatedAt()
		suc.mutation.SetCreatedAt(v)
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		v := sysuser.DefaultUpdatedAt()
		suc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suc *SysUserCreate) check() error {
	if _, ok := suc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "SysUser.uuid"`)}
	}
	if _, ok := suc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "SysUser.username"`)}
	}
	if _, ok := suc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "SysUser.password"`)}
	}
	if _, ok := suc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "SysUser.nickname"`)}
	}
	if _, ok := suc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysUser.created_at"`)}
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysUser.updated_at"`)}
	}
	return nil
}

func (suc *SysUserCreate) sqlSave(ctx context.Context) (*SysUser, error) {
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (suc *SysUserCreate) createSpec() (*SysUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SysUser{config: suc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysuser.FieldID,
			},
		}
	)
	_spec.OnConflict = suc.conflict
	if id, ok := suc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := suc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := suc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := suc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := suc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := suc.mutation.SideMode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldSideMode,
		})
		_node.SideMode = value
	}
	if value, ok := suc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := suc.mutation.BaseColor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldBaseColor,
		})
		_node.BaseColor = value
	}
	if value, ok := suc.mutation.ActiveColor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldActiveColor,
		})
		_node.ActiveColor = value
	}
	if value, ok := suc.mutation.RoleID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sysuser.FieldRoleID,
		})
		_node.RoleID = value
	}
	if value, ok := suc.mutation.Mobile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldMobile,
		})
		_node.Mobile = value
	}
	if value, ok := suc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := suc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysuser.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := suc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := suc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := suc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysUser.Create().
//		SetUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysUserUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (suc *SysUserCreate) OnConflict(opts ...sql.ConflictOption) *SysUserUpsertOne {
	suc.conflict = opts
	return &SysUserUpsertOne{
		create: suc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (suc *SysUserCreate) OnConflictColumns(columns ...string) *SysUserUpsertOne {
	suc.conflict = append(suc.conflict, sql.ConflictColumns(columns...))
	return &SysUserUpsertOne{
		create: suc,
	}
}

type (
	// SysUserUpsertOne is the builder for "upsert"-ing
	//  one SysUser node.
	SysUserUpsertOne struct {
		create *SysUserCreate
	}

	// SysUserUpsert is the "OnConflict" setter.
	SysUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUUID sets the "uuid" field.
func (u *SysUserUpsert) SetUUID(v string) *SysUserUpsert {
	u.Set(sysuser.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUUID() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUUID)
	return u
}

// SetUsername sets the "username" field.
func (u *SysUserUpsert) SetUsername(v string) *SysUserUpsert {
	u.Set(sysuser.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUsername() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUsername)
	return u
}

// SetPassword sets the "password" field.
func (u *SysUserUpsert) SetPassword(v string) *SysUserUpsert {
	u.Set(sysuser.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SysUserUpsert) UpdatePassword() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldPassword)
	return u
}

// SetNickname sets the "nickname" field.
func (u *SysUserUpsert) SetNickname(v string) *SysUserUpsert {
	u.Set(sysuser.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateNickname() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldNickname)
	return u
}

// SetSideMode sets the "side_mode" field.
func (u *SysUserUpsert) SetSideMode(v string) *SysUserUpsert {
	u.Set(sysuser.FieldSideMode, v)
	return u
}

// UpdateSideMode sets the "side_mode" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateSideMode() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldSideMode)
	return u
}

// ClearSideMode clears the value of the "side_mode" field.
func (u *SysUserUpsert) ClearSideMode() *SysUserUpsert {
	u.SetNull(sysuser.FieldSideMode)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsert) SetAvatar(v string) *SysUserUpsert {
	u.Set(sysuser.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateAvatar() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldAvatar)
	return u
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SysUserUpsert) ClearAvatar() *SysUserUpsert {
	u.SetNull(sysuser.FieldAvatar)
	return u
}

// SetBaseColor sets the "base_color" field.
func (u *SysUserUpsert) SetBaseColor(v string) *SysUserUpsert {
	u.Set(sysuser.FieldBaseColor, v)
	return u
}

// UpdateBaseColor sets the "base_color" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateBaseColor() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldBaseColor)
	return u
}

// ClearBaseColor clears the value of the "base_color" field.
func (u *SysUserUpsert) ClearBaseColor() *SysUserUpsert {
	u.SetNull(sysuser.FieldBaseColor)
	return u
}

// SetActiveColor sets the "active_color" field.
func (u *SysUserUpsert) SetActiveColor(v string) *SysUserUpsert {
	u.Set(sysuser.FieldActiveColor, v)
	return u
}

// UpdateActiveColor sets the "active_color" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateActiveColor() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldActiveColor)
	return u
}

// ClearActiveColor clears the value of the "active_color" field.
func (u *SysUserUpsert) ClearActiveColor() *SysUserUpsert {
	u.SetNull(sysuser.FieldActiveColor)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *SysUserUpsert) SetRoleID(v uint32) *SysUserUpsert {
	u.Set(sysuser.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateRoleID() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldRoleID)
	return u
}

// AddRoleID adds v to the "role_id" field.
func (u *SysUserUpsert) AddRoleID(v uint32) *SysUserUpsert {
	u.Add(sysuser.FieldRoleID, v)
	return u
}

// ClearRoleID clears the value of the "role_id" field.
func (u *SysUserUpsert) ClearRoleID() *SysUserUpsert {
	u.SetNull(sysuser.FieldRoleID)
	return u
}

// SetMobile sets the "mobile" field.
func (u *SysUserUpsert) SetMobile(v string) *SysUserUpsert {
	u.Set(sysuser.FieldMobile, v)
	return u
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateMobile() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldMobile)
	return u
}

// ClearMobile clears the value of the "mobile" field.
func (u *SysUserUpsert) ClearMobile() *SysUserUpsert {
	u.SetNull(sysuser.FieldMobile)
	return u
}

// SetEmail sets the "email" field.
func (u *SysUserUpsert) SetEmail(v string) *SysUserUpsert {
	u.Set(sysuser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateEmail() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *SysUserUpsert) ClearEmail() *SysUserUpsert {
	u.SetNull(sysuser.FieldEmail)
	return u
}

// SetStatus sets the "status" field.
func (u *SysUserUpsert) SetStatus(v types.Status) *SysUserUpsert {
	u.Set(sysuser.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateStatus() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SysUserUpsert) AddStatus(v types.Status) *SysUserUpsert {
	u.Add(sysuser.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *SysUserUpsert) ClearStatus() *SysUserUpsert {
	u.SetNull(sysuser.FieldStatus)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SysUserUpsert) SetCreatedAt(v time.Time) *SysUserUpsert {
	u.Set(sysuser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateCreatedAt() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsert) SetUpdatedAt(v time.Time) *SysUserUpsert {
	u.Set(sysuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUpdatedAt() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsert) SetDeletedAt(v time.Time) *SysUserUpsert {
	u.Set(sysuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateDeletedAt() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsert) ClearDeletedAt() *SysUserUpsert {
	u.SetNull(sysuser.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysUserUpsertOne) UpdateNewValues() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysUserUpsertOne) Ignore() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysUserUpsertOne) DoNothing() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysUserCreate.OnConflict
// documentation for more info.
func (u *SysUserUpsertOne) Update(set func(*SysUserUpsert)) *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *SysUserUpsertOne) SetUUID(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUUID() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUUID()
	})
}

// SetUsername sets the "username" field.
func (u *SysUserUpsertOne) SetUsername(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUsername() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *SysUserUpsertOne) SetPassword(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdatePassword() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePassword()
	})
}

// SetNickname sets the "nickname" field.
func (u *SysUserUpsertOne) SetNickname(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateNickname() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateNickname()
	})
}

// SetSideMode sets the "side_mode" field.
func (u *SysUserUpsertOne) SetSideMode(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetSideMode(v)
	})
}

// UpdateSideMode sets the "side_mode" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateSideMode() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateSideMode()
	})
}

// ClearSideMode clears the value of the "side_mode" field.
func (u *SysUserUpsertOne) ClearSideMode() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearSideMode()
	})
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsertOne) SetAvatar(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateAvatar() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SysUserUpsertOne) ClearAvatar() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearAvatar()
	})
}

// SetBaseColor sets the "base_color" field.
func (u *SysUserUpsertOne) SetBaseColor(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetBaseColor(v)
	})
}

// UpdateBaseColor sets the "base_color" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateBaseColor() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateBaseColor()
	})
}

// ClearBaseColor clears the value of the "base_color" field.
func (u *SysUserUpsertOne) ClearBaseColor() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearBaseColor()
	})
}

// SetActiveColor sets the "active_color" field.
func (u *SysUserUpsertOne) SetActiveColor(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetActiveColor(v)
	})
}

// UpdateActiveColor sets the "active_color" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateActiveColor() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateActiveColor()
	})
}

// ClearActiveColor clears the value of the "active_color" field.
func (u *SysUserUpsertOne) ClearActiveColor() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearActiveColor()
	})
}

// SetRoleID sets the "role_id" field.
func (u *SysUserUpsertOne) SetRoleID(v uint32) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetRoleID(v)
	})
}

// AddRoleID adds v to the "role_id" field.
func (u *SysUserUpsertOne) AddRoleID(v uint32) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.AddRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateRoleID() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateRoleID()
	})
}

// ClearRoleID clears the value of the "role_id" field.
func (u *SysUserUpsertOne) ClearRoleID() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearRoleID()
	})
}

// SetMobile sets the "mobile" field.
func (u *SysUserUpsertOne) SetMobile(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateMobile() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *SysUserUpsertOne) ClearMobile() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearMobile()
	})
}

// SetEmail sets the "email" field.
func (u *SysUserUpsertOne) SetEmail(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateEmail() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *SysUserUpsertOne) ClearEmail() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearEmail()
	})
}

// SetStatus sets the "status" field.
func (u *SysUserUpsertOne) SetStatus(v types.Status) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SysUserUpsertOne) AddStatus(v types.Status) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateStatus() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SysUserUpsertOne) ClearStatus() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysUserUpsertOne) SetCreatedAt(v time.Time) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateCreatedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsertOne) SetUpdatedAt(v time.Time) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUpdatedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsertOne) SetDeletedAt(v time.Time) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateDeletedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsertOne) ClearDeletedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysUserUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysUserUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysUserCreateBulk is the builder for creating many SysUser entities in bulk.
type SysUserCreateBulk struct {
	config
	builders []*SysUserCreate
	conflict []sql.ConflictOption
}

// Save creates the SysUser entities in the database.
func (sucb *SysUserCreateBulk) Save(ctx context.Context) ([]*SysUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SysUser, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SysUserCreateBulk) SaveX(ctx context.Context) []*SysUser {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SysUserCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SysUserCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysUserUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (sucb *SysUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysUserUpsertBulk {
	sucb.conflict = opts
	return &SysUserUpsertBulk{
		create: sucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sucb *SysUserCreateBulk) OnConflictColumns(columns ...string) *SysUserUpsertBulk {
	sucb.conflict = append(sucb.conflict, sql.ConflictColumns(columns...))
	return &SysUserUpsertBulk{
		create: sucb,
	}
}

// SysUserUpsertBulk is the builder for "upsert"-ing
// a bulk of SysUser nodes.
type SysUserUpsertBulk struct {
	create *SysUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysUserUpsertBulk) UpdateNewValues() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysuser.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysUserUpsertBulk) Ignore() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysUserUpsertBulk) DoNothing() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysUserCreateBulk.OnConflict
// documentation for more info.
func (u *SysUserUpsertBulk) Update(set func(*SysUserUpsert)) *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *SysUserUpsertBulk) SetUUID(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUUID() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUUID()
	})
}

// SetUsername sets the "username" field.
func (u *SysUserUpsertBulk) SetUsername(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUsername() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUsername()
	})
}

// SetPassword sets the "password" field.
func (u *SysUserUpsertBulk) SetPassword(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdatePassword() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePassword()
	})
}

// SetNickname sets the "nickname" field.
func (u *SysUserUpsertBulk) SetNickname(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateNickname() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateNickname()
	})
}

// SetSideMode sets the "side_mode" field.
func (u *SysUserUpsertBulk) SetSideMode(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetSideMode(v)
	})
}

// UpdateSideMode sets the "side_mode" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateSideMode() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateSideMode()
	})
}

// ClearSideMode clears the value of the "side_mode" field.
func (u *SysUserUpsertBulk) ClearSideMode() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearSideMode()
	})
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsertBulk) SetAvatar(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateAvatar() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SysUserUpsertBulk) ClearAvatar() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearAvatar()
	})
}

// SetBaseColor sets the "base_color" field.
func (u *SysUserUpsertBulk) SetBaseColor(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetBaseColor(v)
	})
}

// UpdateBaseColor sets the "base_color" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateBaseColor() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateBaseColor()
	})
}

// ClearBaseColor clears the value of the "base_color" field.
func (u *SysUserUpsertBulk) ClearBaseColor() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearBaseColor()
	})
}

// SetActiveColor sets the "active_color" field.
func (u *SysUserUpsertBulk) SetActiveColor(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetActiveColor(v)
	})
}

// UpdateActiveColor sets the "active_color" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateActiveColor() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateActiveColor()
	})
}

// ClearActiveColor clears the value of the "active_color" field.
func (u *SysUserUpsertBulk) ClearActiveColor() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearActiveColor()
	})
}

// SetRoleID sets the "role_id" field.
func (u *SysUserUpsertBulk) SetRoleID(v uint32) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetRoleID(v)
	})
}

// AddRoleID adds v to the "role_id" field.
func (u *SysUserUpsertBulk) AddRoleID(v uint32) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.AddRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateRoleID() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateRoleID()
	})
}

// ClearRoleID clears the value of the "role_id" field.
func (u *SysUserUpsertBulk) ClearRoleID() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearRoleID()
	})
}

// SetMobile sets the "mobile" field.
func (u *SysUserUpsertBulk) SetMobile(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateMobile() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *SysUserUpsertBulk) ClearMobile() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearMobile()
	})
}

// SetEmail sets the "email" field.
func (u *SysUserUpsertBulk) SetEmail(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateEmail() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *SysUserUpsertBulk) ClearEmail() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearEmail()
	})
}

// SetStatus sets the "status" field.
func (u *SysUserUpsertBulk) SetStatus(v types.Status) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SysUserUpsertBulk) AddStatus(v types.Status) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateStatus() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SysUserUpsertBulk) ClearStatus() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysUserUpsertBulk) SetCreatedAt(v time.Time) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateCreatedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsertBulk) SetUpdatedAt(v time.Time) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUpdatedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsertBulk) SetDeletedAt(v time.Time) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateDeletedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsertBulk) ClearDeletedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
