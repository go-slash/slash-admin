// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"slash-admin/app/admin/ent/sysapi"
	"slash-admin/app/admin/ent/sysdictionary"
	"slash-admin/app/admin/ent/sysdictionarydetail"
	"slash-admin/app/admin/ent/sysoauthprovider"
	"slash-admin/app/admin/ent/sysrole"
	"slash-admin/app/admin/ent/systoken"
	"slash-admin/app/admin/ent/sysuser"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    uint64 `msgpack:"i"`
	Value Value  `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// SysApiEdge is the edge representation of SysApi.
type SysApiEdge struct {
	Node   *SysApi `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// SysApiConnection is the connection containing edges to SysApi.
type SysApiConnection struct {
	Edges      []*SysApiEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *SysApiConnection) build(nodes []*SysApi, pager *sysapiPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SysApi
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SysApi {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SysApi {
			return nodes[i]
		}
	}
	c.Edges = make([]*SysApiEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SysApiEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SysApiPaginateOption enables pagination customization.
type SysApiPaginateOption func(*sysapiPager) error

// WithSysApiOrder configures pagination ordering.
func WithSysApiOrder(order *SysApiOrder) SysApiPaginateOption {
	if order == nil {
		order = DefaultSysApiOrder
	}
	o := *order
	return func(pager *sysapiPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSysApiOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSysApiFilter configures pagination filter.
func WithSysApiFilter(filter func(*SysApiQuery) (*SysApiQuery, error)) SysApiPaginateOption {
	return func(pager *sysapiPager) error {
		if filter == nil {
			return errors.New("SysApiQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sysapiPager struct {
	order  *SysApiOrder
	filter func(*SysApiQuery) (*SysApiQuery, error)
}

func newSysApiPager(opts []SysApiPaginateOption) (*sysapiPager, error) {
	pager := &sysapiPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSysApiOrder
	}
	return pager, nil
}

func (p *sysapiPager) applyFilter(query *SysApiQuery) (*SysApiQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sysapiPager) toCursor(sa *SysApi) Cursor {
	return p.order.Field.toCursor(sa)
}

func (p *sysapiPager) applyCursors(query *SysApiQuery, after, before *Cursor) *SysApiQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSysApiOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *sysapiPager) applyOrder(query *SysApiQuery, reverse bool) *SysApiQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSysApiOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSysApiOrder.Field.field))
	}
	return query
}

func (p *sysapiPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSysApiOrder.Field {
			b.Comma().Ident(DefaultSysApiOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SysApi.
func (sa *SysApiQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SysApiPaginateOption,
) (*SysApiConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSysApiPager(opts)
	if err != nil {
		return nil, err
	}
	if sa, err = pager.applyFilter(sa); err != nil {
		return nil, err
	}
	conn := &SysApiConnection{Edges: []*SysApiEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sa.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	sa = pager.applyCursors(sa, after, before)
	sa = pager.applyOrder(sa, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		sa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sa.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := sa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SysApiOrderField defines the ordering field of SysApi.
type SysApiOrderField struct {
	field    string
	toCursor func(*SysApi) Cursor
}

// SysApiOrder defines the ordering of SysApi.
type SysApiOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *SysApiOrderField `json:"field"`
}

// DefaultSysApiOrder is the default ordering of SysApi.
var DefaultSysApiOrder = &SysApiOrder{
	Direction: OrderDirectionAsc,
	Field: &SysApiOrderField{
		field: sysapi.FieldID,
		toCursor: func(sa *SysApi) Cursor {
			return Cursor{ID: sa.ID}
		},
	},
}

// ToEdge converts SysApi into SysApiEdge.
func (sa *SysApi) ToEdge(order *SysApiOrder) *SysApiEdge {
	if order == nil {
		order = DefaultSysApiOrder
	}
	return &SysApiEdge{
		Node:   sa,
		Cursor: order.Field.toCursor(sa),
	}
}

// SysDictionaryEdge is the edge representation of SysDictionary.
type SysDictionaryEdge struct {
	Node   *SysDictionary `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// SysDictionaryConnection is the connection containing edges to SysDictionary.
type SysDictionaryConnection struct {
	Edges      []*SysDictionaryEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *SysDictionaryConnection) build(nodes []*SysDictionary, pager *sysdictionaryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SysDictionary
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SysDictionary {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SysDictionary {
			return nodes[i]
		}
	}
	c.Edges = make([]*SysDictionaryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SysDictionaryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SysDictionaryPaginateOption enables pagination customization.
type SysDictionaryPaginateOption func(*sysdictionaryPager) error

// WithSysDictionaryOrder configures pagination ordering.
func WithSysDictionaryOrder(order *SysDictionaryOrder) SysDictionaryPaginateOption {
	if order == nil {
		order = DefaultSysDictionaryOrder
	}
	o := *order
	return func(pager *sysdictionaryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSysDictionaryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSysDictionaryFilter configures pagination filter.
func WithSysDictionaryFilter(filter func(*SysDictionaryQuery) (*SysDictionaryQuery, error)) SysDictionaryPaginateOption {
	return func(pager *sysdictionaryPager) error {
		if filter == nil {
			return errors.New("SysDictionaryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sysdictionaryPager struct {
	order  *SysDictionaryOrder
	filter func(*SysDictionaryQuery) (*SysDictionaryQuery, error)
}

func newSysDictionaryPager(opts []SysDictionaryPaginateOption) (*sysdictionaryPager, error) {
	pager := &sysdictionaryPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSysDictionaryOrder
	}
	return pager, nil
}

func (p *sysdictionaryPager) applyFilter(query *SysDictionaryQuery) (*SysDictionaryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sysdictionaryPager) toCursor(sd *SysDictionary) Cursor {
	return p.order.Field.toCursor(sd)
}

func (p *sysdictionaryPager) applyCursors(query *SysDictionaryQuery, after, before *Cursor) *SysDictionaryQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSysDictionaryOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *sysdictionaryPager) applyOrder(query *SysDictionaryQuery, reverse bool) *SysDictionaryQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSysDictionaryOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSysDictionaryOrder.Field.field))
	}
	return query
}

func (p *sysdictionaryPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSysDictionaryOrder.Field {
			b.Comma().Ident(DefaultSysDictionaryOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SysDictionary.
func (sd *SysDictionaryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SysDictionaryPaginateOption,
) (*SysDictionaryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSysDictionaryPager(opts)
	if err != nil {
		return nil, err
	}
	if sd, err = pager.applyFilter(sd); err != nil {
		return nil, err
	}
	conn := &SysDictionaryConnection{Edges: []*SysDictionaryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sd.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	sd = pager.applyCursors(sd, after, before)
	sd = pager.applyOrder(sd, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		sd.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sd.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := sd.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SysDictionaryOrderField defines the ordering field of SysDictionary.
type SysDictionaryOrderField struct {
	field    string
	toCursor func(*SysDictionary) Cursor
}

// SysDictionaryOrder defines the ordering of SysDictionary.
type SysDictionaryOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *SysDictionaryOrderField `json:"field"`
}

// DefaultSysDictionaryOrder is the default ordering of SysDictionary.
var DefaultSysDictionaryOrder = &SysDictionaryOrder{
	Direction: OrderDirectionAsc,
	Field: &SysDictionaryOrderField{
		field: sysdictionary.FieldID,
		toCursor: func(sd *SysDictionary) Cursor {
			return Cursor{ID: sd.ID}
		},
	},
}

// ToEdge converts SysDictionary into SysDictionaryEdge.
func (sd *SysDictionary) ToEdge(order *SysDictionaryOrder) *SysDictionaryEdge {
	if order == nil {
		order = DefaultSysDictionaryOrder
	}
	return &SysDictionaryEdge{
		Node:   sd,
		Cursor: order.Field.toCursor(sd),
	}
}

// SysDictionaryDetailEdge is the edge representation of SysDictionaryDetail.
type SysDictionaryDetailEdge struct {
	Node   *SysDictionaryDetail `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// SysDictionaryDetailConnection is the connection containing edges to SysDictionaryDetail.
type SysDictionaryDetailConnection struct {
	Edges      []*SysDictionaryDetailEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *SysDictionaryDetailConnection) build(nodes []*SysDictionaryDetail, pager *sysdictionarydetailPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SysDictionaryDetail
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SysDictionaryDetail {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SysDictionaryDetail {
			return nodes[i]
		}
	}
	c.Edges = make([]*SysDictionaryDetailEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SysDictionaryDetailEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SysDictionaryDetailPaginateOption enables pagination customization.
type SysDictionaryDetailPaginateOption func(*sysdictionarydetailPager) error

// WithSysDictionaryDetailOrder configures pagination ordering.
func WithSysDictionaryDetailOrder(order *SysDictionaryDetailOrder) SysDictionaryDetailPaginateOption {
	if order == nil {
		order = DefaultSysDictionaryDetailOrder
	}
	o := *order
	return func(pager *sysdictionarydetailPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSysDictionaryDetailOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSysDictionaryDetailFilter configures pagination filter.
func WithSysDictionaryDetailFilter(filter func(*SysDictionaryDetailQuery) (*SysDictionaryDetailQuery, error)) SysDictionaryDetailPaginateOption {
	return func(pager *sysdictionarydetailPager) error {
		if filter == nil {
			return errors.New("SysDictionaryDetailQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sysdictionarydetailPager struct {
	order  *SysDictionaryDetailOrder
	filter func(*SysDictionaryDetailQuery) (*SysDictionaryDetailQuery, error)
}

func newSysDictionaryDetailPager(opts []SysDictionaryDetailPaginateOption) (*sysdictionarydetailPager, error) {
	pager := &sysdictionarydetailPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSysDictionaryDetailOrder
	}
	return pager, nil
}

func (p *sysdictionarydetailPager) applyFilter(query *SysDictionaryDetailQuery) (*SysDictionaryDetailQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sysdictionarydetailPager) toCursor(sdd *SysDictionaryDetail) Cursor {
	return p.order.Field.toCursor(sdd)
}

func (p *sysdictionarydetailPager) applyCursors(query *SysDictionaryDetailQuery, after, before *Cursor) *SysDictionaryDetailQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSysDictionaryDetailOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *sysdictionarydetailPager) applyOrder(query *SysDictionaryDetailQuery, reverse bool) *SysDictionaryDetailQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSysDictionaryDetailOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSysDictionaryDetailOrder.Field.field))
	}
	return query
}

func (p *sysdictionarydetailPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSysDictionaryDetailOrder.Field {
			b.Comma().Ident(DefaultSysDictionaryDetailOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SysDictionaryDetail.
func (sdd *SysDictionaryDetailQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SysDictionaryDetailPaginateOption,
) (*SysDictionaryDetailConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSysDictionaryDetailPager(opts)
	if err != nil {
		return nil, err
	}
	if sdd, err = pager.applyFilter(sdd); err != nil {
		return nil, err
	}
	conn := &SysDictionaryDetailConnection{Edges: []*SysDictionaryDetailEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sdd.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	sdd = pager.applyCursors(sdd, after, before)
	sdd = pager.applyOrder(sdd, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		sdd.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sdd.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := sdd.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SysDictionaryDetailOrderField defines the ordering field of SysDictionaryDetail.
type SysDictionaryDetailOrderField struct {
	field    string
	toCursor func(*SysDictionaryDetail) Cursor
}

// SysDictionaryDetailOrder defines the ordering of SysDictionaryDetail.
type SysDictionaryDetailOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *SysDictionaryDetailOrderField `json:"field"`
}

// DefaultSysDictionaryDetailOrder is the default ordering of SysDictionaryDetail.
var DefaultSysDictionaryDetailOrder = &SysDictionaryDetailOrder{
	Direction: OrderDirectionAsc,
	Field: &SysDictionaryDetailOrderField{
		field: sysdictionarydetail.FieldID,
		toCursor: func(sdd *SysDictionaryDetail) Cursor {
			return Cursor{ID: sdd.ID}
		},
	},
}

// ToEdge converts SysDictionaryDetail into SysDictionaryDetailEdge.
func (sdd *SysDictionaryDetail) ToEdge(order *SysDictionaryDetailOrder) *SysDictionaryDetailEdge {
	if order == nil {
		order = DefaultSysDictionaryDetailOrder
	}
	return &SysDictionaryDetailEdge{
		Node:   sdd,
		Cursor: order.Field.toCursor(sdd),
	}
}

// SysOauthProviderEdge is the edge representation of SysOauthProvider.
type SysOauthProviderEdge struct {
	Node   *SysOauthProvider `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// SysOauthProviderConnection is the connection containing edges to SysOauthProvider.
type SysOauthProviderConnection struct {
	Edges      []*SysOauthProviderEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *SysOauthProviderConnection) build(nodes []*SysOauthProvider, pager *sysoauthproviderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SysOauthProvider
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SysOauthProvider {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SysOauthProvider {
			return nodes[i]
		}
	}
	c.Edges = make([]*SysOauthProviderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SysOauthProviderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SysOauthProviderPaginateOption enables pagination customization.
type SysOauthProviderPaginateOption func(*sysoauthproviderPager) error

// WithSysOauthProviderOrder configures pagination ordering.
func WithSysOauthProviderOrder(order *SysOauthProviderOrder) SysOauthProviderPaginateOption {
	if order == nil {
		order = DefaultSysOauthProviderOrder
	}
	o := *order
	return func(pager *sysoauthproviderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSysOauthProviderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSysOauthProviderFilter configures pagination filter.
func WithSysOauthProviderFilter(filter func(*SysOauthProviderQuery) (*SysOauthProviderQuery, error)) SysOauthProviderPaginateOption {
	return func(pager *sysoauthproviderPager) error {
		if filter == nil {
			return errors.New("SysOauthProviderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sysoauthproviderPager struct {
	order  *SysOauthProviderOrder
	filter func(*SysOauthProviderQuery) (*SysOauthProviderQuery, error)
}

func newSysOauthProviderPager(opts []SysOauthProviderPaginateOption) (*sysoauthproviderPager, error) {
	pager := &sysoauthproviderPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSysOauthProviderOrder
	}
	return pager, nil
}

func (p *sysoauthproviderPager) applyFilter(query *SysOauthProviderQuery) (*SysOauthProviderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sysoauthproviderPager) toCursor(sop *SysOauthProvider) Cursor {
	return p.order.Field.toCursor(sop)
}

func (p *sysoauthproviderPager) applyCursors(query *SysOauthProviderQuery, after, before *Cursor) *SysOauthProviderQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSysOauthProviderOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *sysoauthproviderPager) applyOrder(query *SysOauthProviderQuery, reverse bool) *SysOauthProviderQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSysOauthProviderOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSysOauthProviderOrder.Field.field))
	}
	return query
}

func (p *sysoauthproviderPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSysOauthProviderOrder.Field {
			b.Comma().Ident(DefaultSysOauthProviderOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SysOauthProvider.
func (sop *SysOauthProviderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SysOauthProviderPaginateOption,
) (*SysOauthProviderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSysOauthProviderPager(opts)
	if err != nil {
		return nil, err
	}
	if sop, err = pager.applyFilter(sop); err != nil {
		return nil, err
	}
	conn := &SysOauthProviderConnection{Edges: []*SysOauthProviderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sop.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	sop = pager.applyCursors(sop, after, before)
	sop = pager.applyOrder(sop, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		sop.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sop.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := sop.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SysOauthProviderOrderField defines the ordering field of SysOauthProvider.
type SysOauthProviderOrderField struct {
	field    string
	toCursor func(*SysOauthProvider) Cursor
}

// SysOauthProviderOrder defines the ordering of SysOauthProvider.
type SysOauthProviderOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *SysOauthProviderOrderField `json:"field"`
}

// DefaultSysOauthProviderOrder is the default ordering of SysOauthProvider.
var DefaultSysOauthProviderOrder = &SysOauthProviderOrder{
	Direction: OrderDirectionAsc,
	Field: &SysOauthProviderOrderField{
		field: sysoauthprovider.FieldID,
		toCursor: func(sop *SysOauthProvider) Cursor {
			return Cursor{ID: sop.ID}
		},
	},
}

// ToEdge converts SysOauthProvider into SysOauthProviderEdge.
func (sop *SysOauthProvider) ToEdge(order *SysOauthProviderOrder) *SysOauthProviderEdge {
	if order == nil {
		order = DefaultSysOauthProviderOrder
	}
	return &SysOauthProviderEdge{
		Node:   sop,
		Cursor: order.Field.toCursor(sop),
	}
}

// SysRoleEdge is the edge representation of SysRole.
type SysRoleEdge struct {
	Node   *SysRole `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// SysRoleConnection is the connection containing edges to SysRole.
type SysRoleConnection struct {
	Edges      []*SysRoleEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *SysRoleConnection) build(nodes []*SysRole, pager *sysrolePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SysRole
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SysRole {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SysRole {
			return nodes[i]
		}
	}
	c.Edges = make([]*SysRoleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SysRoleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SysRolePaginateOption enables pagination customization.
type SysRolePaginateOption func(*sysrolePager) error

// WithSysRoleOrder configures pagination ordering.
func WithSysRoleOrder(order *SysRoleOrder) SysRolePaginateOption {
	if order == nil {
		order = DefaultSysRoleOrder
	}
	o := *order
	return func(pager *sysrolePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSysRoleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSysRoleFilter configures pagination filter.
func WithSysRoleFilter(filter func(*SysRoleQuery) (*SysRoleQuery, error)) SysRolePaginateOption {
	return func(pager *sysrolePager) error {
		if filter == nil {
			return errors.New("SysRoleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sysrolePager struct {
	order  *SysRoleOrder
	filter func(*SysRoleQuery) (*SysRoleQuery, error)
}

func newSysRolePager(opts []SysRolePaginateOption) (*sysrolePager, error) {
	pager := &sysrolePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSysRoleOrder
	}
	return pager, nil
}

func (p *sysrolePager) applyFilter(query *SysRoleQuery) (*SysRoleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sysrolePager) toCursor(sr *SysRole) Cursor {
	return p.order.Field.toCursor(sr)
}

func (p *sysrolePager) applyCursors(query *SysRoleQuery, after, before *Cursor) *SysRoleQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSysRoleOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *sysrolePager) applyOrder(query *SysRoleQuery, reverse bool) *SysRoleQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSysRoleOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSysRoleOrder.Field.field))
	}
	return query
}

func (p *sysrolePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSysRoleOrder.Field {
			b.Comma().Ident(DefaultSysRoleOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SysRole.
func (sr *SysRoleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SysRolePaginateOption,
) (*SysRoleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSysRolePager(opts)
	if err != nil {
		return nil, err
	}
	if sr, err = pager.applyFilter(sr); err != nil {
		return nil, err
	}
	conn := &SysRoleConnection{Edges: []*SysRoleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sr.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	sr = pager.applyCursors(sr, after, before)
	sr = pager.applyOrder(sr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		sr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := sr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SysRoleOrderField defines the ordering field of SysRole.
type SysRoleOrderField struct {
	field    string
	toCursor func(*SysRole) Cursor
}

// SysRoleOrder defines the ordering of SysRole.
type SysRoleOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *SysRoleOrderField `json:"field"`
}

// DefaultSysRoleOrder is the default ordering of SysRole.
var DefaultSysRoleOrder = &SysRoleOrder{
	Direction: OrderDirectionAsc,
	Field: &SysRoleOrderField{
		field: sysrole.FieldID,
		toCursor: func(sr *SysRole) Cursor {
			return Cursor{ID: sr.ID}
		},
	},
}

// ToEdge converts SysRole into SysRoleEdge.
func (sr *SysRole) ToEdge(order *SysRoleOrder) *SysRoleEdge {
	if order == nil {
		order = DefaultSysRoleOrder
	}
	return &SysRoleEdge{
		Node:   sr,
		Cursor: order.Field.toCursor(sr),
	}
}

// SysTokenEdge is the edge representation of SysToken.
type SysTokenEdge struct {
	Node   *SysToken `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// SysTokenConnection is the connection containing edges to SysToken.
type SysTokenConnection struct {
	Edges      []*SysTokenEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *SysTokenConnection) build(nodes []*SysToken, pager *systokenPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SysToken
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SysToken {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SysToken {
			return nodes[i]
		}
	}
	c.Edges = make([]*SysTokenEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SysTokenEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SysTokenPaginateOption enables pagination customization.
type SysTokenPaginateOption func(*systokenPager) error

// WithSysTokenOrder configures pagination ordering.
func WithSysTokenOrder(order *SysTokenOrder) SysTokenPaginateOption {
	if order == nil {
		order = DefaultSysTokenOrder
	}
	o := *order
	return func(pager *systokenPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSysTokenOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSysTokenFilter configures pagination filter.
func WithSysTokenFilter(filter func(*SysTokenQuery) (*SysTokenQuery, error)) SysTokenPaginateOption {
	return func(pager *systokenPager) error {
		if filter == nil {
			return errors.New("SysTokenQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type systokenPager struct {
	order  *SysTokenOrder
	filter func(*SysTokenQuery) (*SysTokenQuery, error)
}

func newSysTokenPager(opts []SysTokenPaginateOption) (*systokenPager, error) {
	pager := &systokenPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSysTokenOrder
	}
	return pager, nil
}

func (p *systokenPager) applyFilter(query *SysTokenQuery) (*SysTokenQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *systokenPager) toCursor(st *SysToken) Cursor {
	return p.order.Field.toCursor(st)
}

func (p *systokenPager) applyCursors(query *SysTokenQuery, after, before *Cursor) *SysTokenQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSysTokenOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *systokenPager) applyOrder(query *SysTokenQuery, reverse bool) *SysTokenQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSysTokenOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSysTokenOrder.Field.field))
	}
	return query
}

func (p *systokenPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSysTokenOrder.Field {
			b.Comma().Ident(DefaultSysTokenOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SysToken.
func (st *SysTokenQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SysTokenPaginateOption,
) (*SysTokenConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSysTokenPager(opts)
	if err != nil {
		return nil, err
	}
	if st, err = pager.applyFilter(st); err != nil {
		return nil, err
	}
	conn := &SysTokenConnection{Edges: []*SysTokenEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = st.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	st = pager.applyCursors(st, after, before)
	st = pager.applyOrder(st, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		st.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := st.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := st.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SysTokenOrderField defines the ordering field of SysToken.
type SysTokenOrderField struct {
	field    string
	toCursor func(*SysToken) Cursor
}

// SysTokenOrder defines the ordering of SysToken.
type SysTokenOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *SysTokenOrderField `json:"field"`
}

// DefaultSysTokenOrder is the default ordering of SysToken.
var DefaultSysTokenOrder = &SysTokenOrder{
	Direction: OrderDirectionAsc,
	Field: &SysTokenOrderField{
		field: systoken.FieldID,
		toCursor: func(st *SysToken) Cursor {
			return Cursor{ID: st.ID}
		},
	},
}

// ToEdge converts SysToken into SysTokenEdge.
func (st *SysToken) ToEdge(order *SysTokenOrder) *SysTokenEdge {
	if order == nil {
		order = DefaultSysTokenOrder
	}
	return &SysTokenEdge{
		Node:   st,
		Cursor: order.Field.toCursor(st),
	}
}

// SysUserEdge is the edge representation of SysUser.
type SysUserEdge struct {
	Node   *SysUser `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// SysUserConnection is the connection containing edges to SysUser.
type SysUserConnection struct {
	Edges      []*SysUserEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *SysUserConnection) build(nodes []*SysUser, pager *sysuserPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SysUser
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SysUser {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SysUser {
			return nodes[i]
		}
	}
	c.Edges = make([]*SysUserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SysUserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SysUserPaginateOption enables pagination customization.
type SysUserPaginateOption func(*sysuserPager) error

// WithSysUserOrder configures pagination ordering.
func WithSysUserOrder(order *SysUserOrder) SysUserPaginateOption {
	if order == nil {
		order = DefaultSysUserOrder
	}
	o := *order
	return func(pager *sysuserPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSysUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSysUserFilter configures pagination filter.
func WithSysUserFilter(filter func(*SysUserQuery) (*SysUserQuery, error)) SysUserPaginateOption {
	return func(pager *sysuserPager) error {
		if filter == nil {
			return errors.New("SysUserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sysuserPager struct {
	order  *SysUserOrder
	filter func(*SysUserQuery) (*SysUserQuery, error)
}

func newSysUserPager(opts []SysUserPaginateOption) (*sysuserPager, error) {
	pager := &sysuserPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSysUserOrder
	}
	return pager, nil
}

func (p *sysuserPager) applyFilter(query *SysUserQuery) (*SysUserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sysuserPager) toCursor(su *SysUser) Cursor {
	return p.order.Field.toCursor(su)
}

func (p *sysuserPager) applyCursors(query *SysUserQuery, after, before *Cursor) *SysUserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultSysUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *sysuserPager) applyOrder(query *SysUserQuery, reverse bool) *SysUserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultSysUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultSysUserOrder.Field.field))
	}
	return query
}

func (p *sysuserPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSysUserOrder.Field {
			b.Comma().Ident(DefaultSysUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SysUser.
func (su *SysUserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SysUserPaginateOption,
) (*SysUserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSysUserPager(opts)
	if err != nil {
		return nil, err
	}
	if su, err = pager.applyFilter(su); err != nil {
		return nil, err
	}
	conn := &SysUserConnection{Edges: []*SysUserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = su.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	su = pager.applyCursors(su, after, before)
	su = pager.applyOrder(su, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		su.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := su.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := su.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SysUserOrderField defines the ordering field of SysUser.
type SysUserOrderField struct {
	field    string
	toCursor func(*SysUser) Cursor
}

// SysUserOrder defines the ordering of SysUser.
type SysUserOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *SysUserOrderField `json:"field"`
}

// DefaultSysUserOrder is the default ordering of SysUser.
var DefaultSysUserOrder = &SysUserOrder{
	Direction: OrderDirectionAsc,
	Field: &SysUserOrderField{
		field: sysuser.FieldID,
		toCursor: func(su *SysUser) Cursor {
			return Cursor{ID: su.ID}
		},
	},
}

// ToEdge converts SysUser into SysUserEdge.
func (su *SysUser) ToEdge(order *SysUserOrder) *SysUserEdge {
	if order == nil {
		order = DefaultSysUserOrder
	}
	return &SysUserEdge{
		Node:   su,
		Cursor: order.Field.toCursor(su),
	}
}
