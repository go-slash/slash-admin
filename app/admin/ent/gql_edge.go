// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (sm *SysMenu) Roles(ctx context.Context) (result []*SysRole, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sm.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sm.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sm.QueryRoles().All(ctx)
	}
	return result, err
}

func (sm *SysMenu) Parent(ctx context.Context) (*SysMenu, error) {
	result, err := sm.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = sm.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sm *SysMenu) Children(ctx context.Context) (result []*SysMenu, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sm.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sm.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sm.QueryChildren().All(ctx)
	}
	return result, err
}

func (sr *SysRole) Menus(ctx context.Context) (result []*SysMenu, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sr.NamedMenus(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sr.Edges.MenusOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sr.QueryMenus().All(ctx)
	}
	return result, err
}
