// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slash-admin/app/admin/ent/sysoauthprovider"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysOauthProvider is the model entity for the SysOauthProvider schema.
type SysOauthProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// the provider's name
	Name string `json:"name,omitempty"`
	// the client id
	ClientID string `json:"client_id,omitempty"`
	// the client secret
	ClientSecret string `json:"client_secret,omitempty"`
	// the redirect url
	RedirectURL string `json:"redirect_url,omitempty"`
	// the scopes
	Scopes string `json:"scopes,omitempty"`
	// the auth url of the provider
	AuthURL string `json:"auth_url,omitempty"`
	// the token url of the provider
	TokenURL string `json:"token_url,omitempty"`
	// the auth style, 0: auto detect 1: third party log in 2: log in with username and password
	AuthStyle uint8 `json:"auth_style,omitempty"`
	// the URL to request user information by token
	InfoURL string `json:"info_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysOauthProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysoauthprovider.FieldID, sysoauthprovider.FieldAuthStyle:
			values[i] = new(sql.NullInt64)
		case sysoauthprovider.FieldName, sysoauthprovider.FieldClientID, sysoauthprovider.FieldClientSecret, sysoauthprovider.FieldRedirectURL, sysoauthprovider.FieldScopes, sysoauthprovider.FieldAuthURL, sysoauthprovider.FieldTokenURL, sysoauthprovider.FieldInfoURL:
			values[i] = new(sql.NullString)
		case sysoauthprovider.FieldCreatedAt, sysoauthprovider.FieldUpdatedAt, sysoauthprovider.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysOauthProvider", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysOauthProvider fields.
func (sop *SysOauthProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysoauthprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sop.ID = uint64(value.Int64)
		case sysoauthprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sop.Name = value.String
			}
		case sysoauthprovider.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				sop.ClientID = value.String
			}
		case sysoauthprovider.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				sop.ClientSecret = value.String
			}
		case sysoauthprovider.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				sop.RedirectURL = value.String
			}
		case sysoauthprovider.FieldScopes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value.Valid {
				sop.Scopes = value.String
			}
		case sysoauthprovider.FieldAuthURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_url", values[i])
			} else if value.Valid {
				sop.AuthURL = value.String
			}
		case sysoauthprovider.FieldTokenURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_url", values[i])
			} else if value.Valid {
				sop.TokenURL = value.String
			}
		case sysoauthprovider.FieldAuthStyle:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auth_style", values[i])
			} else if value.Valid {
				sop.AuthStyle = uint8(value.Int64)
			}
		case sysoauthprovider.FieldInfoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field info_url", values[i])
			} else if value.Valid {
				sop.InfoURL = value.String
			}
		case sysoauthprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sop.CreatedAt = value.Time
			}
		case sysoauthprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sop.UpdatedAt = value.Time
			}
		case sysoauthprovider.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sop.DeletedAt = new(time.Time)
				*sop.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SysOauthProvider.
// Note that you need to call SysOauthProvider.Unwrap() before calling this method if this SysOauthProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (sop *SysOauthProvider) Update() *SysOauthProviderUpdateOne {
	return (&SysOauthProviderClient{config: sop.config}).UpdateOne(sop)
}

// Unwrap unwraps the SysOauthProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sop *SysOauthProvider) Unwrap() *SysOauthProvider {
	_tx, ok := sop.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysOauthProvider is not a transactional entity")
	}
	sop.config.driver = _tx.drv
	return sop
}

// String implements the fmt.Stringer.
func (sop *SysOauthProvider) String() string {
	var builder strings.Builder
	builder.WriteString("SysOauthProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sop.ID))
	builder.WriteString("name=")
	builder.WriteString(sop.Name)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(sop.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(sop.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("redirect_url=")
	builder.WriteString(sop.RedirectURL)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(sop.Scopes)
	builder.WriteString(", ")
	builder.WriteString("auth_url=")
	builder.WriteString(sop.AuthURL)
	builder.WriteString(", ")
	builder.WriteString("token_url=")
	builder.WriteString(sop.TokenURL)
	builder.WriteString(", ")
	builder.WriteString("auth_style=")
	builder.WriteString(fmt.Sprintf("%v", sop.AuthStyle))
	builder.WriteString(", ")
	builder.WriteString("info_url=")
	builder.WriteString(sop.InfoURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sop.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sop.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sop.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysOauthProviders is a parsable slice of SysOauthProvider.
type SysOauthProviders []*SysOauthProvider

func (sop SysOauthProviders) config(cfg config) {
	for _i := range sop {
		sop[_i].config = cfg
	}
}
