// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/predicate"
	"slash-admin/app/admin/ent/sysuser"
	"slash-admin/pkg/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysUserUpdate is the builder for updating SysUser entities.
type SysUserUpdate struct {
	config
	hooks     []Hook
	mutation  *SysUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suu *SysUserUpdate) Where(ps ...predicate.SysUser) *SysUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetUUID sets the "uuid" field.
func (suu *SysUserUpdate) SetUUID(s string) *SysUserUpdate {
	suu.mutation.SetUUID(s)
	return suu
}

// SetUsername sets the "username" field.
func (suu *SysUserUpdate) SetUsername(s string) *SysUserUpdate {
	suu.mutation.SetUsername(s)
	return suu
}

// SetPassword sets the "password" field.
func (suu *SysUserUpdate) SetPassword(s string) *SysUserUpdate {
	suu.mutation.SetPassword(s)
	return suu
}

// SetNickname sets the "nickname" field.
func (suu *SysUserUpdate) SetNickname(s string) *SysUserUpdate {
	suu.mutation.SetNickname(s)
	return suu
}

// SetSideMode sets the "side_mode" field.
func (suu *SysUserUpdate) SetSideMode(s string) *SysUserUpdate {
	suu.mutation.SetSideMode(s)
	return suu
}

// SetNillableSideMode sets the "side_mode" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableSideMode(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetSideMode(*s)
	}
	return suu
}

// ClearSideMode clears the value of the "side_mode" field.
func (suu *SysUserUpdate) ClearSideMode() *SysUserUpdate {
	suu.mutation.ClearSideMode()
	return suu
}

// SetAvatar sets the "avatar" field.
func (suu *SysUserUpdate) SetAvatar(s string) *SysUserUpdate {
	suu.mutation.SetAvatar(s)
	return suu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableAvatar(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetAvatar(*s)
	}
	return suu
}

// ClearAvatar clears the value of the "avatar" field.
func (suu *SysUserUpdate) ClearAvatar() *SysUserUpdate {
	suu.mutation.ClearAvatar()
	return suu
}

// SetBaseColor sets the "base_color" field.
func (suu *SysUserUpdate) SetBaseColor(s string) *SysUserUpdate {
	suu.mutation.SetBaseColor(s)
	return suu
}

// SetNillableBaseColor sets the "base_color" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableBaseColor(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetBaseColor(*s)
	}
	return suu
}

// ClearBaseColor clears the value of the "base_color" field.
func (suu *SysUserUpdate) ClearBaseColor() *SysUserUpdate {
	suu.mutation.ClearBaseColor()
	return suu
}

// SetActiveColor sets the "active_color" field.
func (suu *SysUserUpdate) SetActiveColor(s string) *SysUserUpdate {
	suu.mutation.SetActiveColor(s)
	return suu
}

// SetNillableActiveColor sets the "active_color" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableActiveColor(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetActiveColor(*s)
	}
	return suu
}

// ClearActiveColor clears the value of the "active_color" field.
func (suu *SysUserUpdate) ClearActiveColor() *SysUserUpdate {
	suu.mutation.ClearActiveColor()
	return suu
}

// SetRoleID sets the "role_id" field.
func (suu *SysUserUpdate) SetRoleID(u uint64) *SysUserUpdate {
	suu.mutation.ResetRoleID()
	suu.mutation.SetRoleID(u)
	return suu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableRoleID(u *uint64) *SysUserUpdate {
	if u != nil {
		suu.SetRoleID(*u)
	}
	return suu
}

// AddRoleID adds u to the "role_id" field.
func (suu *SysUserUpdate) AddRoleID(u int64) *SysUserUpdate {
	suu.mutation.AddRoleID(u)
	return suu
}

// ClearRoleID clears the value of the "role_id" field.
func (suu *SysUserUpdate) ClearRoleID() *SysUserUpdate {
	suu.mutation.ClearRoleID()
	return suu
}

// SetMobile sets the "mobile" field.
func (suu *SysUserUpdate) SetMobile(s string) *SysUserUpdate {
	suu.mutation.SetMobile(s)
	return suu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableMobile(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetMobile(*s)
	}
	return suu
}

// ClearMobile clears the value of the "mobile" field.
func (suu *SysUserUpdate) ClearMobile() *SysUserUpdate {
	suu.mutation.ClearMobile()
	return suu
}

// SetEmail sets the "email" field.
func (suu *SysUserUpdate) SetEmail(s string) *SysUserUpdate {
	suu.mutation.SetEmail(s)
	return suu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableEmail(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetEmail(*s)
	}
	return suu
}

// ClearEmail clears the value of the "email" field.
func (suu *SysUserUpdate) ClearEmail() *SysUserUpdate {
	suu.mutation.ClearEmail()
	return suu
}

// SetStatus sets the "status" field.
func (suu *SysUserUpdate) SetStatus(t types.Status) *SysUserUpdate {
	suu.mutation.ResetStatus()
	suu.mutation.SetStatus(t)
	return suu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableStatus(t *types.Status) *SysUserUpdate {
	if t != nil {
		suu.SetStatus(*t)
	}
	return suu
}

// AddStatus adds t to the "status" field.
func (suu *SysUserUpdate) AddStatus(t types.Status) *SysUserUpdate {
	suu.mutation.AddStatus(t)
	return suu
}

// ClearStatus clears the value of the "status" field.
func (suu *SysUserUpdate) ClearStatus() *SysUserUpdate {
	suu.mutation.ClearStatus()
	return suu
}

// SetCreatedAt sets the "created_at" field.
func (suu *SysUserUpdate) SetCreatedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetCreatedAt(t)
	return suu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableCreatedAt(t *time.Time) *SysUserUpdate {
	if t != nil {
		suu.SetCreatedAt(*t)
	}
	return suu
}

// SetUpdatedAt sets the "updated_at" field.
func (suu *SysUserUpdate) SetUpdatedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetUpdatedAt(t)
	return suu
}

// SetDeletedAt sets the "deleted_at" field.
func (suu *SysUserUpdate) SetDeletedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetDeletedAt(t)
	return suu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDeletedAt(t *time.Time) *SysUserUpdate {
	if t != nil {
		suu.SetDeletedAt(*t)
	}
	return suu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suu *SysUserUpdate) ClearDeletedAt() *SysUserUpdate {
	suu.mutation.ClearDeletedAt()
	return suu
}

// Mutation returns the SysUserMutation object of the builder.
func (suu *SysUserUpdate) Mutation() *SysUserMutation {
	return suu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SysUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	suu.defaults()
	if len(suu.hooks) == 0 {
		affected, err = suu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suu.mutation = mutation
			affected, err = suu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(suu.hooks) - 1; i >= 0; i-- {
			if suu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SysUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SysUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SysUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suu *SysUserUpdate) defaults() {
	if _, ok := suu.mutation.UpdatedAt(); !ok {
		v := sysuser.UpdateDefaultUpdatedAt()
		suu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suu *SysUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysUserUpdate {
	suu.modifiers = append(suu.modifiers, modifiers...)
	return suu
}

func (suu *SysUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysuser.Table,
			Columns: sysuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysuser.FieldID,
			},
		},
	}
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldUUID,
		})
	}
	if value, ok := suu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldUsername,
		})
	}
	if value, ok := suu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldPassword,
		})
	}
	if value, ok := suu.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldNickname,
		})
	}
	if value, ok := suu.mutation.SideMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldSideMode,
		})
	}
	if suu.mutation.SideModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldSideMode,
		})
	}
	if value, ok := suu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldAvatar,
		})
	}
	if suu.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldAvatar,
		})
	}
	if value, ok := suu.mutation.BaseColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldBaseColor,
		})
	}
	if suu.mutation.BaseColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldBaseColor,
		})
	}
	if value, ok := suu.mutation.ActiveColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldActiveColor,
		})
	}
	if suu.mutation.ActiveColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldActiveColor,
		})
	}
	if value, ok := suu.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sysuser.FieldRoleID,
		})
	}
	if value, ok := suu.mutation.AddedRoleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sysuser.FieldRoleID,
		})
	}
	if suu.mutation.RoleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: sysuser.FieldRoleID,
		})
	}
	if value, ok := suu.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldMobile,
		})
	}
	if suu.mutation.MobileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldMobile,
		})
	}
	if value, ok := suu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldEmail,
		})
	}
	if suu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldEmail,
		})
	}
	if value, ok := suu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysuser.FieldStatus,
		})
	}
	if value, ok := suu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysuser.FieldStatus,
		})
	}
	if suu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: sysuser.FieldStatus,
		})
	}
	if value, ok := suu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldCreatedAt,
		})
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldUpdatedAt,
		})
	}
	if value, ok := suu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldDeletedAt,
		})
	}
	if suu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysuser.FieldDeletedAt,
		})
	}
	_spec.AddModifiers(suu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SysUserUpdateOne is the builder for updating a single SysUser entity.
type SysUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUUID sets the "uuid" field.
func (suuo *SysUserUpdateOne) SetUUID(s string) *SysUserUpdateOne {
	suuo.mutation.SetUUID(s)
	return suuo
}

// SetUsername sets the "username" field.
func (suuo *SysUserUpdateOne) SetUsername(s string) *SysUserUpdateOne {
	suuo.mutation.SetUsername(s)
	return suuo
}

// SetPassword sets the "password" field.
func (suuo *SysUserUpdateOne) SetPassword(s string) *SysUserUpdateOne {
	suuo.mutation.SetPassword(s)
	return suuo
}

// SetNickname sets the "nickname" field.
func (suuo *SysUserUpdateOne) SetNickname(s string) *SysUserUpdateOne {
	suuo.mutation.SetNickname(s)
	return suuo
}

// SetSideMode sets the "side_mode" field.
func (suuo *SysUserUpdateOne) SetSideMode(s string) *SysUserUpdateOne {
	suuo.mutation.SetSideMode(s)
	return suuo
}

// SetNillableSideMode sets the "side_mode" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableSideMode(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetSideMode(*s)
	}
	return suuo
}

// ClearSideMode clears the value of the "side_mode" field.
func (suuo *SysUserUpdateOne) ClearSideMode() *SysUserUpdateOne {
	suuo.mutation.ClearSideMode()
	return suuo
}

// SetAvatar sets the "avatar" field.
func (suuo *SysUserUpdateOne) SetAvatar(s string) *SysUserUpdateOne {
	suuo.mutation.SetAvatar(s)
	return suuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableAvatar(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetAvatar(*s)
	}
	return suuo
}

// ClearAvatar clears the value of the "avatar" field.
func (suuo *SysUserUpdateOne) ClearAvatar() *SysUserUpdateOne {
	suuo.mutation.ClearAvatar()
	return suuo
}

// SetBaseColor sets the "base_color" field.
func (suuo *SysUserUpdateOne) SetBaseColor(s string) *SysUserUpdateOne {
	suuo.mutation.SetBaseColor(s)
	return suuo
}

// SetNillableBaseColor sets the "base_color" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableBaseColor(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetBaseColor(*s)
	}
	return suuo
}

// ClearBaseColor clears the value of the "base_color" field.
func (suuo *SysUserUpdateOne) ClearBaseColor() *SysUserUpdateOne {
	suuo.mutation.ClearBaseColor()
	return suuo
}

// SetActiveColor sets the "active_color" field.
func (suuo *SysUserUpdateOne) SetActiveColor(s string) *SysUserUpdateOne {
	suuo.mutation.SetActiveColor(s)
	return suuo
}

// SetNillableActiveColor sets the "active_color" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableActiveColor(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetActiveColor(*s)
	}
	return suuo
}

// ClearActiveColor clears the value of the "active_color" field.
func (suuo *SysUserUpdateOne) ClearActiveColor() *SysUserUpdateOne {
	suuo.mutation.ClearActiveColor()
	return suuo
}

// SetRoleID sets the "role_id" field.
func (suuo *SysUserUpdateOne) SetRoleID(u uint64) *SysUserUpdateOne {
	suuo.mutation.ResetRoleID()
	suuo.mutation.SetRoleID(u)
	return suuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableRoleID(u *uint64) *SysUserUpdateOne {
	if u != nil {
		suuo.SetRoleID(*u)
	}
	return suuo
}

// AddRoleID adds u to the "role_id" field.
func (suuo *SysUserUpdateOne) AddRoleID(u int64) *SysUserUpdateOne {
	suuo.mutation.AddRoleID(u)
	return suuo
}

// ClearRoleID clears the value of the "role_id" field.
func (suuo *SysUserUpdateOne) ClearRoleID() *SysUserUpdateOne {
	suuo.mutation.ClearRoleID()
	return suuo
}

// SetMobile sets the "mobile" field.
func (suuo *SysUserUpdateOne) SetMobile(s string) *SysUserUpdateOne {
	suuo.mutation.SetMobile(s)
	return suuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableMobile(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetMobile(*s)
	}
	return suuo
}

// ClearMobile clears the value of the "mobile" field.
func (suuo *SysUserUpdateOne) ClearMobile() *SysUserUpdateOne {
	suuo.mutation.ClearMobile()
	return suuo
}

// SetEmail sets the "email" field.
func (suuo *SysUserUpdateOne) SetEmail(s string) *SysUserUpdateOne {
	suuo.mutation.SetEmail(s)
	return suuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableEmail(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetEmail(*s)
	}
	return suuo
}

// ClearEmail clears the value of the "email" field.
func (suuo *SysUserUpdateOne) ClearEmail() *SysUserUpdateOne {
	suuo.mutation.ClearEmail()
	return suuo
}

// SetStatus sets the "status" field.
func (suuo *SysUserUpdateOne) SetStatus(t types.Status) *SysUserUpdateOne {
	suuo.mutation.ResetStatus()
	suuo.mutation.SetStatus(t)
	return suuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableStatus(t *types.Status) *SysUserUpdateOne {
	if t != nil {
		suuo.SetStatus(*t)
	}
	return suuo
}

// AddStatus adds t to the "status" field.
func (suuo *SysUserUpdateOne) AddStatus(t types.Status) *SysUserUpdateOne {
	suuo.mutation.AddStatus(t)
	return suuo
}

// ClearStatus clears the value of the "status" field.
func (suuo *SysUserUpdateOne) ClearStatus() *SysUserUpdateOne {
	suuo.mutation.ClearStatus()
	return suuo
}

// SetCreatedAt sets the "created_at" field.
func (suuo *SysUserUpdateOne) SetCreatedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetCreatedAt(t)
	return suuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableCreatedAt(t *time.Time) *SysUserUpdateOne {
	if t != nil {
		suuo.SetCreatedAt(*t)
	}
	return suuo
}

// SetUpdatedAt sets the "updated_at" field.
func (suuo *SysUserUpdateOne) SetUpdatedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetUpdatedAt(t)
	return suuo
}

// SetDeletedAt sets the "deleted_at" field.
func (suuo *SysUserUpdateOne) SetDeletedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetDeletedAt(t)
	return suuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDeletedAt(t *time.Time) *SysUserUpdateOne {
	if t != nil {
		suuo.SetDeletedAt(*t)
	}
	return suuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suuo *SysUserUpdateOne) ClearDeletedAt() *SysUserUpdateOne {
	suuo.mutation.ClearDeletedAt()
	return suuo
}

// Mutation returns the SysUserMutation object of the builder.
func (suuo *SysUserUpdateOne) Mutation() *SysUserMutation {
	return suuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SysUserUpdateOne) Select(field string, fields ...string) *SysUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SysUser entity.
func (suuo *SysUserUpdateOne) Save(ctx context.Context) (*SysUser, error) {
	var (
		err  error
		node *SysUser
	)
	suuo.defaults()
	if len(suuo.hooks) == 0 {
		node, err = suuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suuo.mutation = mutation
			node, err = suuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suuo.hooks) - 1; i >= 0; i-- {
			if suuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SysUserUpdateOne) SaveX(ctx context.Context) *SysUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SysUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SysUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suuo *SysUserUpdateOne) defaults() {
	if _, ok := suuo.mutation.UpdatedAt(); !ok {
		v := sysuser.UpdateDefaultUpdatedAt()
		suuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suuo *SysUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysUserUpdateOne {
	suuo.modifiers = append(suuo.modifiers, modifiers...)
	return suuo
}

func (suuo *SysUserUpdateOne) sqlSave(ctx context.Context) (_node *SysUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysuser.Table,
			Columns: sysuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysuser.FieldID,
			},
		},
	}
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuser.FieldID)
		for _, f := range fields {
			if !sysuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldUUID,
		})
	}
	if value, ok := suuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldUsername,
		})
	}
	if value, ok := suuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldPassword,
		})
	}
	if value, ok := suuo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldNickname,
		})
	}
	if value, ok := suuo.mutation.SideMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldSideMode,
		})
	}
	if suuo.mutation.SideModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldSideMode,
		})
	}
	if value, ok := suuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldAvatar,
		})
	}
	if suuo.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldAvatar,
		})
	}
	if value, ok := suuo.mutation.BaseColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldBaseColor,
		})
	}
	if suuo.mutation.BaseColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldBaseColor,
		})
	}
	if value, ok := suuo.mutation.ActiveColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldActiveColor,
		})
	}
	if suuo.mutation.ActiveColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldActiveColor,
		})
	}
	if value, ok := suuo.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sysuser.FieldRoleID,
		})
	}
	if value, ok := suuo.mutation.AddedRoleID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sysuser.FieldRoleID,
		})
	}
	if suuo.mutation.RoleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: sysuser.FieldRoleID,
		})
	}
	if value, ok := suuo.mutation.Mobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldMobile,
		})
	}
	if suuo.mutation.MobileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldMobile,
		})
	}
	if value, ok := suuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldEmail,
		})
	}
	if suuo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldEmail,
		})
	}
	if value, ok := suuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysuser.FieldStatus,
		})
	}
	if value, ok := suuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysuser.FieldStatus,
		})
	}
	if suuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: sysuser.FieldStatus,
		})
	}
	if value, ok := suuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldCreatedAt,
		})
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldUpdatedAt,
		})
	}
	if value, ok := suuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldDeletedAt,
		})
	}
	if suuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysuser.FieldDeletedAt,
		})
	}
	_spec.AddModifiers(suuo.modifiers...)
	_node = &SysUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
