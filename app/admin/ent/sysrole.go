// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slash-admin/app/admin/ent/sysrole"
	"slash-admin/pkg/types"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysRole is the model entity for the SysRole schema.
type SysRole struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 角色名
	Name string `json:"name,omitempty"`
	// 角色值，用于前端权限控制
	Value string `json:"value,omitempty"`
	// 默认登录页面
	DefaultRouter string `json:"default_router,omitempty"`
	// 0=开启 1=禁用
	Status types.Status `json:"status,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 排序编号
	OrderNo uint32 `json:"order_no,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysRoleQuery when eager-loading is set.
	Edges SysRoleEdges `json:"edges"`
}

// SysRoleEdges holds the relations/edges for other nodes in the graph.
type SysRoleEdges struct {
	// Menus holds the value of the menus edge.
	Menus []*SysMenu `json:"menus,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedMenus map[string][]*SysMenu
}

// MenusOrErr returns the Menus value or an error if the edge
// was not loaded in eager-loading.
func (e SysRoleEdges) MenusOrErr() ([]*SysMenu, error) {
	if e.loadedTypes[0] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "menus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysrole.FieldID, sysrole.FieldOrderNo:
			values[i] = new(sql.NullInt64)
		case sysrole.FieldName, sysrole.FieldValue, sysrole.FieldDefaultRouter, sysrole.FieldRemark:
			values[i] = new(sql.NullString)
		case sysrole.FieldCreatedAt, sysrole.FieldUpdatedAt, sysrole.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sysrole.FieldStatus:
			values[i] = new(types.Status)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysRole fields.
func (sr *SysRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = uint64(value.Int64)
		case sysrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sr.Name = value.String
			}
		case sysrole.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				sr.Value = value.String
			}
		case sysrole.FieldDefaultRouter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_router", values[i])
			} else if value.Valid {
				sr.DefaultRouter = value.String
			}
		case sysrole.FieldStatus:
			if value, ok := values[i].(*types.Status); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				sr.Status = *value
			}
		case sysrole.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sr.Remark = value.String
			}
		case sysrole.FieldOrderNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				sr.OrderNo = uint32(value.Int64)
			}
		case sysrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case sysrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		case sysrole.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sr.DeletedAt = new(time.Time)
				*sr.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryMenus queries the "menus" edge of the SysRole entity.
func (sr *SysRole) QueryMenus() *SysMenuQuery {
	return (&SysRoleClient{config: sr.config}).QueryMenus(sr)
}

// Update returns a builder for updating this SysRole.
// Note that you need to call SysRole.Unwrap() before calling this method if this SysRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SysRole) Update() *SysRoleUpdateOne {
	return (&SysRoleClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the SysRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SysRole) Unwrap() *SysRole {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysRole is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SysRole) String() string {
	var builder strings.Builder
	builder.WriteString("SysRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("name=")
	builder.WriteString(sr.Name)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(sr.Value)
	builder.WriteString(", ")
	builder.WriteString("default_router=")
	builder.WriteString(sr.DefaultRouter)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sr.Status))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(sr.Remark)
	builder.WriteString(", ")
	builder.WriteString("order_no=")
	builder.WriteString(fmt.Sprintf("%v", sr.OrderNo))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedMenus returns the Menus named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sr *SysRole) NamedMenus(name string) ([]*SysMenu, error) {
	if sr.Edges.namedMenus == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sr.Edges.namedMenus[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sr *SysRole) appendNamedMenus(name string, edges ...*SysMenu) {
	if sr.Edges.namedMenus == nil {
		sr.Edges.namedMenus = make(map[string][]*SysMenu)
	}
	if len(edges) == 0 {
		sr.Edges.namedMenus[name] = []*SysMenu{}
	} else {
		sr.Edges.namedMenus[name] = append(sr.Edges.namedMenus[name], edges...)
	}
}

// SysRoles is a parsable slice of SysRole.
type SysRoles []*SysRole

func (sr SysRoles) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
