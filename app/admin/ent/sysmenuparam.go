// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slash-admin/app/admin/ent/sysmenuparam"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysMenuParam is the model entity for the SysMenuParam schema.
type SysMenuParam struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// menu id
	MenuID uint64 `json:"menu_id,omitempty"`
	// 参数类型
	Type string `json:"type,omitempty"`
	// 参数键
	Key string `json:"key,omitempty"`
	// 参数值
	Value string `json:"value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysMenuParam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysmenuparam.FieldID, sysmenuparam.FieldMenuID:
			values[i] = new(sql.NullInt64)
		case sysmenuparam.FieldType, sysmenuparam.FieldKey, sysmenuparam.FieldValue:
			values[i] = new(sql.NullString)
		case sysmenuparam.FieldCreatedAt, sysmenuparam.FieldUpdatedAt, sysmenuparam.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysMenuParam", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysMenuParam fields.
func (smp *SysMenuParam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysmenuparam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			smp.ID = uint64(value.Int64)
		case sysmenuparam.FieldMenuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field menu_id", values[i])
			} else if value.Valid {
				smp.MenuID = uint64(value.Int64)
			}
		case sysmenuparam.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				smp.Type = value.String
			}
		case sysmenuparam.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				smp.Key = value.String
			}
		case sysmenuparam.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				smp.Value = value.String
			}
		case sysmenuparam.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				smp.CreatedAt = value.Time
			}
		case sysmenuparam.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				smp.UpdatedAt = value.Time
			}
		case sysmenuparam.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				smp.DeletedAt = new(time.Time)
				*smp.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SysMenuParam.
// Note that you need to call SysMenuParam.Unwrap() before calling this method if this SysMenuParam
// was returned from a transaction, and the transaction was committed or rolled back.
func (smp *SysMenuParam) Update() *SysMenuParamUpdateOne {
	return (&SysMenuParamClient{config: smp.config}).UpdateOne(smp)
}

// Unwrap unwraps the SysMenuParam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (smp *SysMenuParam) Unwrap() *SysMenuParam {
	_tx, ok := smp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysMenuParam is not a transactional entity")
	}
	smp.config.driver = _tx.drv
	return smp
}

// String implements the fmt.Stringer.
func (smp *SysMenuParam) String() string {
	var builder strings.Builder
	builder.WriteString("SysMenuParam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", smp.ID))
	builder.WriteString("menu_id=")
	builder.WriteString(fmt.Sprintf("%v", smp.MenuID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(smp.Type)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(smp.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(smp.Value)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(smp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(smp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := smp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysMenuParams is a parsable slice of SysMenuParam.
type SysMenuParams []*SysMenuParam

func (smp SysMenuParams) config(cfg config) {
	for _i := range smp {
		smp[_i].config = cfg
	}
}
