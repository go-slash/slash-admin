// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/predicate"
	"slash-admin/app/admin/ent/systoken"
	"slash-admin/pkg/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysTokenUpdate is the builder for updating SysToken entities.
type SysTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *SysTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysTokenUpdate builder.
func (stu *SysTokenUpdate) Where(ps ...predicate.SysToken) *SysTokenUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetUUID sets the "uuid" field.
func (stu *SysTokenUpdate) SetUUID(s string) *SysTokenUpdate {
	stu.mutation.SetUUID(s)
	return stu
}

// SetToken sets the "token" field.
func (stu *SysTokenUpdate) SetToken(s string) *SysTokenUpdate {
	stu.mutation.SetToken(s)
	return stu
}

// SetSource sets the "source" field.
func (stu *SysTokenUpdate) SetSource(s string) *SysTokenUpdate {
	stu.mutation.SetSource(s)
	return stu
}

// SetStatus sets the "status" field.
func (stu *SysTokenUpdate) SetStatus(t types.Status) *SysTokenUpdate {
	stu.mutation.ResetStatus()
	stu.mutation.SetStatus(t)
	return stu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stu *SysTokenUpdate) SetNillableStatus(t *types.Status) *SysTokenUpdate {
	if t != nil {
		stu.SetStatus(*t)
	}
	return stu
}

// AddStatus adds t to the "status" field.
func (stu *SysTokenUpdate) AddStatus(t types.Status) *SysTokenUpdate {
	stu.mutation.AddStatus(t)
	return stu
}

// ClearStatus clears the value of the "status" field.
func (stu *SysTokenUpdate) ClearStatus() *SysTokenUpdate {
	stu.mutation.ClearStatus()
	return stu
}

// SetExpiredAt sets the "expired_at" field.
func (stu *SysTokenUpdate) SetExpiredAt(t time.Time) *SysTokenUpdate {
	stu.mutation.SetExpiredAt(t)
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *SysTokenUpdate) SetUpdatedAt(t time.Time) *SysTokenUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// SetDeletedAt sets the "deleted_at" field.
func (stu *SysTokenUpdate) SetDeletedAt(t time.Time) *SysTokenUpdate {
	stu.mutation.SetDeletedAt(t)
	return stu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stu *SysTokenUpdate) SetNillableDeletedAt(t *time.Time) *SysTokenUpdate {
	if t != nil {
		stu.SetDeletedAt(*t)
	}
	return stu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (stu *SysTokenUpdate) ClearDeletedAt() *SysTokenUpdate {
	stu.mutation.ClearDeletedAt()
	return stu
}

// Mutation returns the SysTokenMutation object of the builder.
func (stu *SysTokenUpdate) Mutation() *SysTokenMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SysTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	stu.defaults()
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SysTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SysTokenUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SysTokenUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SysTokenUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := systoken.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stu *SysTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysTokenUpdate {
	stu.modifiers = append(stu.modifiers, modifiers...)
	return stu
}

func (stu *SysTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systoken.Table,
			Columns: systoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: systoken.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldUUID,
		})
	}
	if value, ok := stu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldToken,
		})
	}
	if value, ok := stu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldSource,
		})
	}
	if value, ok := stu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: systoken.FieldStatus,
		})
	}
	if value, ok := stu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: systoken.FieldStatus,
		})
	}
	if stu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: systoken.FieldStatus,
		})
	}
	if value, ok := stu.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldExpiredAt,
		})
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldUpdatedAt,
		})
	}
	if value, ok := stu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldDeletedAt,
		})
	}
	if stu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: systoken.FieldDeletedAt,
		})
	}
	_spec.AddModifiers(stu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SysTokenUpdateOne is the builder for updating a single SysToken entity.
type SysTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUUID sets the "uuid" field.
func (stuo *SysTokenUpdateOne) SetUUID(s string) *SysTokenUpdateOne {
	stuo.mutation.SetUUID(s)
	return stuo
}

// SetToken sets the "token" field.
func (stuo *SysTokenUpdateOne) SetToken(s string) *SysTokenUpdateOne {
	stuo.mutation.SetToken(s)
	return stuo
}

// SetSource sets the "source" field.
func (stuo *SysTokenUpdateOne) SetSource(s string) *SysTokenUpdateOne {
	stuo.mutation.SetSource(s)
	return stuo
}

// SetStatus sets the "status" field.
func (stuo *SysTokenUpdateOne) SetStatus(t types.Status) *SysTokenUpdateOne {
	stuo.mutation.ResetStatus()
	stuo.mutation.SetStatus(t)
	return stuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stuo *SysTokenUpdateOne) SetNillableStatus(t *types.Status) *SysTokenUpdateOne {
	if t != nil {
		stuo.SetStatus(*t)
	}
	return stuo
}

// AddStatus adds t to the "status" field.
func (stuo *SysTokenUpdateOne) AddStatus(t types.Status) *SysTokenUpdateOne {
	stuo.mutation.AddStatus(t)
	return stuo
}

// ClearStatus clears the value of the "status" field.
func (stuo *SysTokenUpdateOne) ClearStatus() *SysTokenUpdateOne {
	stuo.mutation.ClearStatus()
	return stuo
}

// SetExpiredAt sets the "expired_at" field.
func (stuo *SysTokenUpdateOne) SetExpiredAt(t time.Time) *SysTokenUpdateOne {
	stuo.mutation.SetExpiredAt(t)
	return stuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *SysTokenUpdateOne) SetUpdatedAt(t time.Time) *SysTokenUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// SetDeletedAt sets the "deleted_at" field.
func (stuo *SysTokenUpdateOne) SetDeletedAt(t time.Time) *SysTokenUpdateOne {
	stuo.mutation.SetDeletedAt(t)
	return stuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stuo *SysTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *SysTokenUpdateOne {
	if t != nil {
		stuo.SetDeletedAt(*t)
	}
	return stuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (stuo *SysTokenUpdateOne) ClearDeletedAt() *SysTokenUpdateOne {
	stuo.mutation.ClearDeletedAt()
	return stuo
}

// Mutation returns the SysTokenMutation object of the builder.
func (stuo *SysTokenUpdateOne) Mutation() *SysTokenMutation {
	return stuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SysTokenUpdateOne) Select(field string, fields ...string) *SysTokenUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SysToken entity.
func (stuo *SysTokenUpdateOne) Save(ctx context.Context) (*SysToken, error) {
	var (
		err  error
		node *SysToken
	)
	stuo.defaults()
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, stuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysToken)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysTokenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SysTokenUpdateOne) SaveX(ctx context.Context) *SysToken {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SysTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SysTokenUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SysTokenUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := systoken.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stuo *SysTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysTokenUpdateOne {
	stuo.modifiers = append(stuo.modifiers, modifiers...)
	return stuo
}

func (stuo *SysTokenUpdateOne) sqlSave(ctx context.Context) (_node *SysToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systoken.Table,
			Columns: systoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: systoken.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systoken.FieldID)
		for _, f := range fields {
			if !systoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldUUID,
		})
	}
	if value, ok := stuo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldToken,
		})
	}
	if value, ok := stuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldSource,
		})
	}
	if value, ok := stuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: systoken.FieldStatus,
		})
	}
	if value, ok := stuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: systoken.FieldStatus,
		})
	}
	if stuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: systoken.FieldStatus,
		})
	}
	if value, ok := stuo.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldExpiredAt,
		})
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldUpdatedAt,
		})
	}
	if value, ok := stuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldDeletedAt,
		})
	}
	if stuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: systoken.FieldDeletedAt,
		})
	}
	_spec.AddModifiers(stuo.modifiers...)
	_node = &SysToken{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
