// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

func (sa *SysApiUpdateOne) SetNillablePath(value *string) *SysApiUpdateOne {
	if value != nil {
		sa.SetPath(*value)
	}
	return sa
}

func (sa *SysApiUpdateOne) SetNillableDescription(value *string) *SysApiUpdateOne {
	if value != nil {
		sa.SetDescription(*value)
	}
	return sa
}

func (sa *SysApiUpdateOne) SetNillableAPIGroup(value *string) *SysApiUpdateOne {
	if value != nil {
		sa.SetAPIGroup(*value)
	}
	return sa
}

func (sd *SysDictionaryUpdateOne) SetNillableTitle(value *string) *SysDictionaryUpdateOne {
	if value != nil {
		sd.SetTitle(*value)
	}
	return sd
}

func (sd *SysDictionaryUpdateOne) SetNillableName(value *string) *SysDictionaryUpdateOne {
	if value != nil {
		sd.SetName(*value)
	}
	return sd
}

func (sd *SysDictionaryUpdateOne) SetNillableDesc(value *string) *SysDictionaryUpdateOne {
	if value != nil {
		sd.SetDesc(*value)
	}
	return sd
}

func (sdd *SysDictionaryDetailUpdateOne) SetNillableTitle(value *string) *SysDictionaryDetailUpdateOne {
	if value != nil {
		sdd.SetTitle(*value)
	}
	return sdd
}

func (sdd *SysDictionaryDetailUpdateOne) SetNillableKey(value *string) *SysDictionaryDetailUpdateOne {
	if value != nil {
		sdd.SetKey(*value)
	}
	return sdd
}

func (sdd *SysDictionaryDetailUpdateOne) SetNillableValue(value *string) *SysDictionaryDetailUpdateOne {
	if value != nil {
		sdd.SetValue(*value)
	}
	return sdd
}

func (sdd *SysDictionaryDetailUpdateOne) SetNillableRemark(value *string) *SysDictionaryDetailUpdateOne {
	if value != nil {
		sdd.SetRemark(*value)
	}
	return sdd
}

func (sm *SysMenuUpdateOne) SetNillableMenuLevel(value *uint8) *SysMenuUpdateOne {
	if value != nil {
		sm.SetMenuLevel(*value)
	}
	return sm
}

func (sm *SysMenuUpdateOne) SetNillableMenuType(value *uint8) *SysMenuUpdateOne {
	if value != nil {
		sm.SetMenuType(*value)
	}
	return sm
}

func (sm *SysMenuUpdateOne) SetNillablePath(value *string) *SysMenuUpdateOne {
	if value != nil {
		sm.SetPath(*value)
	}
	return sm
}

func (sm *SysMenuUpdateOne) SetNillableName(value *string) *SysMenuUpdateOne {
	if value != nil {
		sm.SetName(*value)
	}
	return sm
}

func (sm *SysMenuUpdateOne) SetNillableComponent(value *string) *SysMenuUpdateOne {
	if value != nil {
		sm.SetComponent(*value)
	}
	return sm
}

func (smp *SysMenuParamUpdateOne) SetNillableMenuID(value *uint64) *SysMenuParamUpdateOne {
	if value != nil {
		smp.SetMenuID(*value)
	}
	return smp
}

func (smp *SysMenuParamUpdateOne) SetNillableType(value *string) *SysMenuParamUpdateOne {
	if value != nil {
		smp.SetType(*value)
	}
	return smp
}

func (smp *SysMenuParamUpdateOne) SetNillableKey(value *string) *SysMenuParamUpdateOne {
	if value != nil {
		smp.SetKey(*value)
	}
	return smp
}

func (smp *SysMenuParamUpdateOne) SetNillableValue(value *string) *SysMenuParamUpdateOne {
	if value != nil {
		smp.SetValue(*value)
	}
	return smp
}

func (sop *SysOauthProviderUpdateOne) SetNillableName(value *string) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetName(*value)
	}
	return sop
}

func (sop *SysOauthProviderUpdateOne) SetNillableClientID(value *string) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetClientID(*value)
	}
	return sop
}

func (sop *SysOauthProviderUpdateOne) SetNillableClientSecret(value *string) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetClientSecret(*value)
	}
	return sop
}

func (sop *SysOauthProviderUpdateOne) SetNillableRedirectURL(value *string) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetRedirectURL(*value)
	}
	return sop
}

func (sop *SysOauthProviderUpdateOne) SetNillableScopes(value *string) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetScopes(*value)
	}
	return sop
}

func (sop *SysOauthProviderUpdateOne) SetNillableAuthURL(value *string) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetAuthURL(*value)
	}
	return sop
}

func (sop *SysOauthProviderUpdateOne) SetNillableTokenURL(value *string) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetTokenURL(*value)
	}
	return sop
}

func (sop *SysOauthProviderUpdateOne) SetNillableAuthStyle(value *uint8) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetAuthStyle(*value)
	}
	return sop
}

func (sop *SysOauthProviderUpdateOne) SetNillableInfoURL(value *string) *SysOauthProviderUpdateOne {
	if value != nil {
		sop.SetInfoURL(*value)
	}
	return sop
}

func (sr *SysRoleUpdateOne) SetNillableName(value *string) *SysRoleUpdateOne {
	if value != nil {
		sr.SetName(*value)
	}
	return sr
}

func (sr *SysRoleUpdateOne) SetNillableValue(value *string) *SysRoleUpdateOne {
	if value != nil {
		sr.SetValue(*value)
	}
	return sr
}

func (st *SysTokenUpdateOne) SetNillableUUID(value *string) *SysTokenUpdateOne {
	if value != nil {
		st.SetUUID(*value)
	}
	return st
}

func (st *SysTokenUpdateOne) SetNillableToken(value *string) *SysTokenUpdateOne {
	if value != nil {
		st.SetToken(*value)
	}
	return st
}

func (st *SysTokenUpdateOne) SetNillableSource(value *string) *SysTokenUpdateOne {
	if value != nil {
		st.SetSource(*value)
	}
	return st
}

func (st *SysTokenUpdateOne) SetNillableExpiredAt(value *time.Time) *SysTokenUpdateOne {
	if value != nil {
		st.SetExpiredAt(*value)
	}
	return st
}

func (su *SysUserUpdateOne) SetNillableUUID(value *string) *SysUserUpdateOne {
	if value != nil {
		su.SetUUID(*value)
	}
	return su
}

func (su *SysUserUpdateOne) SetNillableUsername(value *string) *SysUserUpdateOne {
	if value != nil {
		su.SetUsername(*value)
	}
	return su
}

func (su *SysUserUpdateOne) SetNillablePassword(value *string) *SysUserUpdateOne {
	if value != nil {
		su.SetPassword(*value)
	}
	return su
}

func (su *SysUserUpdateOne) SetNillableNickname(value *string) *SysUserUpdateOne {
	if value != nil {
		su.SetNickname(*value)
	}
	return su
}
