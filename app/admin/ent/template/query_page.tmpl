{{ define "query_page" }}

    {{ template "header" $ }}

    {{- if ne $.Storage.Name "sql" }}
        {{ fail "pagination requires SQL storage" }}
    {{- end }}

    import (
        "github.com/99designs/gqlgen/graphql"
        "github.com/99designs/gqlgen/graphql/errcode"
        "github.com/vektah/gqlparser/v2/gqlerror"
    )
    const errInvalidPage = "INVALID_PAGE"

    const (
        listField = "list"
        pageNumField = "pageNum"
        pageSizeField = "pageSize"
    )

    type PageDetails struct {
        Page  int `json:"page"`
        Limit int `json:"limit"`
        Total int `json:"total"`
    }

    func validatePageNumPageSize(pageNum int, pageSize int) (err *gqlerror.Error){
    switch {
    {{- range $arg := list "pageNum" "pageSize" }}
        case {{ $arg }} <= 0:
        err = &gqlerror.Error{
            Message: "`{{ $arg }}` cannot be less than one.",
        }
        errcode.Set(err, errInvalidPage)
    {{- end }}
    }
    return err
    }

    {{ range $node := $.Nodes -}}

        {{- if ne $node.Name "CasbinRule"}}

        {{ $pageList := print $node.Name "PageList" -}}
        {{ $name := $node.Name }}

        // {{ $pageList }} is {{ $name }} PageList result.
        type {{ $pageList }} struct {
            List []*{{ $name }}      `json:"list"`
            PageDetails *PageDetails  `json:"pageDetails"`
        }

        {{ $defaultOrder := print "Default" $name "Order" -}}
        {{ $newPager := print "new" $name "Pager" -}}
        {{ $opt := print $name "PaginateOption" -}}
        {{ $r := $node.Receiver -}}
        {{ $query := print $node.QueryName -}}

        func ({{ $r }} *{{ $query }}) Page(
            ctx context.Context, pageNum int, pageSize int, opts ...{{ $opt }},
            ) (*{{ $pageList }}, error) {
            if err := validatePageNumPageSize(pageNum, pageSize); err != nil {
                return nil, err
            }
            pager, err := {{ $newPager }}(opts)
            if err != nil {
                return nil, err
            }

            if {{ $r }}, err = pager.applyFilter({{ $r }}); err != nil {
                return nil, err
            }

            ret := &{{ $pageList }}{}

            ret.PageDetails = &PageDetails{
                Page: pageNum,
                Limit: pageSize,
            }

            count, err := {{ $r }}.Clone().Count(ctx)

            if err != nil {
                return nil, err
            }

            ret.PageDetails.Total = count

            direction := pager.order.Direction
            {{ $r }} = {{ $r }}.Order(direction.orderFunc(pager.order.Field.field))
            if pager.order.Field != {{ $defaultOrder }}.Field {
                {{ $r }} = {{ $r }}.Order(direction.orderFunc({{ $defaultOrder }}.Field.field))
            }

            {{ $r }} = {{ $r }}.Offset((pageNum - 1) * pageSize).Limit(pageSize)
            list, err := {{ $r }}.All(ctx)
            if err != nil {
                return nil, err
            }
            ret.List = list

            return ret, nil
        }

        {{- end }}
    {{- end }}
{{ end }}