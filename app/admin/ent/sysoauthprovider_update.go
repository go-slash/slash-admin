// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/predicate"
	"slash-admin/app/admin/ent/sysoauthprovider"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysOauthProviderUpdate is the builder for updating SysOauthProvider entities.
type SysOauthProviderUpdate struct {
	config
	hooks     []Hook
	mutation  *SysOauthProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysOauthProviderUpdate builder.
func (sopu *SysOauthProviderUpdate) Where(ps ...predicate.SysOauthProvider) *SysOauthProviderUpdate {
	sopu.mutation.Where(ps...)
	return sopu
}

// SetName sets the "name" field.
func (sopu *SysOauthProviderUpdate) SetName(s string) *SysOauthProviderUpdate {
	sopu.mutation.SetName(s)
	return sopu
}

// SetClientID sets the "client_id" field.
func (sopu *SysOauthProviderUpdate) SetClientID(s string) *SysOauthProviderUpdate {
	sopu.mutation.SetClientID(s)
	return sopu
}

// SetClientSecret sets the "client_secret" field.
func (sopu *SysOauthProviderUpdate) SetClientSecret(s string) *SysOauthProviderUpdate {
	sopu.mutation.SetClientSecret(s)
	return sopu
}

// SetRedirectURL sets the "redirect_url" field.
func (sopu *SysOauthProviderUpdate) SetRedirectURL(s string) *SysOauthProviderUpdate {
	sopu.mutation.SetRedirectURL(s)
	return sopu
}

// SetScopes sets the "scopes" field.
func (sopu *SysOauthProviderUpdate) SetScopes(s string) *SysOauthProviderUpdate {
	sopu.mutation.SetScopes(s)
	return sopu
}

// SetAuthURL sets the "auth_url" field.
func (sopu *SysOauthProviderUpdate) SetAuthURL(s string) *SysOauthProviderUpdate {
	sopu.mutation.SetAuthURL(s)
	return sopu
}

// SetTokenURL sets the "token_url" field.
func (sopu *SysOauthProviderUpdate) SetTokenURL(s string) *SysOauthProviderUpdate {
	sopu.mutation.SetTokenURL(s)
	return sopu
}

// SetAuthStyle sets the "auth_style" field.
func (sopu *SysOauthProviderUpdate) SetAuthStyle(u uint8) *SysOauthProviderUpdate {
	sopu.mutation.ResetAuthStyle()
	sopu.mutation.SetAuthStyle(u)
	return sopu
}

// AddAuthStyle adds u to the "auth_style" field.
func (sopu *SysOauthProviderUpdate) AddAuthStyle(u int8) *SysOauthProviderUpdate {
	sopu.mutation.AddAuthStyle(u)
	return sopu
}

// SetInfoURL sets the "info_url" field.
func (sopu *SysOauthProviderUpdate) SetInfoURL(s string) *SysOauthProviderUpdate {
	sopu.mutation.SetInfoURL(s)
	return sopu
}

// SetUpdatedAt sets the "updated_at" field.
func (sopu *SysOauthProviderUpdate) SetUpdatedAt(t time.Time) *SysOauthProviderUpdate {
	sopu.mutation.SetUpdatedAt(t)
	return sopu
}

// SetDeletedAt sets the "deleted_at" field.
func (sopu *SysOauthProviderUpdate) SetDeletedAt(t time.Time) *SysOauthProviderUpdate {
	sopu.mutation.SetDeletedAt(t)
	return sopu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sopu *SysOauthProviderUpdate) SetNillableDeletedAt(t *time.Time) *SysOauthProviderUpdate {
	if t != nil {
		sopu.SetDeletedAt(*t)
	}
	return sopu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sopu *SysOauthProviderUpdate) ClearDeletedAt() *SysOauthProviderUpdate {
	sopu.mutation.ClearDeletedAt()
	return sopu
}

// Mutation returns the SysOauthProviderMutation object of the builder.
func (sopu *SysOauthProviderUpdate) Mutation() *SysOauthProviderMutation {
	return sopu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sopu *SysOauthProviderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sopu.defaults()
	if len(sopu.hooks) == 0 {
		affected, err = sopu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysOauthProviderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sopu.mutation = mutation
			affected, err = sopu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sopu.hooks) - 1; i >= 0; i-- {
			if sopu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sopu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sopu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sopu *SysOauthProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := sopu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sopu *SysOauthProviderUpdate) Exec(ctx context.Context) error {
	_, err := sopu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sopu *SysOauthProviderUpdate) ExecX(ctx context.Context) {
	if err := sopu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sopu *SysOauthProviderUpdate) defaults() {
	if _, ok := sopu.mutation.UpdatedAt(); !ok {
		v := sysoauthprovider.UpdateDefaultUpdatedAt()
		sopu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sopu *SysOauthProviderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysOauthProviderUpdate {
	sopu.modifiers = append(sopu.modifiers, modifiers...)
	return sopu
}

func (sopu *SysOauthProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysoauthprovider.Table,
			Columns: sysoauthprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysoauthprovider.FieldID,
			},
		},
	}
	if ps := sopu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sopu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldName,
		})
	}
	if value, ok := sopu.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldClientID,
		})
	}
	if value, ok := sopu.mutation.ClientSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldClientSecret,
		})
	}
	if value, ok := sopu.mutation.RedirectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldRedirectURL,
		})
	}
	if value, ok := sopu.mutation.Scopes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldScopes,
		})
	}
	if value, ok := sopu.mutation.AuthURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldAuthURL,
		})
	}
	if value, ok := sopu.mutation.TokenURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldTokenURL,
		})
	}
	if value, ok := sopu.mutation.AuthStyle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysoauthprovider.FieldAuthStyle,
		})
	}
	if value, ok := sopu.mutation.AddedAuthStyle(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysoauthprovider.FieldAuthStyle,
		})
	}
	if value, ok := sopu.mutation.InfoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldInfoURL,
		})
	}
	if value, ok := sopu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoauthprovider.FieldUpdatedAt,
		})
	}
	if value, ok := sopu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoauthprovider.FieldDeletedAt,
		})
	}
	if sopu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysoauthprovider.FieldDeletedAt,
		})
	}
	_spec.AddModifiers(sopu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sopu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysoauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SysOauthProviderUpdateOne is the builder for updating a single SysOauthProvider entity.
type SysOauthProviderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysOauthProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (sopuo *SysOauthProviderUpdateOne) SetName(s string) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetName(s)
	return sopuo
}

// SetClientID sets the "client_id" field.
func (sopuo *SysOauthProviderUpdateOne) SetClientID(s string) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetClientID(s)
	return sopuo
}

// SetClientSecret sets the "client_secret" field.
func (sopuo *SysOauthProviderUpdateOne) SetClientSecret(s string) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetClientSecret(s)
	return sopuo
}

// SetRedirectURL sets the "redirect_url" field.
func (sopuo *SysOauthProviderUpdateOne) SetRedirectURL(s string) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetRedirectURL(s)
	return sopuo
}

// SetScopes sets the "scopes" field.
func (sopuo *SysOauthProviderUpdateOne) SetScopes(s string) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetScopes(s)
	return sopuo
}

// SetAuthURL sets the "auth_url" field.
func (sopuo *SysOauthProviderUpdateOne) SetAuthURL(s string) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetAuthURL(s)
	return sopuo
}

// SetTokenURL sets the "token_url" field.
func (sopuo *SysOauthProviderUpdateOne) SetTokenURL(s string) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetTokenURL(s)
	return sopuo
}

// SetAuthStyle sets the "auth_style" field.
func (sopuo *SysOauthProviderUpdateOne) SetAuthStyle(u uint8) *SysOauthProviderUpdateOne {
	sopuo.mutation.ResetAuthStyle()
	sopuo.mutation.SetAuthStyle(u)
	return sopuo
}

// AddAuthStyle adds u to the "auth_style" field.
func (sopuo *SysOauthProviderUpdateOne) AddAuthStyle(u int8) *SysOauthProviderUpdateOne {
	sopuo.mutation.AddAuthStyle(u)
	return sopuo
}

// SetInfoURL sets the "info_url" field.
func (sopuo *SysOauthProviderUpdateOne) SetInfoURL(s string) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetInfoURL(s)
	return sopuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sopuo *SysOauthProviderUpdateOne) SetUpdatedAt(t time.Time) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetUpdatedAt(t)
	return sopuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sopuo *SysOauthProviderUpdateOne) SetDeletedAt(t time.Time) *SysOauthProviderUpdateOne {
	sopuo.mutation.SetDeletedAt(t)
	return sopuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sopuo *SysOauthProviderUpdateOne) SetNillableDeletedAt(t *time.Time) *SysOauthProviderUpdateOne {
	if t != nil {
		sopuo.SetDeletedAt(*t)
	}
	return sopuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sopuo *SysOauthProviderUpdateOne) ClearDeletedAt() *SysOauthProviderUpdateOne {
	sopuo.mutation.ClearDeletedAt()
	return sopuo
}

// Mutation returns the SysOauthProviderMutation object of the builder.
func (sopuo *SysOauthProviderUpdateOne) Mutation() *SysOauthProviderMutation {
	return sopuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sopuo *SysOauthProviderUpdateOne) Select(field string, fields ...string) *SysOauthProviderUpdateOne {
	sopuo.fields = append([]string{field}, fields...)
	return sopuo
}

// Save executes the query and returns the updated SysOauthProvider entity.
func (sopuo *SysOauthProviderUpdateOne) Save(ctx context.Context) (*SysOauthProvider, error) {
	var (
		err  error
		node *SysOauthProvider
	)
	sopuo.defaults()
	if len(sopuo.hooks) == 0 {
		node, err = sopuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysOauthProviderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sopuo.mutation = mutation
			node, err = sopuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sopuo.hooks) - 1; i >= 0; i-- {
			if sopuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sopuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sopuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysOauthProvider)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysOauthProviderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sopuo *SysOauthProviderUpdateOne) SaveX(ctx context.Context) *SysOauthProvider {
	node, err := sopuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sopuo *SysOauthProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := sopuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sopuo *SysOauthProviderUpdateOne) ExecX(ctx context.Context) {
	if err := sopuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sopuo *SysOauthProviderUpdateOne) defaults() {
	if _, ok := sopuo.mutation.UpdatedAt(); !ok {
		v := sysoauthprovider.UpdateDefaultUpdatedAt()
		sopuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sopuo *SysOauthProviderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysOauthProviderUpdateOne {
	sopuo.modifiers = append(sopuo.modifiers, modifiers...)
	return sopuo
}

func (sopuo *SysOauthProviderUpdateOne) sqlSave(ctx context.Context) (_node *SysOauthProvider, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysoauthprovider.Table,
			Columns: sysoauthprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysoauthprovider.FieldID,
			},
		},
	}
	id, ok := sopuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysOauthProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sopuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysoauthprovider.FieldID)
		for _, f := range fields {
			if !sysoauthprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysoauthprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sopuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sopuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldName,
		})
	}
	if value, ok := sopuo.mutation.ClientID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldClientID,
		})
	}
	if value, ok := sopuo.mutation.ClientSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldClientSecret,
		})
	}
	if value, ok := sopuo.mutation.RedirectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldRedirectURL,
		})
	}
	if value, ok := sopuo.mutation.Scopes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldScopes,
		})
	}
	if value, ok := sopuo.mutation.AuthURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldAuthURL,
		})
	}
	if value, ok := sopuo.mutation.TokenURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldTokenURL,
		})
	}
	if value, ok := sopuo.mutation.AuthStyle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysoauthprovider.FieldAuthStyle,
		})
	}
	if value, ok := sopuo.mutation.AddedAuthStyle(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: sysoauthprovider.FieldAuthStyle,
		})
	}
	if value, ok := sopuo.mutation.InfoURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoauthprovider.FieldInfoURL,
		})
	}
	if value, ok := sopuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoauthprovider.FieldUpdatedAt,
		})
	}
	if value, ok := sopuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoauthprovider.FieldDeletedAt,
		})
	}
	if sopuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysoauthprovider.FieldDeletedAt,
		})
	}
	_spec.AddModifiers(sopuo.modifiers...)
	_node = &SysOauthProvider{config: sopuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sopuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysoauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
