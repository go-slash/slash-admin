// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slash-admin/app/admin/ent/sysdictionary"
	"slash-admin/pkg/types"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysDictionary is the model entity for the SysDictionary schema.
type SysDictionary struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// the title shown in the UI
	Title string `json:"title,omitempty"`
	// the name of dictionary for search
	Name string `json:"name,omitempty"`
	// 0=开启 1=禁用
	Status types.Status `json:"status,omitempty"`
	// the descriptions of dictionary
	Desc string `json:"desc,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysDictionaryQuery when eager-loading is set.
	Edges SysDictionaryEdges `json:"edges"`
}

// SysDictionaryEdges holds the relations/edges for other nodes in the graph.
type SysDictionaryEdges struct {
	// Details holds the value of the details edge.
	Details []*SysDictionaryDetail `json:"details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DetailsOrErr returns the Details value or an error if the edge
// was not loaded in eager-loading.
func (e SysDictionaryEdges) DetailsOrErr() ([]*SysDictionaryDetail, error) {
	if e.loadedTypes[0] {
		return e.Details, nil
	}
	return nil, &NotLoadedError{edge: "details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysDictionary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysdictionary.FieldID:
			values[i] = new(sql.NullInt64)
		case sysdictionary.FieldTitle, sysdictionary.FieldName, sysdictionary.FieldDesc:
			values[i] = new(sql.NullString)
		case sysdictionary.FieldCreatedAt, sysdictionary.FieldUpdatedAt, sysdictionary.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sysdictionary.FieldStatus:
			values[i] = new(types.Status)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysDictionary", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysDictionary fields.
func (sd *SysDictionary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysdictionary.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = uint64(value.Int64)
		case sysdictionary.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sd.Title = value.String
			}
		case sysdictionary.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sd.Name = value.String
			}
		case sysdictionary.FieldStatus:
			if value, ok := values[i].(*types.Status); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				sd.Status = *value
			}
		case sysdictionary.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				sd.Desc = value.String
			}
		case sysdictionary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Time
			}
		case sysdictionary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Time
			}
		case sysdictionary.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sd.DeletedAt = new(time.Time)
				*sd.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryDetails queries the "details" edge of the SysDictionary entity.
func (sd *SysDictionary) QueryDetails() *SysDictionaryDetailQuery {
	return (&SysDictionaryClient{config: sd.config}).QueryDetails(sd)
}

// Update returns a builder for updating this SysDictionary.
// Note that you need to call SysDictionary.Unwrap() before calling this method if this SysDictionary
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SysDictionary) Update() *SysDictionaryUpdateOne {
	return (&SysDictionaryClient{config: sd.config}).UpdateOne(sd)
}

// Unwrap unwraps the SysDictionary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SysDictionary) Unwrap() *SysDictionary {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysDictionary is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SysDictionary) String() string {
	var builder strings.Builder
	builder.WriteString("SysDictionary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("title=")
	builder.WriteString(sd.Title)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sd.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sd.Status))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(sd.Desc)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sd.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysDictionaries is a parsable slice of SysDictionary.
type SysDictionaries []*SysDictionary

func (sd SysDictionaries) config(cfg config) {
	for _i := range sd {
		sd[_i].config = cfg
	}
}
