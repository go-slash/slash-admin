// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/sysmenu"
	"slash-admin/pkg/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysMenuCreate is the builder for creating a SysMenu entity.
type SysMenuCreate struct {
	config
	mutation *SysMenuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMenuLevel sets the "menu_level" field.
func (smc *SysMenuCreate) SetMenuLevel(u uint32) *SysMenuCreate {
	smc.mutation.SetMenuLevel(u)
	return smc
}

// SetMenuType sets the "menu_type" field.
func (smc *SysMenuCreate) SetMenuType(u uint32) *SysMenuCreate {
	smc.mutation.SetMenuType(u)
	return smc
}

// SetParentID sets the "parent_id" field.
func (smc *SysMenuCreate) SetParentID(u uint) *SysMenuCreate {
	smc.mutation.SetParentID(u)
	return smc
}

// SetPath sets the "path" field.
func (smc *SysMenuCreate) SetPath(s string) *SysMenuCreate {
	smc.mutation.SetPath(s)
	return smc
}

// SetName sets the "name" field.
func (smc *SysMenuCreate) SetName(s string) *SysMenuCreate {
	smc.mutation.SetName(s)
	return smc
}

// SetRedirect sets the "redirect" field.
func (smc *SysMenuCreate) SetRedirect(s string) *SysMenuCreate {
	smc.mutation.SetRedirect(s)
	return smc
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableRedirect(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetRedirect(*s)
	}
	return smc
}

// SetComponent sets the "component" field.
func (smc *SysMenuCreate) SetComponent(s string) *SysMenuCreate {
	smc.mutation.SetComponent(s)
	return smc
}

// SetOrderNo sets the "order_no" field.
func (smc *SysMenuCreate) SetOrderNo(u uint32) *SysMenuCreate {
	smc.mutation.SetOrderNo(u)
	return smc
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableOrderNo(u *uint32) *SysMenuCreate {
	if u != nil {
		smc.SetOrderNo(*u)
	}
	return smc
}

// SetDisabled sets the "disabled" field.
func (smc *SysMenuCreate) SetDisabled(b bool) *SysMenuCreate {
	smc.mutation.SetDisabled(b)
	return smc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableDisabled(b *bool) *SysMenuCreate {
	if b != nil {
		smc.SetDisabled(*b)
	}
	return smc
}

// SetMeta sets the "meta" field.
func (smc *SysMenuCreate) SetMeta(tm types.MenuMeta) *SysMenuCreate {
	smc.mutation.SetMeta(tm)
	return smc
}

// SetNillableMeta sets the "meta" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableMeta(tm *types.MenuMeta) *SysMenuCreate {
	if tm != nil {
		smc.SetMeta(*tm)
	}
	return smc
}

// SetCreatedAt sets the "created_at" field.
func (smc *SysMenuCreate) SetCreatedAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetCreatedAt(t)
	return smc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableCreatedAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetCreatedAt(*t)
	}
	return smc
}

// SetUpdatedAt sets the "updated_at" field.
func (smc *SysMenuCreate) SetUpdatedAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetUpdatedAt(t)
	return smc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableUpdatedAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetUpdatedAt(*t)
	}
	return smc
}

// SetDeletedAt sets the "deleted_at" field.
func (smc *SysMenuCreate) SetDeletedAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetDeletedAt(t)
	return smc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableDeletedAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetDeletedAt(*t)
	}
	return smc
}

// SetID sets the "id" field.
func (smc *SysMenuCreate) SetID(u uint64) *SysMenuCreate {
	smc.mutation.SetID(u)
	return smc
}

// Mutation returns the SysMenuMutation object of the builder.
func (smc *SysMenuCreate) Mutation() *SysMenuMutation {
	return smc.mutation
}

// Save creates the SysMenu in the database.
func (smc *SysMenuCreate) Save(ctx context.Context) (*SysMenu, error) {
	var (
		err  error
		node *SysMenu
	)
	smc.defaults()
	if len(smc.hooks) == 0 {
		if err = smc.check(); err != nil {
			return nil, err
		}
		node, err = smc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smc.check(); err != nil {
				return nil, err
			}
			smc.mutation = mutation
			if node, err = smc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(smc.hooks) - 1; i >= 0; i-- {
			if smc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, smc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysMenu)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysMenuMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SysMenuCreate) SaveX(ctx context.Context) *SysMenu {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SysMenuCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SysMenuCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *SysMenuCreate) defaults() {
	if _, ok := smc.mutation.Redirect(); !ok {
		v := sysmenu.DefaultRedirect
		smc.mutation.SetRedirect(v)
	}
	if _, ok := smc.mutation.OrderNo(); !ok {
		v := sysmenu.DefaultOrderNo
		smc.mutation.SetOrderNo(v)
	}
	if _, ok := smc.mutation.Disabled(); !ok {
		v := sysmenu.DefaultDisabled
		smc.mutation.SetDisabled(v)
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		v := sysmenu.DefaultCreatedAt()
		smc.mutation.SetCreatedAt(v)
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		v := sysmenu.DefaultUpdatedAt()
		smc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SysMenuCreate) check() error {
	if _, ok := smc.mutation.MenuLevel(); !ok {
		return &ValidationError{Name: "menu_level", err: errors.New(`ent: missing required field "SysMenu.menu_level"`)}
	}
	if _, ok := smc.mutation.MenuType(); !ok {
		return &ValidationError{Name: "menu_type", err: errors.New(`ent: missing required field "SysMenu.menu_type"`)}
	}
	if _, ok := smc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "SysMenu.parent_id"`)}
	}
	if _, ok := smc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "SysMenu.path"`)}
	}
	if _, ok := smc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SysMenu.name"`)}
	}
	if _, ok := smc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "SysMenu.component"`)}
	}
	if _, ok := smc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "SysMenu.order_no"`)}
	}
	if _, ok := smc.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "SysMenu.disabled"`)}
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysMenu.created_at"`)}
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysMenu.updated_at"`)}
	}
	return nil
}

func (smc *SysMenuCreate) sqlSave(ctx context.Context) (*SysMenu, error) {
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (smc *SysMenuCreate) createSpec() (*SysMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &SysMenu{config: smc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysmenu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysmenu.FieldID,
			},
		}
	)
	_spec.OnConflict = smc.conflict
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := smc.mutation.MenuLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sysmenu.FieldMenuLevel,
		})
		_node.MenuLevel = value
	}
	if value, ok := smc.mutation.MenuType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sysmenu.FieldMenuType,
		})
		_node.MenuType = value
	}
	if value, ok := smc.mutation.ParentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: sysmenu.FieldParentID,
		})
		_node.ParentID = value
	}
	if value, ok := smc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := smc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldName,
		})
		_node.Name = value
	}
	if value, ok := smc.mutation.Redirect(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldRedirect,
		})
		_node.Redirect = value
	}
	if value, ok := smc.mutation.Component(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldComponent,
		})
		_node.Component = value
	}
	if value, ok := smc.mutation.OrderNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: sysmenu.FieldOrderNo,
		})
		_node.OrderNo = value
	}
	if value, ok := smc.mutation.Disabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldDisabled,
		})
		_node.Disabled = value
	}
	if value, ok := smc.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldMeta,
		})
		_node.Meta = value
	}
	if value, ok := smc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenu.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := smc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenu.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := smc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenu.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysMenu.Create().
//		SetMenuLevel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysMenuUpsert) {
//			SetMenuLevel(v+v).
//		}).
//		Exec(ctx)
func (smc *SysMenuCreate) OnConflict(opts ...sql.ConflictOption) *SysMenuUpsertOne {
	smc.conflict = opts
	return &SysMenuUpsertOne{
		create: smc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (smc *SysMenuCreate) OnConflictColumns(columns ...string) *SysMenuUpsertOne {
	smc.conflict = append(smc.conflict, sql.ConflictColumns(columns...))
	return &SysMenuUpsertOne{
		create: smc,
	}
}

type (
	// SysMenuUpsertOne is the builder for "upsert"-ing
	//  one SysMenu node.
	SysMenuUpsertOne struct {
		create *SysMenuCreate
	}

	// SysMenuUpsert is the "OnConflict" setter.
	SysMenuUpsert struct {
		*sql.UpdateSet
	}
)

// SetMenuLevel sets the "menu_level" field.
func (u *SysMenuUpsert) SetMenuLevel(v uint32) *SysMenuUpsert {
	u.Set(sysmenu.FieldMenuLevel, v)
	return u
}

// UpdateMenuLevel sets the "menu_level" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateMenuLevel() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldMenuLevel)
	return u
}

// AddMenuLevel adds v to the "menu_level" field.
func (u *SysMenuUpsert) AddMenuLevel(v uint32) *SysMenuUpsert {
	u.Add(sysmenu.FieldMenuLevel, v)
	return u
}

// SetMenuType sets the "menu_type" field.
func (u *SysMenuUpsert) SetMenuType(v uint32) *SysMenuUpsert {
	u.Set(sysmenu.FieldMenuType, v)
	return u
}

// UpdateMenuType sets the "menu_type" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateMenuType() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldMenuType)
	return u
}

// AddMenuType adds v to the "menu_type" field.
func (u *SysMenuUpsert) AddMenuType(v uint32) *SysMenuUpsert {
	u.Add(sysmenu.FieldMenuType, v)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *SysMenuUpsert) SetParentID(v uint) *SysMenuUpsert {
	u.Set(sysmenu.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateParentID() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *SysMenuUpsert) AddParentID(v uint) *SysMenuUpsert {
	u.Add(sysmenu.FieldParentID, v)
	return u
}

// SetPath sets the "path" field.
func (u *SysMenuUpsert) SetPath(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdatePath() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldPath)
	return u
}

// SetName sets the "name" field.
func (u *SysMenuUpsert) SetName(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateName() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldName)
	return u
}

// SetRedirect sets the "redirect" field.
func (u *SysMenuUpsert) SetRedirect(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldRedirect, v)
	return u
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateRedirect() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldRedirect)
	return u
}

// ClearRedirect clears the value of the "redirect" field.
func (u *SysMenuUpsert) ClearRedirect() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldRedirect)
	return u
}

// SetComponent sets the "component" field.
func (u *SysMenuUpsert) SetComponent(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldComponent, v)
	return u
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateComponent() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldComponent)
	return u
}

// SetOrderNo sets the "order_no" field.
func (u *SysMenuUpsert) SetOrderNo(v uint32) *SysMenuUpsert {
	u.Set(sysmenu.FieldOrderNo, v)
	return u
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateOrderNo() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldOrderNo)
	return u
}

// AddOrderNo adds v to the "order_no" field.
func (u *SysMenuUpsert) AddOrderNo(v uint32) *SysMenuUpsert {
	u.Add(sysmenu.FieldOrderNo, v)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *SysMenuUpsert) SetDisabled(v bool) *SysMenuUpsert {
	u.Set(sysmenu.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateDisabled() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldDisabled)
	return u
}

// SetMeta sets the "meta" field.
func (u *SysMenuUpsert) SetMeta(v types.MenuMeta) *SysMenuUpsert {
	u.Set(sysmenu.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateMeta() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldMeta)
	return u
}

// ClearMeta clears the value of the "meta" field.
func (u *SysMenuUpsert) ClearMeta() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldMeta)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SysMenuUpsert) SetCreatedAt(v time.Time) *SysMenuUpsert {
	u.Set(sysmenu.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateCreatedAt() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysMenuUpsert) SetUpdatedAt(v time.Time) *SysMenuUpsert {
	u.Set(sysmenu.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateUpdatedAt() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysMenuUpsert) SetDeletedAt(v time.Time) *SysMenuUpsert {
	u.Set(sysmenu.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateDeletedAt() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysMenuUpsert) ClearDeletedAt() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysmenu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysMenuUpsertOne) UpdateNewValues() *SysMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysmenu.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysMenuUpsertOne) Ignore() *SysMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysMenuUpsertOne) DoNothing() *SysMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysMenuCreate.OnConflict
// documentation for more info.
func (u *SysMenuUpsertOne) Update(set func(*SysMenuUpsert)) *SysMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysMenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetMenuLevel sets the "menu_level" field.
func (u *SysMenuUpsertOne) SetMenuLevel(v uint32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetMenuLevel(v)
	})
}

// AddMenuLevel adds v to the "menu_level" field.
func (u *SysMenuUpsertOne) AddMenuLevel(v uint32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddMenuLevel(v)
	})
}

// UpdateMenuLevel sets the "menu_level" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateMenuLevel() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateMenuLevel()
	})
}

// SetMenuType sets the "menu_type" field.
func (u *SysMenuUpsertOne) SetMenuType(v uint32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetMenuType(v)
	})
}

// AddMenuType adds v to the "menu_type" field.
func (u *SysMenuUpsertOne) AddMenuType(v uint32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddMenuType(v)
	})
}

// UpdateMenuType sets the "menu_type" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateMenuType() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateMenuType()
	})
}

// SetParentID sets the "parent_id" field.
func (u *SysMenuUpsertOne) SetParentID(v uint) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *SysMenuUpsertOne) AddParentID(v uint) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateParentID() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateParentID()
	})
}

// SetPath sets the "path" field.
func (u *SysMenuUpsertOne) SetPath(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdatePath() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdatePath()
	})
}

// SetName sets the "name" field.
func (u *SysMenuUpsertOne) SetName(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateName() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateName()
	})
}

// SetRedirect sets the "redirect" field.
func (u *SysMenuUpsertOne) SetRedirect(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateRedirect() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *SysMenuUpsertOne) ClearRedirect() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearRedirect()
	})
}

// SetComponent sets the "component" field.
func (u *SysMenuUpsertOne) SetComponent(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateComponent() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateComponent()
	})
}

// SetOrderNo sets the "order_no" field.
func (u *SysMenuUpsertOne) SetOrderNo(v uint32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetOrderNo(v)
	})
}

// AddOrderNo adds v to the "order_no" field.
func (u *SysMenuUpsertOne) AddOrderNo(v uint32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddOrderNo(v)
	})
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateOrderNo() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateOrderNo()
	})
}

// SetDisabled sets the "disabled" field.
func (u *SysMenuUpsertOne) SetDisabled(v bool) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateDisabled() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateDisabled()
	})
}

// SetMeta sets the "meta" field.
func (u *SysMenuUpsertOne) SetMeta(v types.MenuMeta) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateMeta() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateMeta()
	})
}

// ClearMeta clears the value of the "meta" field.
func (u *SysMenuUpsertOne) ClearMeta() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearMeta()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysMenuUpsertOne) SetCreatedAt(v time.Time) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateCreatedAt() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysMenuUpsertOne) SetUpdatedAt(v time.Time) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateUpdatedAt() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysMenuUpsertOne) SetDeletedAt(v time.Time) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateDeletedAt() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysMenuUpsertOne) ClearDeletedAt() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysMenuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysMenuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysMenuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysMenuUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysMenuUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysMenuCreateBulk is the builder for creating many SysMenu entities in bulk.
type SysMenuCreateBulk struct {
	config
	builders []*SysMenuCreate
	conflict []sql.ConflictOption
}

// Save creates the SysMenu entities in the database.
func (smcb *SysMenuCreateBulk) Save(ctx context.Context) ([]*SysMenu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SysMenu, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = smcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) SaveX(ctx context.Context) []*SysMenu {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SysMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysMenu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysMenuUpsert) {
//			SetMenuLevel(v+v).
//		}).
//		Exec(ctx)
func (smcb *SysMenuCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysMenuUpsertBulk {
	smcb.conflict = opts
	return &SysMenuUpsertBulk{
		create: smcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (smcb *SysMenuCreateBulk) OnConflictColumns(columns ...string) *SysMenuUpsertBulk {
	smcb.conflict = append(smcb.conflict, sql.ConflictColumns(columns...))
	return &SysMenuUpsertBulk{
		create: smcb,
	}
}

// SysMenuUpsertBulk is the builder for "upsert"-ing
// a bulk of SysMenu nodes.
type SysMenuUpsertBulk struct {
	create *SysMenuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysmenu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysMenuUpsertBulk) UpdateNewValues() *SysMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysmenu.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysMenuUpsertBulk) Ignore() *SysMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysMenuUpsertBulk) DoNothing() *SysMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysMenuCreateBulk.OnConflict
// documentation for more info.
func (u *SysMenuUpsertBulk) Update(set func(*SysMenuUpsert)) *SysMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysMenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetMenuLevel sets the "menu_level" field.
func (u *SysMenuUpsertBulk) SetMenuLevel(v uint32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetMenuLevel(v)
	})
}

// AddMenuLevel adds v to the "menu_level" field.
func (u *SysMenuUpsertBulk) AddMenuLevel(v uint32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddMenuLevel(v)
	})
}

// UpdateMenuLevel sets the "menu_level" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateMenuLevel() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateMenuLevel()
	})
}

// SetMenuType sets the "menu_type" field.
func (u *SysMenuUpsertBulk) SetMenuType(v uint32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetMenuType(v)
	})
}

// AddMenuType adds v to the "menu_type" field.
func (u *SysMenuUpsertBulk) AddMenuType(v uint32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddMenuType(v)
	})
}

// UpdateMenuType sets the "menu_type" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateMenuType() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateMenuType()
	})
}

// SetParentID sets the "parent_id" field.
func (u *SysMenuUpsertBulk) SetParentID(v uint) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *SysMenuUpsertBulk) AddParentID(v uint) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateParentID() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateParentID()
	})
}

// SetPath sets the "path" field.
func (u *SysMenuUpsertBulk) SetPath(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdatePath() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdatePath()
	})
}

// SetName sets the "name" field.
func (u *SysMenuUpsertBulk) SetName(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateName() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateName()
	})
}

// SetRedirect sets the "redirect" field.
func (u *SysMenuUpsertBulk) SetRedirect(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateRedirect() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *SysMenuUpsertBulk) ClearRedirect() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearRedirect()
	})
}

// SetComponent sets the "component" field.
func (u *SysMenuUpsertBulk) SetComponent(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateComponent() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateComponent()
	})
}

// SetOrderNo sets the "order_no" field.
func (u *SysMenuUpsertBulk) SetOrderNo(v uint32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetOrderNo(v)
	})
}

// AddOrderNo adds v to the "order_no" field.
func (u *SysMenuUpsertBulk) AddOrderNo(v uint32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddOrderNo(v)
	})
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateOrderNo() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateOrderNo()
	})
}

// SetDisabled sets the "disabled" field.
func (u *SysMenuUpsertBulk) SetDisabled(v bool) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateDisabled() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateDisabled()
	})
}

// SetMeta sets the "meta" field.
func (u *SysMenuUpsertBulk) SetMeta(v types.MenuMeta) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateMeta() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateMeta()
	})
}

// ClearMeta clears the value of the "meta" field.
func (u *SysMenuUpsertBulk) ClearMeta() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearMeta()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysMenuUpsertBulk) SetCreatedAt(v time.Time) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateCreatedAt() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysMenuUpsertBulk) SetUpdatedAt(v time.Time) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateUpdatedAt() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysMenuUpsertBulk) SetDeletedAt(v time.Time) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateDeletedAt() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysMenuUpsertBulk) ClearDeletedAt() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysMenuUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysMenuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysMenuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysMenuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
