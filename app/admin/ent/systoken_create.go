// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/systoken"
	"slash-admin/pkg/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysTokenCreate is the builder for creating a SysToken entity.
type SysTokenCreate struct {
	config
	mutation *SysTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUUID sets the "uuid" field.
func (stc *SysTokenCreate) SetUUID(s string) *SysTokenCreate {
	stc.mutation.SetUUID(s)
	return stc
}

// SetToken sets the "token" field.
func (stc *SysTokenCreate) SetToken(s string) *SysTokenCreate {
	stc.mutation.SetToken(s)
	return stc
}

// SetSource sets the "source" field.
func (stc *SysTokenCreate) SetSource(s string) *SysTokenCreate {
	stc.mutation.SetSource(s)
	return stc
}

// SetStatus sets the "status" field.
func (stc *SysTokenCreate) SetStatus(t types.Status) *SysTokenCreate {
	stc.mutation.SetStatus(t)
	return stc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (stc *SysTokenCreate) SetNillableStatus(t *types.Status) *SysTokenCreate {
	if t != nil {
		stc.SetStatus(*t)
	}
	return stc
}

// SetExpiredAt sets the "expired_at" field.
func (stc *SysTokenCreate) SetExpiredAt(t time.Time) *SysTokenCreate {
	stc.mutation.SetExpiredAt(t)
	return stc
}

// SetCreatedAt sets the "created_at" field.
func (stc *SysTokenCreate) SetCreatedAt(t time.Time) *SysTokenCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *SysTokenCreate) SetNillableCreatedAt(t *time.Time) *SysTokenCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// SetUpdatedAt sets the "updated_at" field.
func (stc *SysTokenCreate) SetUpdatedAt(t time.Time) *SysTokenCreate {
	stc.mutation.SetUpdatedAt(t)
	return stc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stc *SysTokenCreate) SetNillableUpdatedAt(t *time.Time) *SysTokenCreate {
	if t != nil {
		stc.SetUpdatedAt(*t)
	}
	return stc
}

// SetDeletedAt sets the "deleted_at" field.
func (stc *SysTokenCreate) SetDeletedAt(t time.Time) *SysTokenCreate {
	stc.mutation.SetDeletedAt(t)
	return stc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stc *SysTokenCreate) SetNillableDeletedAt(t *time.Time) *SysTokenCreate {
	if t != nil {
		stc.SetDeletedAt(*t)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *SysTokenCreate) SetID(u uint64) *SysTokenCreate {
	stc.mutation.SetID(u)
	return stc
}

// Mutation returns the SysTokenMutation object of the builder.
func (stc *SysTokenCreate) Mutation() *SysTokenMutation {
	return stc.mutation
}

// Save creates the SysToken in the database.
func (stc *SysTokenCreate) Save(ctx context.Context) (*SysToken, error) {
	var (
		err  error
		node *SysToken
	)
	stc.defaults()
	if len(stc.hooks) == 0 {
		if err = stc.check(); err != nil {
			return nil, err
		}
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stc.check(); err != nil {
				return nil, err
			}
			stc.mutation = mutation
			if node, err = stc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			if stc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, stc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysToken)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysTokenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SysTokenCreate) SaveX(ctx context.Context) *SysToken {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SysTokenCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SysTokenCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SysTokenCreate) defaults() {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		v := systoken.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		v := systoken.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SysTokenCreate) check() error {
	if _, ok := stc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "SysToken.uuid"`)}
	}
	if _, ok := stc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "SysToken.token"`)}
	}
	if _, ok := stc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "SysToken.source"`)}
	}
	if _, ok := stc.mutation.ExpiredAt(); !ok {
		return &ValidationError{Name: "expired_at", err: errors.New(`ent: missing required field "SysToken.expired_at"`)}
	}
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysToken.created_at"`)}
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysToken.updated_at"`)}
	}
	return nil
}

func (stc *SysTokenCreate) sqlSave(ctx context.Context) (*SysToken, error) {
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (stc *SysTokenCreate) createSpec() (*SysToken, *sqlgraph.CreateSpec) {
	var (
		_node = &SysToken{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: systoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: systoken.FieldID,
			},
		}
	)
	_spec.OnConflict = stc.conflict
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := stc.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := stc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systoken.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := stc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: systoken.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := stc.mutation.ExpiredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldExpiredAt,
		})
		_node.ExpiredAt = value
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := stc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systoken.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysToken.Create().
//		SetUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysTokenUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (stc *SysTokenCreate) OnConflict(opts ...sql.ConflictOption) *SysTokenUpsertOne {
	stc.conflict = opts
	return &SysTokenUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SysTokenCreate) OnConflictColumns(columns ...string) *SysTokenUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SysTokenUpsertOne{
		create: stc,
	}
}

type (
	// SysTokenUpsertOne is the builder for "upsert"-ing
	//  one SysToken node.
	SysTokenUpsertOne struct {
		create *SysTokenCreate
	}

	// SysTokenUpsert is the "OnConflict" setter.
	SysTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetUUID sets the "uuid" field.
func (u *SysTokenUpsert) SetUUID(v string) *SysTokenUpsert {
	u.Set(systoken.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *SysTokenUpsert) UpdateUUID() *SysTokenUpsert {
	u.SetExcluded(systoken.FieldUUID)
	return u
}

// SetToken sets the "token" field.
func (u *SysTokenUpsert) SetToken(v string) *SysTokenUpsert {
	u.Set(systoken.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SysTokenUpsert) UpdateToken() *SysTokenUpsert {
	u.SetExcluded(systoken.FieldToken)
	return u
}

// SetSource sets the "source" field.
func (u *SysTokenUpsert) SetSource(v string) *SysTokenUpsert {
	u.Set(systoken.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *SysTokenUpsert) UpdateSource() *SysTokenUpsert {
	u.SetExcluded(systoken.FieldSource)
	return u
}

// SetStatus sets the "status" field.
func (u *SysTokenUpsert) SetStatus(v types.Status) *SysTokenUpsert {
	u.Set(systoken.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysTokenUpsert) UpdateStatus() *SysTokenUpsert {
	u.SetExcluded(systoken.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SysTokenUpsert) AddStatus(v types.Status) *SysTokenUpsert {
	u.Add(systoken.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *SysTokenUpsert) ClearStatus() *SysTokenUpsert {
	u.SetNull(systoken.FieldStatus)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *SysTokenUpsert) SetExpiredAt(v time.Time) *SysTokenUpsert {
	u.Set(systoken.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *SysTokenUpsert) UpdateExpiredAt() *SysTokenUpsert {
	u.SetExcluded(systoken.FieldExpiredAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTokenUpsert) SetUpdatedAt(v time.Time) *SysTokenUpsert {
	u.Set(systoken.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTokenUpsert) UpdateUpdatedAt() *SysTokenUpsert {
	u.SetExcluded(systoken.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTokenUpsert) SetDeletedAt(v time.Time) *SysTokenUpsert {
	u.Set(systoken.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTokenUpsert) UpdateDeletedAt() *SysTokenUpsert {
	u.SetExcluded(systoken.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTokenUpsert) ClearDeletedAt() *SysTokenUpsert {
	u.SetNull(systoken.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysTokenUpsertOne) UpdateNewValues() *SysTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systoken.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(systoken.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysToken.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysTokenUpsertOne) Ignore() *SysTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysTokenUpsertOne) DoNothing() *SysTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysTokenCreate.OnConflict
// documentation for more info.
func (u *SysTokenUpsertOne) Update(set func(*SysTokenUpsert)) *SysTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *SysTokenUpsertOne) SetUUID(v string) *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *SysTokenUpsertOne) UpdateUUID() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateUUID()
	})
}

// SetToken sets the "token" field.
func (u *SysTokenUpsertOne) SetToken(v string) *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SysTokenUpsertOne) UpdateToken() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateToken()
	})
}

// SetSource sets the "source" field.
func (u *SysTokenUpsertOne) SetSource(v string) *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *SysTokenUpsertOne) UpdateSource() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateSource()
	})
}

// SetStatus sets the "status" field.
func (u *SysTokenUpsertOne) SetStatus(v types.Status) *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SysTokenUpsertOne) AddStatus(v types.Status) *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysTokenUpsertOne) UpdateStatus() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SysTokenUpsertOne) ClearStatus() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.ClearStatus()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *SysTokenUpsertOne) SetExpiredAt(v time.Time) *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *SysTokenUpsertOne) UpdateExpiredAt() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateExpiredAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTokenUpsertOne) SetUpdatedAt(v time.Time) *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTokenUpsertOne) UpdateUpdatedAt() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTokenUpsertOne) SetDeletedAt(v time.Time) *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTokenUpsertOne) UpdateDeletedAt() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTokenUpsertOne) ClearDeletedAt() *SysTokenUpsertOne {
	return u.Update(func(s *SysTokenUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysTokenUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysTokenUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysTokenCreateBulk is the builder for creating many SysToken entities in bulk.
type SysTokenCreateBulk struct {
	config
	builders []*SysTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the SysToken entities in the database.
func (stcb *SysTokenCreateBulk) Save(ctx context.Context) ([]*SysToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SysToken, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SysTokenCreateBulk) SaveX(ctx context.Context) []*SysToken {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SysTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SysTokenCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysTokenUpsert) {
//			SetUUID(v+v).
//		}).
//		Exec(ctx)
func (stcb *SysTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysTokenUpsertBulk {
	stcb.conflict = opts
	return &SysTokenUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SysTokenCreateBulk) OnConflictColumns(columns ...string) *SysTokenUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SysTokenUpsertBulk{
		create: stcb,
	}
}

// SysTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of SysToken nodes.
type SysTokenUpsertBulk struct {
	create *SysTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysTokenUpsertBulk) UpdateNewValues() *SysTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systoken.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(systoken.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysTokenUpsertBulk) Ignore() *SysTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysTokenUpsertBulk) DoNothing() *SysTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysTokenCreateBulk.OnConflict
// documentation for more info.
func (u *SysTokenUpsertBulk) Update(set func(*SysTokenUpsert)) *SysTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUUID sets the "uuid" field.
func (u *SysTokenUpsertBulk) SetUUID(v string) *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *SysTokenUpsertBulk) UpdateUUID() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateUUID()
	})
}

// SetToken sets the "token" field.
func (u *SysTokenUpsertBulk) SetToken(v string) *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SysTokenUpsertBulk) UpdateToken() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateToken()
	})
}

// SetSource sets the "source" field.
func (u *SysTokenUpsertBulk) SetSource(v string) *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *SysTokenUpsertBulk) UpdateSource() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateSource()
	})
}

// SetStatus sets the "status" field.
func (u *SysTokenUpsertBulk) SetStatus(v types.Status) *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SysTokenUpsertBulk) AddStatus(v types.Status) *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysTokenUpsertBulk) UpdateStatus() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *SysTokenUpsertBulk) ClearStatus() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.ClearStatus()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *SysTokenUpsertBulk) SetExpiredAt(v time.Time) *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *SysTokenUpsertBulk) UpdateExpiredAt() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateExpiredAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTokenUpsertBulk) SetUpdatedAt(v time.Time) *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTokenUpsertBulk) UpdateUpdatedAt() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTokenUpsertBulk) SetDeletedAt(v time.Time) *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTokenUpsertBulk) UpdateDeletedAt() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTokenUpsertBulk) ClearDeletedAt() *SysTokenUpsertBulk {
	return u.Update(func(s *SysTokenUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysTokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
