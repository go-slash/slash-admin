// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"slash-admin/app/admin/ent/predicate"
	"slash-admin/app/admin/ent/sysdictionary"
	"slash-admin/app/admin/ent/sysdictionarydetail"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysDictionaryDetailQuery is the builder for querying SysDictionaryDetail entities.
type SysDictionaryDetailQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SysDictionaryDetail
	withParent *SysDictionaryQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysDictionaryDetailQuery builder.
func (sddq *SysDictionaryDetailQuery) Where(ps ...predicate.SysDictionaryDetail) *SysDictionaryDetailQuery {
	sddq.predicates = append(sddq.predicates, ps...)
	return sddq
}

// Limit adds a limit step to the query.
func (sddq *SysDictionaryDetailQuery) Limit(limit int) *SysDictionaryDetailQuery {
	sddq.limit = &limit
	return sddq
}

// Offset adds an offset step to the query.
func (sddq *SysDictionaryDetailQuery) Offset(offset int) *SysDictionaryDetailQuery {
	sddq.offset = &offset
	return sddq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sddq *SysDictionaryDetailQuery) Unique(unique bool) *SysDictionaryDetailQuery {
	sddq.unique = &unique
	return sddq
}

// Order adds an order step to the query.
func (sddq *SysDictionaryDetailQuery) Order(o ...OrderFunc) *SysDictionaryDetailQuery {
	sddq.order = append(sddq.order, o...)
	return sddq
}

// QueryParent chains the current query on the "parent" edge.
func (sddq *SysDictionaryDetailQuery) QueryParent() *SysDictionaryQuery {
	query := &SysDictionaryQuery{config: sddq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sddq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sddq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdictionarydetail.Table, sysdictionarydetail.FieldID, selector),
			sqlgraph.To(sysdictionary.Table, sysdictionary.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysdictionarydetail.ParentTable, sysdictionarydetail.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(sddq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SysDictionaryDetail entity from the query.
// Returns a *NotFoundError when no SysDictionaryDetail was found.
func (sddq *SysDictionaryDetailQuery) First(ctx context.Context) (*SysDictionaryDetail, error) {
	nodes, err := sddq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sysdictionarydetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sddq *SysDictionaryDetailQuery) FirstX(ctx context.Context) *SysDictionaryDetail {
	node, err := sddq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysDictionaryDetail ID from the query.
// Returns a *NotFoundError when no SysDictionaryDetail ID was found.
func (sddq *SysDictionaryDetailQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sddq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sysdictionarydetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sddq *SysDictionaryDetailQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := sddq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysDictionaryDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SysDictionaryDetail entity is found.
// Returns a *NotFoundError when no SysDictionaryDetail entities are found.
func (sddq *SysDictionaryDetailQuery) Only(ctx context.Context) (*SysDictionaryDetail, error) {
	nodes, err := sddq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sysdictionarydetail.Label}
	default:
		return nil, &NotSingularError{sysdictionarydetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sddq *SysDictionaryDetailQuery) OnlyX(ctx context.Context) *SysDictionaryDetail {
	node, err := sddq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysDictionaryDetail ID in the query.
// Returns a *NotSingularError when more than one SysDictionaryDetail ID is found.
// Returns a *NotFoundError when no entities are found.
func (sddq *SysDictionaryDetailQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sddq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sysdictionarydetail.Label}
	default:
		err = &NotSingularError{sysdictionarydetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sddq *SysDictionaryDetailQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := sddq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysDictionaryDetails.
func (sddq *SysDictionaryDetailQuery) All(ctx context.Context) ([]*SysDictionaryDetail, error) {
	if err := sddq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sddq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sddq *SysDictionaryDetailQuery) AllX(ctx context.Context) []*SysDictionaryDetail {
	nodes, err := sddq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysDictionaryDetail IDs.
func (sddq *SysDictionaryDetailQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := sddq.Select(sysdictionarydetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sddq *SysDictionaryDetailQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := sddq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sddq *SysDictionaryDetailQuery) Count(ctx context.Context) (int, error) {
	if err := sddq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sddq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sddq *SysDictionaryDetailQuery) CountX(ctx context.Context) int {
	count, err := sddq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sddq *SysDictionaryDetailQuery) Exist(ctx context.Context) (bool, error) {
	if err := sddq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sddq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sddq *SysDictionaryDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := sddq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysDictionaryDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sddq *SysDictionaryDetailQuery) Clone() *SysDictionaryDetailQuery {
	if sddq == nil {
		return nil
	}
	return &SysDictionaryDetailQuery{
		config:     sddq.config,
		limit:      sddq.limit,
		offset:     sddq.offset,
		order:      append([]OrderFunc{}, sddq.order...),
		predicates: append([]predicate.SysDictionaryDetail{}, sddq.predicates...),
		withParent: sddq.withParent.Clone(),
		// clone intermediate query.
		sql:    sddq.sql.Clone(),
		path:   sddq.path,
		unique: sddq.unique,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (sddq *SysDictionaryDetailQuery) WithParent(opts ...func(*SysDictionaryQuery)) *SysDictionaryDetailQuery {
	query := &SysDictionaryQuery{config: sddq.config}
	for _, opt := range opts {
		opt(query)
	}
	sddq.withParent = query
	return sddq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SysDictionaryDetail.Query().
//		GroupBy(sysdictionarydetail.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sddq *SysDictionaryDetailQuery) GroupBy(field string, fields ...string) *SysDictionaryDetailGroupBy {
	grbuild := &SysDictionaryDetailGroupBy{config: sddq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sddq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sddq.sqlQuery(ctx), nil
	}
	grbuild.label = sysdictionarydetail.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.SysDictionaryDetail.Query().
//		Select(sysdictionarydetail.FieldTitle).
//		Scan(ctx, &v)
func (sddq *SysDictionaryDetailQuery) Select(fields ...string) *SysDictionaryDetailSelect {
	sddq.fields = append(sddq.fields, fields...)
	selbuild := &SysDictionaryDetailSelect{SysDictionaryDetailQuery: sddq}
	selbuild.label = sysdictionarydetail.Label
	selbuild.flds, selbuild.scan = &sddq.fields, selbuild.Scan
	return selbuild
}

func (sddq *SysDictionaryDetailQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sddq.fields {
		if !sysdictionarydetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sddq.path != nil {
		prev, err := sddq.path(ctx)
		if err != nil {
			return err
		}
		sddq.sql = prev
	}
	return nil
}

func (sddq *SysDictionaryDetailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SysDictionaryDetail, error) {
	var (
		nodes       = []*SysDictionaryDetail{}
		_spec       = sddq.querySpec()
		loadedTypes = [1]bool{
			sddq.withParent != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SysDictionaryDetail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SysDictionaryDetail{config: sddq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sddq.modifiers) > 0 {
		_spec.Modifiers = sddq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sddq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sddq.withParent; query != nil {
		if err := sddq.loadParent(ctx, query, nodes, nil,
			func(n *SysDictionaryDetail, e *SysDictionary) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sddq *SysDictionaryDetailQuery) loadParent(ctx context.Context, query *SysDictionaryQuery, nodes []*SysDictionaryDetail, init func(*SysDictionaryDetail), assign func(*SysDictionaryDetail, *SysDictionary)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SysDictionaryDetail)
	for i := range nodes {
		fk := nodes[i].DictionaryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(sysdictionary.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "dictionary_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sddq *SysDictionaryDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sddq.querySpec()
	if len(sddq.modifiers) > 0 {
		_spec.Modifiers = sddq.modifiers
	}
	_spec.Node.Columns = sddq.fields
	if len(sddq.fields) > 0 {
		_spec.Unique = sddq.unique != nil && *sddq.unique
	}
	return sqlgraph.CountNodes(ctx, sddq.driver, _spec)
}

func (sddq *SysDictionaryDetailQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := sddq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (sddq *SysDictionaryDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysdictionarydetail.Table,
			Columns: sysdictionarydetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysdictionarydetail.FieldID,
			},
		},
		From:   sddq.sql,
		Unique: true,
	}
	if unique := sddq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sddq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdictionarydetail.FieldID)
		for i := range fields {
			if fields[i] != sysdictionarydetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sddq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sddq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sddq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sddq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sddq *SysDictionaryDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sddq.driver.Dialect())
	t1 := builder.Table(sysdictionarydetail.Table)
	columns := sddq.fields
	if len(columns) == 0 {
		columns = sysdictionarydetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sddq.sql != nil {
		selector = sddq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sddq.unique != nil && *sddq.unique {
		selector.Distinct()
	}
	for _, m := range sddq.modifiers {
		m(selector)
	}
	for _, p := range sddq.predicates {
		p(selector)
	}
	for _, p := range sddq.order {
		p(selector)
	}
	if offset := sddq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sddq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sddq *SysDictionaryDetailQuery) Modify(modifiers ...func(s *sql.Selector)) *SysDictionaryDetailSelect {
	sddq.modifiers = append(sddq.modifiers, modifiers...)
	return sddq.Select()
}

// SysDictionaryDetailGroupBy is the group-by builder for SysDictionaryDetail entities.
type SysDictionaryDetailGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sddgb *SysDictionaryDetailGroupBy) Aggregate(fns ...AggregateFunc) *SysDictionaryDetailGroupBy {
	sddgb.fns = append(sddgb.fns, fns...)
	return sddgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sddgb *SysDictionaryDetailGroupBy) Scan(ctx context.Context, v any) error {
	query, err := sddgb.path(ctx)
	if err != nil {
		return err
	}
	sddgb.sql = query
	return sddgb.sqlScan(ctx, v)
}

func (sddgb *SysDictionaryDetailGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range sddgb.fields {
		if !sysdictionarydetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sddgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sddgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sddgb *SysDictionaryDetailGroupBy) sqlQuery() *sql.Selector {
	selector := sddgb.sql.Select()
	aggregation := make([]string, 0, len(sddgb.fns))
	for _, fn := range sddgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sddgb.fields)+len(sddgb.fns))
		for _, f := range sddgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sddgb.fields...)...)
}

// SysDictionaryDetailSelect is the builder for selecting fields of SysDictionaryDetail entities.
type SysDictionaryDetailSelect struct {
	*SysDictionaryDetailQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sdds *SysDictionaryDetailSelect) Scan(ctx context.Context, v any) error {
	if err := sdds.prepareQuery(ctx); err != nil {
		return err
	}
	sdds.sql = sdds.SysDictionaryDetailQuery.sqlQuery(ctx)
	return sdds.sqlScan(ctx, v)
}

func (sdds *SysDictionaryDetailSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := sdds.sql.Query()
	if err := sdds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sdds *SysDictionaryDetailSelect) Modify(modifiers ...func(s *sql.Selector)) *SysDictionaryDetailSelect {
	sdds.modifiers = append(sdds.modifiers, modifiers...)
	return sdds
}
