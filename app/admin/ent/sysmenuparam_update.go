// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/predicate"
	"slash-admin/app/admin/ent/sysmenuparam"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysMenuParamUpdate is the builder for updating SysMenuParam entities.
type SysMenuParamUpdate struct {
	config
	hooks     []Hook
	mutation  *SysMenuParamMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysMenuParamUpdate builder.
func (smpu *SysMenuParamUpdate) Where(ps ...predicate.SysMenuParam) *SysMenuParamUpdate {
	smpu.mutation.Where(ps...)
	return smpu
}

// SetMenuID sets the "menu_id" field.
func (smpu *SysMenuParamUpdate) SetMenuID(u uint64) *SysMenuParamUpdate {
	smpu.mutation.ResetMenuID()
	smpu.mutation.SetMenuID(u)
	return smpu
}

// AddMenuID adds u to the "menu_id" field.
func (smpu *SysMenuParamUpdate) AddMenuID(u int64) *SysMenuParamUpdate {
	smpu.mutation.AddMenuID(u)
	return smpu
}

// SetType sets the "type" field.
func (smpu *SysMenuParamUpdate) SetType(s string) *SysMenuParamUpdate {
	smpu.mutation.SetType(s)
	return smpu
}

// SetKey sets the "key" field.
func (smpu *SysMenuParamUpdate) SetKey(s string) *SysMenuParamUpdate {
	smpu.mutation.SetKey(s)
	return smpu
}

// SetValue sets the "value" field.
func (smpu *SysMenuParamUpdate) SetValue(s string) *SysMenuParamUpdate {
	smpu.mutation.SetValue(s)
	return smpu
}

// SetUpdatedAt sets the "updated_at" field.
func (smpu *SysMenuParamUpdate) SetUpdatedAt(t time.Time) *SysMenuParamUpdate {
	smpu.mutation.SetUpdatedAt(t)
	return smpu
}

// SetDeletedAt sets the "deleted_at" field.
func (smpu *SysMenuParamUpdate) SetDeletedAt(t time.Time) *SysMenuParamUpdate {
	smpu.mutation.SetDeletedAt(t)
	return smpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (smpu *SysMenuParamUpdate) SetNillableDeletedAt(t *time.Time) *SysMenuParamUpdate {
	if t != nil {
		smpu.SetDeletedAt(*t)
	}
	return smpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (smpu *SysMenuParamUpdate) ClearDeletedAt() *SysMenuParamUpdate {
	smpu.mutation.ClearDeletedAt()
	return smpu
}

// Mutation returns the SysMenuParamMutation object of the builder.
func (smpu *SysMenuParamUpdate) Mutation() *SysMenuParamMutation {
	return smpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smpu *SysMenuParamUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	smpu.defaults()
	if len(smpu.hooks) == 0 {
		affected, err = smpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuParamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smpu.mutation = mutation
			affected, err = smpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smpu.hooks) - 1; i >= 0; i-- {
			if smpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smpu *SysMenuParamUpdate) SaveX(ctx context.Context) int {
	affected, err := smpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smpu *SysMenuParamUpdate) Exec(ctx context.Context) error {
	_, err := smpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smpu *SysMenuParamUpdate) ExecX(ctx context.Context) {
	if err := smpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smpu *SysMenuParamUpdate) defaults() {
	if _, ok := smpu.mutation.UpdatedAt(); !ok {
		v := sysmenuparam.UpdateDefaultUpdatedAt()
		smpu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smpu *SysMenuParamUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysMenuParamUpdate {
	smpu.modifiers = append(smpu.modifiers, modifiers...)
	return smpu
}

func (smpu *SysMenuParamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenuparam.Table,
			Columns: sysmenuparam.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysmenuparam.FieldID,
			},
		},
	}
	if ps := smpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smpu.mutation.MenuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sysmenuparam.FieldMenuID,
		})
	}
	if value, ok := smpu.mutation.AddedMenuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sysmenuparam.FieldMenuID,
		})
	}
	if value, ok := smpu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuparam.FieldType,
		})
	}
	if value, ok := smpu.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuparam.FieldKey,
		})
	}
	if value, ok := smpu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuparam.FieldValue,
		})
	}
	if value, ok := smpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenuparam.FieldUpdatedAt,
		})
	}
	if value, ok := smpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenuparam.FieldDeletedAt,
		})
	}
	if smpu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysmenuparam.FieldDeletedAt,
		})
	}
	_spec.AddModifiers(smpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, smpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenuparam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SysMenuParamUpdateOne is the builder for updating a single SysMenuParam entity.
type SysMenuParamUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysMenuParamMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMenuID sets the "menu_id" field.
func (smpuo *SysMenuParamUpdateOne) SetMenuID(u uint64) *SysMenuParamUpdateOne {
	smpuo.mutation.ResetMenuID()
	smpuo.mutation.SetMenuID(u)
	return smpuo
}

// AddMenuID adds u to the "menu_id" field.
func (smpuo *SysMenuParamUpdateOne) AddMenuID(u int64) *SysMenuParamUpdateOne {
	smpuo.mutation.AddMenuID(u)
	return smpuo
}

// SetType sets the "type" field.
func (smpuo *SysMenuParamUpdateOne) SetType(s string) *SysMenuParamUpdateOne {
	smpuo.mutation.SetType(s)
	return smpuo
}

// SetKey sets the "key" field.
func (smpuo *SysMenuParamUpdateOne) SetKey(s string) *SysMenuParamUpdateOne {
	smpuo.mutation.SetKey(s)
	return smpuo
}

// SetValue sets the "value" field.
func (smpuo *SysMenuParamUpdateOne) SetValue(s string) *SysMenuParamUpdateOne {
	smpuo.mutation.SetValue(s)
	return smpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (smpuo *SysMenuParamUpdateOne) SetUpdatedAt(t time.Time) *SysMenuParamUpdateOne {
	smpuo.mutation.SetUpdatedAt(t)
	return smpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (smpuo *SysMenuParamUpdateOne) SetDeletedAt(t time.Time) *SysMenuParamUpdateOne {
	smpuo.mutation.SetDeletedAt(t)
	return smpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (smpuo *SysMenuParamUpdateOne) SetNillableDeletedAt(t *time.Time) *SysMenuParamUpdateOne {
	if t != nil {
		smpuo.SetDeletedAt(*t)
	}
	return smpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (smpuo *SysMenuParamUpdateOne) ClearDeletedAt() *SysMenuParamUpdateOne {
	smpuo.mutation.ClearDeletedAt()
	return smpuo
}

// Mutation returns the SysMenuParamMutation object of the builder.
func (smpuo *SysMenuParamUpdateOne) Mutation() *SysMenuParamMutation {
	return smpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smpuo *SysMenuParamUpdateOne) Select(field string, fields ...string) *SysMenuParamUpdateOne {
	smpuo.fields = append([]string{field}, fields...)
	return smpuo
}

// Save executes the query and returns the updated SysMenuParam entity.
func (smpuo *SysMenuParamUpdateOne) Save(ctx context.Context) (*SysMenuParam, error) {
	var (
		err  error
		node *SysMenuParam
	)
	smpuo.defaults()
	if len(smpuo.hooks) == 0 {
		node, err = smpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuParamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smpuo.mutation = mutation
			node, err = smpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smpuo.hooks) - 1; i >= 0; i-- {
			if smpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, smpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysMenuParam)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysMenuParamMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smpuo *SysMenuParamUpdateOne) SaveX(ctx context.Context) *SysMenuParam {
	node, err := smpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smpuo *SysMenuParamUpdateOne) Exec(ctx context.Context) error {
	_, err := smpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smpuo *SysMenuParamUpdateOne) ExecX(ctx context.Context) {
	if err := smpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smpuo *SysMenuParamUpdateOne) defaults() {
	if _, ok := smpuo.mutation.UpdatedAt(); !ok {
		v := sysmenuparam.UpdateDefaultUpdatedAt()
		smpuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smpuo *SysMenuParamUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysMenuParamUpdateOne {
	smpuo.modifiers = append(smpuo.modifiers, modifiers...)
	return smpuo
}

func (smpuo *SysMenuParamUpdateOne) sqlSave(ctx context.Context) (_node *SysMenuParam, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenuparam.Table,
			Columns: sysmenuparam.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysmenuparam.FieldID,
			},
		},
	}
	id, ok := smpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysMenuParam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenuparam.FieldID)
		for _, f := range fields {
			if !sysmenuparam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysmenuparam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smpuo.mutation.MenuID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sysmenuparam.FieldMenuID,
		})
	}
	if value, ok := smpuo.mutation.AddedMenuID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sysmenuparam.FieldMenuID,
		})
	}
	if value, ok := smpuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuparam.FieldType,
		})
	}
	if value, ok := smpuo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuparam.FieldKey,
		})
	}
	if value, ok := smpuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuparam.FieldValue,
		})
	}
	if value, ok := smpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenuparam.FieldUpdatedAt,
		})
	}
	if value, ok := smpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenuparam.FieldDeletedAt,
		})
	}
	if smpuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysmenuparam.FieldDeletedAt,
		})
	}
	_spec.AddModifiers(smpuo.modifiers...)
	_node = &SysMenuParam{config: smpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenuparam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
