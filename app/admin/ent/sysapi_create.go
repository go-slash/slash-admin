// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/admin/ent/sysapi"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysApiCreate is the builder for creating a SysApi entity.
type SysApiCreate struct {
	config
	mutation *SysApiMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPath sets the "path" field.
func (sac *SysApiCreate) SetPath(s string) *SysApiCreate {
	sac.mutation.SetPath(s)
	return sac
}

// SetDescription sets the "description" field.
func (sac *SysApiCreate) SetDescription(s string) *SysApiCreate {
	sac.mutation.SetDescription(s)
	return sac
}

// SetAPIGroup sets the "api_group" field.
func (sac *SysApiCreate) SetAPIGroup(s string) *SysApiCreate {
	sac.mutation.SetAPIGroup(s)
	return sac
}

// SetMethod sets the "method" field.
func (sac *SysApiCreate) SetMethod(s string) *SysApiCreate {
	sac.mutation.SetMethod(s)
	return sac
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableMethod(s *string) *SysApiCreate {
	if s != nil {
		sac.SetMethod(*s)
	}
	return sac
}

// SetCreatedAt sets the "created_at" field.
func (sac *SysApiCreate) SetCreatedAt(t time.Time) *SysApiCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableCreatedAt(t *time.Time) *SysApiCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *SysApiCreate) SetUpdatedAt(t time.Time) *SysApiCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableUpdatedAt(t *time.Time) *SysApiCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetDeletedAt sets the "deleted_at" field.
func (sac *SysApiCreate) SetDeletedAt(t time.Time) *SysApiCreate {
	sac.mutation.SetDeletedAt(t)
	return sac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableDeletedAt(t *time.Time) *SysApiCreate {
	if t != nil {
		sac.SetDeletedAt(*t)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *SysApiCreate) SetID(u uint64) *SysApiCreate {
	sac.mutation.SetID(u)
	return sac
}

// Mutation returns the SysApiMutation object of the builder.
func (sac *SysApiCreate) Mutation() *SysApiMutation {
	return sac.mutation
}

// Save creates the SysApi in the database.
func (sac *SysApiCreate) Save(ctx context.Context) (*SysApi, error) {
	var (
		err  error
		node *SysApi
	)
	sac.defaults()
	if len(sac.hooks) == 0 {
		if err = sac.check(); err != nil {
			return nil, err
		}
		node, err = sac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysApiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sac.check(); err != nil {
				return nil, err
			}
			sac.mutation = mutation
			if node, err = sac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sac.hooks) - 1; i >= 0; i-- {
			if sac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysApi)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysApiMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SysApiCreate) SaveX(ctx context.Context) *SysApi {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SysApiCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SysApiCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *SysApiCreate) defaults() {
	if _, ok := sac.mutation.Method(); !ok {
		v := sysapi.DefaultMethod
		sac.mutation.SetMethod(v)
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := sysapi.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		v := sysapi.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SysApiCreate) check() error {
	if _, ok := sac.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "SysApi.path"`)}
	}
	if _, ok := sac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "SysApi.description"`)}
	}
	if _, ok := sac.mutation.APIGroup(); !ok {
		return &ValidationError{Name: "api_group", err: errors.New(`ent: missing required field "SysApi.api_group"`)}
	}
	if _, ok := sac.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "SysApi.method"`)}
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysApi.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysApi.updated_at"`)}
	}
	return nil
}

func (sac *SysApiCreate) sqlSave(ctx context.Context) (*SysApi, error) {
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (sac *SysApiCreate) createSpec() (*SysApi, *sqlgraph.CreateSpec) {
	var (
		_node = &SysApi{config: sac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysapi.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysapi.FieldID,
			},
		}
	)
	_spec.OnConflict = sac.conflict
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sac.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := sac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sac.mutation.APIGroup(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldAPIGroup,
		})
		_node.APIGroup = value
	}
	if value, ok := sac.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysapi.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysapi.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysapi.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysApi.Create().
//		SetPath(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysApiUpsert) {
//			SetPath(v+v).
//		}).
//		Exec(ctx)
func (sac *SysApiCreate) OnConflict(opts ...sql.ConflictOption) *SysApiUpsertOne {
	sac.conflict = opts
	return &SysApiUpsertOne{
		create: sac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysApi.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sac *SysApiCreate) OnConflictColumns(columns ...string) *SysApiUpsertOne {
	sac.conflict = append(sac.conflict, sql.ConflictColumns(columns...))
	return &SysApiUpsertOne{
		create: sac,
	}
}

type (
	// SysApiUpsertOne is the builder for "upsert"-ing
	//  one SysApi node.
	SysApiUpsertOne struct {
		create *SysApiCreate
	}

	// SysApiUpsert is the "OnConflict" setter.
	SysApiUpsert struct {
		*sql.UpdateSet
	}
)

// SetPath sets the "path" field.
func (u *SysApiUpsert) SetPath(v string) *SysApiUpsert {
	u.Set(sysapi.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *SysApiUpsert) UpdatePath() *SysApiUpsert {
	u.SetExcluded(sysapi.FieldPath)
	return u
}

// SetDescription sets the "description" field.
func (u *SysApiUpsert) SetDescription(v string) *SysApiUpsert {
	u.Set(sysapi.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SysApiUpsert) UpdateDescription() *SysApiUpsert {
	u.SetExcluded(sysapi.FieldDescription)
	return u
}

// SetAPIGroup sets the "api_group" field.
func (u *SysApiUpsert) SetAPIGroup(v string) *SysApiUpsert {
	u.Set(sysapi.FieldAPIGroup, v)
	return u
}

// UpdateAPIGroup sets the "api_group" field to the value that was provided on create.
func (u *SysApiUpsert) UpdateAPIGroup() *SysApiUpsert {
	u.SetExcluded(sysapi.FieldAPIGroup)
	return u
}

// SetMethod sets the "method" field.
func (u *SysApiUpsert) SetMethod(v string) *SysApiUpsert {
	u.Set(sysapi.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *SysApiUpsert) UpdateMethod() *SysApiUpsert {
	u.SetExcluded(sysapi.FieldMethod)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SysApiUpsert) SetCreatedAt(v time.Time) *SysApiUpsert {
	u.Set(sysapi.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysApiUpsert) UpdateCreatedAt() *SysApiUpsert {
	u.SetExcluded(sysapi.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysApiUpsert) SetUpdatedAt(v time.Time) *SysApiUpsert {
	u.Set(sysapi.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysApiUpsert) UpdateUpdatedAt() *SysApiUpsert {
	u.SetExcluded(sysapi.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysApiUpsert) SetDeletedAt(v time.Time) *SysApiUpsert {
	u.Set(sysapi.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysApiUpsert) UpdateDeletedAt() *SysApiUpsert {
	u.SetExcluded(sysapi.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysApiUpsert) ClearDeletedAt() *SysApiUpsert {
	u.SetNull(sysapi.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysApi.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysapi.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysApiUpsertOne) UpdateNewValues() *SysApiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysapi.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysApi.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysApiUpsertOne) Ignore() *SysApiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysApiUpsertOne) DoNothing() *SysApiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysApiCreate.OnConflict
// documentation for more info.
func (u *SysApiUpsertOne) Update(set func(*SysApiUpsert)) *SysApiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysApiUpsert{UpdateSet: update})
	}))
	return u
}

// SetPath sets the "path" field.
func (u *SysApiUpsertOne) SetPath(v string) *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *SysApiUpsertOne) UpdatePath() *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdatePath()
	})
}

// SetDescription sets the "description" field.
func (u *SysApiUpsertOne) SetDescription(v string) *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SysApiUpsertOne) UpdateDescription() *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateDescription()
	})
}

// SetAPIGroup sets the "api_group" field.
func (u *SysApiUpsertOne) SetAPIGroup(v string) *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.SetAPIGroup(v)
	})
}

// UpdateAPIGroup sets the "api_group" field to the value that was provided on create.
func (u *SysApiUpsertOne) UpdateAPIGroup() *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateAPIGroup()
	})
}

// SetMethod sets the "method" field.
func (u *SysApiUpsertOne) SetMethod(v string) *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *SysApiUpsertOne) UpdateMethod() *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateMethod()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysApiUpsertOne) SetCreatedAt(v time.Time) *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysApiUpsertOne) UpdateCreatedAt() *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysApiUpsertOne) SetUpdatedAt(v time.Time) *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysApiUpsertOne) UpdateUpdatedAt() *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysApiUpsertOne) SetDeletedAt(v time.Time) *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysApiUpsertOne) UpdateDeletedAt() *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysApiUpsertOne) ClearDeletedAt() *SysApiUpsertOne {
	return u.Update(func(s *SysApiUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysApiUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysApiCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysApiUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysApiUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysApiUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysApiCreateBulk is the builder for creating many SysApi entities in bulk.
type SysApiCreateBulk struct {
	config
	builders []*SysApiCreate
	conflict []sql.ConflictOption
}

// Save creates the SysApi entities in the database.
func (sacb *SysApiCreateBulk) Save(ctx context.Context) ([]*SysApi, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SysApi, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysApiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SysApiCreateBulk) SaveX(ctx context.Context) []*SysApi {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SysApiCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SysApiCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysApi.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysApiUpsert) {
//			SetPath(v+v).
//		}).
//		Exec(ctx)
func (sacb *SysApiCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysApiUpsertBulk {
	sacb.conflict = opts
	return &SysApiUpsertBulk{
		create: sacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysApi.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sacb *SysApiCreateBulk) OnConflictColumns(columns ...string) *SysApiUpsertBulk {
	sacb.conflict = append(sacb.conflict, sql.ConflictColumns(columns...))
	return &SysApiUpsertBulk{
		create: sacb,
	}
}

// SysApiUpsertBulk is the builder for "upsert"-ing
// a bulk of SysApi nodes.
type SysApiUpsertBulk struct {
	create *SysApiCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysApi.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysapi.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysApiUpsertBulk) UpdateNewValues() *SysApiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysapi.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysApi.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysApiUpsertBulk) Ignore() *SysApiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysApiUpsertBulk) DoNothing() *SysApiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysApiCreateBulk.OnConflict
// documentation for more info.
func (u *SysApiUpsertBulk) Update(set func(*SysApiUpsert)) *SysApiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysApiUpsert{UpdateSet: update})
	}))
	return u
}

// SetPath sets the "path" field.
func (u *SysApiUpsertBulk) SetPath(v string) *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *SysApiUpsertBulk) UpdatePath() *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdatePath()
	})
}

// SetDescription sets the "description" field.
func (u *SysApiUpsertBulk) SetDescription(v string) *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SysApiUpsertBulk) UpdateDescription() *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateDescription()
	})
}

// SetAPIGroup sets the "api_group" field.
func (u *SysApiUpsertBulk) SetAPIGroup(v string) *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.SetAPIGroup(v)
	})
}

// UpdateAPIGroup sets the "api_group" field to the value that was provided on create.
func (u *SysApiUpsertBulk) UpdateAPIGroup() *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateAPIGroup()
	})
}

// SetMethod sets the "method" field.
func (u *SysApiUpsertBulk) SetMethod(v string) *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *SysApiUpsertBulk) UpdateMethod() *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateMethod()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysApiUpsertBulk) SetCreatedAt(v time.Time) *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysApiUpsertBulk) UpdateCreatedAt() *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysApiUpsertBulk) SetUpdatedAt(v time.Time) *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysApiUpsertBulk) UpdateUpdatedAt() *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysApiUpsertBulk) SetDeletedAt(v time.Time) *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysApiUpsertBulk) UpdateDeletedAt() *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysApiUpsertBulk) ClearDeletedAt() *SysApiUpsertBulk {
	return u.Update(func(s *SysApiUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysApiUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysApiCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysApiCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysApiUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
