// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"slash-admin/app/admin/ent/predicate"
	"slash-admin/app/admin/ent/sysoauthprovider"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysOauthProviderQuery is the builder for querying SysOauthProvider entities.
type SysOauthProviderQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SysOauthProvider
	loadTotal  []func(context.Context, []*SysOauthProvider) error
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysOauthProviderQuery builder.
func (sopq *SysOauthProviderQuery) Where(ps ...predicate.SysOauthProvider) *SysOauthProviderQuery {
	sopq.predicates = append(sopq.predicates, ps...)
	return sopq
}

// Limit adds a limit step to the query.
func (sopq *SysOauthProviderQuery) Limit(limit int) *SysOauthProviderQuery {
	sopq.limit = &limit
	return sopq
}

// Offset adds an offset step to the query.
func (sopq *SysOauthProviderQuery) Offset(offset int) *SysOauthProviderQuery {
	sopq.offset = &offset
	return sopq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sopq *SysOauthProviderQuery) Unique(unique bool) *SysOauthProviderQuery {
	sopq.unique = &unique
	return sopq
}

// Order adds an order step to the query.
func (sopq *SysOauthProviderQuery) Order(o ...OrderFunc) *SysOauthProviderQuery {
	sopq.order = append(sopq.order, o...)
	return sopq
}

// First returns the first SysOauthProvider entity from the query.
// Returns a *NotFoundError when no SysOauthProvider was found.
func (sopq *SysOauthProviderQuery) First(ctx context.Context) (*SysOauthProvider, error) {
	nodes, err := sopq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sysoauthprovider.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sopq *SysOauthProviderQuery) FirstX(ctx context.Context) *SysOauthProvider {
	node, err := sopq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysOauthProvider ID from the query.
// Returns a *NotFoundError when no SysOauthProvider ID was found.
func (sopq *SysOauthProviderQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sopq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sysoauthprovider.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sopq *SysOauthProviderQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := sopq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysOauthProvider entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SysOauthProvider entity is found.
// Returns a *NotFoundError when no SysOauthProvider entities are found.
func (sopq *SysOauthProviderQuery) Only(ctx context.Context) (*SysOauthProvider, error) {
	nodes, err := sopq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sysoauthprovider.Label}
	default:
		return nil, &NotSingularError{sysoauthprovider.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sopq *SysOauthProviderQuery) OnlyX(ctx context.Context) *SysOauthProvider {
	node, err := sopq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysOauthProvider ID in the query.
// Returns a *NotSingularError when more than one SysOauthProvider ID is found.
// Returns a *NotFoundError when no entities are found.
func (sopq *SysOauthProviderQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sopq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sysoauthprovider.Label}
	default:
		err = &NotSingularError{sysoauthprovider.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sopq *SysOauthProviderQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := sopq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysOauthProviders.
func (sopq *SysOauthProviderQuery) All(ctx context.Context) ([]*SysOauthProvider, error) {
	if err := sopq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sopq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sopq *SysOauthProviderQuery) AllX(ctx context.Context) []*SysOauthProvider {
	nodes, err := sopq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysOauthProvider IDs.
func (sopq *SysOauthProviderQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := sopq.Select(sysoauthprovider.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sopq *SysOauthProviderQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := sopq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sopq *SysOauthProviderQuery) Count(ctx context.Context) (int, error) {
	if err := sopq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sopq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sopq *SysOauthProviderQuery) CountX(ctx context.Context) int {
	count, err := sopq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sopq *SysOauthProviderQuery) Exist(ctx context.Context) (bool, error) {
	if err := sopq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sopq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sopq *SysOauthProviderQuery) ExistX(ctx context.Context) bool {
	exist, err := sopq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysOauthProviderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sopq *SysOauthProviderQuery) Clone() *SysOauthProviderQuery {
	if sopq == nil {
		return nil
	}
	return &SysOauthProviderQuery{
		config:     sopq.config,
		limit:      sopq.limit,
		offset:     sopq.offset,
		order:      append([]OrderFunc{}, sopq.order...),
		predicates: append([]predicate.SysOauthProvider{}, sopq.predicates...),
		// clone intermediate query.
		sql:    sopq.sql.Clone(),
		path:   sopq.path,
		unique: sopq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SysOauthProvider.Query().
//		GroupBy(sysoauthprovider.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sopq *SysOauthProviderQuery) GroupBy(field string, fields ...string) *SysOauthProviderGroupBy {
	grbuild := &SysOauthProviderGroupBy{config: sopq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sopq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sopq.sqlQuery(ctx), nil
	}
	grbuild.label = sysoauthprovider.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.SysOauthProvider.Query().
//		Select(sysoauthprovider.FieldName).
//		Scan(ctx, &v)
func (sopq *SysOauthProviderQuery) Select(fields ...string) *SysOauthProviderSelect {
	sopq.fields = append(sopq.fields, fields...)
	selbuild := &SysOauthProviderSelect{SysOauthProviderQuery: sopq}
	selbuild.label = sysoauthprovider.Label
	selbuild.flds, selbuild.scan = &sopq.fields, selbuild.Scan
	return selbuild
}

func (sopq *SysOauthProviderQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sopq.fields {
		if !sysoauthprovider.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sopq.path != nil {
		prev, err := sopq.path(ctx)
		if err != nil {
			return err
		}
		sopq.sql = prev
	}
	return nil
}

func (sopq *SysOauthProviderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SysOauthProvider, error) {
	var (
		nodes = []*SysOauthProvider{}
		_spec = sopq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SysOauthProvider).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SysOauthProvider{config: sopq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(sopq.modifiers) > 0 {
		_spec.Modifiers = sopq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sopq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range sopq.loadTotal {
		if err := sopq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sopq *SysOauthProviderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sopq.querySpec()
	if len(sopq.modifiers) > 0 {
		_spec.Modifiers = sopq.modifiers
	}
	_spec.Node.Columns = sopq.fields
	if len(sopq.fields) > 0 {
		_spec.Unique = sopq.unique != nil && *sopq.unique
	}
	return sqlgraph.CountNodes(ctx, sopq.driver, _spec)
}

func (sopq *SysOauthProviderQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := sopq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (sopq *SysOauthProviderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysoauthprovider.Table,
			Columns: sysoauthprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sysoauthprovider.FieldID,
			},
		},
		From:   sopq.sql,
		Unique: true,
	}
	if unique := sopq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sopq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysoauthprovider.FieldID)
		for i := range fields {
			if fields[i] != sysoauthprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sopq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sopq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sopq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sopq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sopq *SysOauthProviderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sopq.driver.Dialect())
	t1 := builder.Table(sysoauthprovider.Table)
	columns := sopq.fields
	if len(columns) == 0 {
		columns = sysoauthprovider.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sopq.sql != nil {
		selector = sopq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sopq.unique != nil && *sopq.unique {
		selector.Distinct()
	}
	for _, m := range sopq.modifiers {
		m(selector)
	}
	for _, p := range sopq.predicates {
		p(selector)
	}
	for _, p := range sopq.order {
		p(selector)
	}
	if offset := sopq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sopq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sopq *SysOauthProviderQuery) Modify(modifiers ...func(s *sql.Selector)) *SysOauthProviderSelect {
	sopq.modifiers = append(sopq.modifiers, modifiers...)
	return sopq.Select()
}

// SysOauthProviderGroupBy is the group-by builder for SysOauthProvider entities.
type SysOauthProviderGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sopgb *SysOauthProviderGroupBy) Aggregate(fns ...AggregateFunc) *SysOauthProviderGroupBy {
	sopgb.fns = append(sopgb.fns, fns...)
	return sopgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sopgb *SysOauthProviderGroupBy) Scan(ctx context.Context, v any) error {
	query, err := sopgb.path(ctx)
	if err != nil {
		return err
	}
	sopgb.sql = query
	return sopgb.sqlScan(ctx, v)
}

func (sopgb *SysOauthProviderGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range sopgb.fields {
		if !sysoauthprovider.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sopgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sopgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sopgb *SysOauthProviderGroupBy) sqlQuery() *sql.Selector {
	selector := sopgb.sql.Select()
	aggregation := make([]string, 0, len(sopgb.fns))
	for _, fn := range sopgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sopgb.fields)+len(sopgb.fns))
		for _, f := range sopgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sopgb.fields...)...)
}

// SysOauthProviderSelect is the builder for selecting fields of SysOauthProvider entities.
type SysOauthProviderSelect struct {
	*SysOauthProviderQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sops *SysOauthProviderSelect) Scan(ctx context.Context, v any) error {
	if err := sops.prepareQuery(ctx); err != nil {
		return err
	}
	sops.sql = sops.SysOauthProviderQuery.sqlQuery(ctx)
	return sops.sqlScan(ctx, v)
}

func (sops *SysOauthProviderSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := sops.sql.Query()
	if err := sops.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sops *SysOauthProviderSelect) Modify(modifiers ...func(s *sql.Selector)) *SysOauthProviderSelect {
	sops.modifiers = append(sops.modifiers, modifiers...)
	return sops
}
