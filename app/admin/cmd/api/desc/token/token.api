syntax = "v1"

info(
    title: "Token management"
    desc: "Token management is used to manage tokens"
    author: "waltcow"
    email: "waltcow@gmail.com"
    version: "v1.0"
)

import "base.api"

type (
    // The response data of Token information | Token信息
    TokenInfo {
        // ID
        ID uint64 `json:"id"`

        CreatedAt int64 `json:"createdAt"`

        // User's UUID | 用户的UUID
        UUID string `json:"UUID"`

        // Token string | Token 字符串
        Token string `json:"token"`

        // Log in source such as github | Token 来源 （本地为core, 第三方如github等）
        Source string `json:"source"`

        // JWT status 0 ban 1 active | JWT状态， 0 禁止 1 正常
        Status uint8 `json:"status"`

        // Expire time | 过期时间
        ExpiredAt int64 `json:"expiredAt"`
    }

    // Create or update token information request | 创建或更新token信息
    CreateOrUpdateTokenReq {
        // ID
        ID uint64 `json:"id" validate="number"`

        // Create date | 创建日期
        // Required: true
        CreatedAt int64 `json:"createdAt" validate:"number"`

        // User's UUID | 用户的UUID
        // Required: true
        // Max Length: 36
        UUID string `json:"UUID" validate:"max=36"`

        // Token string | Token 字符串
        // Required: true
        Token string `json:"token"`

        // Log in source such as github | Token 来源 （本地为core, 第三方如github等）
        // Required: true
        // Max Length: 50
        Source string `json:"source" validate:"max=50"`

        // JWT status 0 ban 1 active | JWT状态， 0 禁止 1 正常
        // Required: true
        Status uint32 `json:"status" validate:"number"`

        // Expire time | 过期时间
        // Required: true
        ExpireAt int64 `json:"expireAt" validate:"number"`
    }

        // The response data of Token list | Token列表数据
        // swagger:response TokenListResp
    TokenListResp {
        // The total number of data | 数据总数
        Total uint64 `json:"total"`

        // The token list data | Token列表数据
        // in: body
        Data []TokenInfo `json:"data"`
    }

        // Get token list request params | token列表请求参数
        // swagger:model TokenListReq
    TokenListReq {
        PageReq
        // User's UUID | 用户的UUID
        // Required: true
        // Max Length: 36
        UUID string `json:"UUID" validate:"omitempty,max=36"`

        // user's nickname | 用户的昵称
        // Required: true
        // Max length: 10
        Nickname string `json:"nickname" validate:"omitempty,alphanumunicode,max=10"`

        // User Name | 用户名
        // Required: true
        // Max length: 20
        Username string `json:"username" validate:"omitempty,alphanum,max=20"`

        // The user's email address | 用户的邮箱
        // Required: true
        // Max length: 100
        Email string `json:"email" validate:"omitempty,email,max=100"`
    }
)

@server(
    jwt: Auth
    group: token
    middleware: Authority
)
service core {

    @doc(
        description: "Create or update Token information"
        summary: "Create or update Token information | 创建或更新Token"
    )
    @handler createOrUpdateToken
    post /token (CreateOrUpdateTokenReq) returns (SimpleMsgResp)


    @doc(
        description: "Delete token information"
        summary: "Delete token information | 删除token信息"
    )
    @handler deleteToken
    delete /token (IDReq) returns (SimpleMsgResp)

    @doc(
        description: "Get Token list"
        summary: "Get Token list | 获取token列表"
    )
    @handler getTokenList
    post /token/list (TokenListReq) returns (TokenListResp)

    @doc(
        description: "Set token status"
        summary: "Set token status | 设置token状态"
    )
    @handler setTokenStatus
    post /token/status (SetBooleanStatusReq) returns (SimpleMsgResp)

    @doc(
        description: "Force logging out by user UUID"
        summary: "Force logging out by user UUID | 根据UUID强制用户退出"
    )
    @handler logout
    post /token/logout (UUIDReq) returns (SimpleMsgResp)
}