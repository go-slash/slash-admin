syntax = "v1"

info(
    title: "user management"
    desc: "user management api"
    author: "waltcow"
    email: "waltcow@gmail.com"
    version: "v1.0"
)

import "base.api"

type (
    // login request | 登录参数
    LoginReq {
        // UserName | 用户名
        // Required: true
        // Max length: 20
        Username string `json:"username" validate:"alphanum,max=20"`

        // Password | 密码
        // Required: true
        // Min length: 6
        // Max length: 30
        Password string `json:"password" validate:"max=30,min=6"`

        // Captcha Id | 验证码编号
        // Required: true
        // Max length: 20
        CaptchaId string `json:"captchaId"  validate:"len=20"`

        // The Captcha | 验证码
        // Required: true
        // Max length: 5
        Captcha string `json:"captcha" validate:"len=5"`
    }

    // The login response data | 登录返回数据
    LoginResp {
        // 用户信息
        //in: body
        User *UserInfo `json:"user"`

        // User's role information| 用户的角色信息
        // in: body
        Role *RoleMetaInfo `json:"role"`

        // Token for authorization | 验证身份的token
        Token string `json:"token"`

        // Expire timestamp | 过期时间戳
        ExpiredAt int64 `json:"expiredAt"`
    }

    // The profile response data | 个人信息返回数据
    ProfileResp {
        User *UserInfo `json:"user"`
    }

    // The profile update request data | 个人信息udpate请求参数
    UpdateProfileReq {
        // user's nickname | 用户的昵称
        // Max length: 10
        Nickname *string `json:"nickname,optional" validate:"alphanumunicode,max=10"`

        // The user's avatar path | 用户的头像路径
        // Max length: 512
        Avatar *string `json:"avatar,optional" validate:"max=512"`

        // User's mobile phone number | 用户的手机号码
        // Max length: 18
        Mobile *string `json:"mobile,optional" validate:"numeric,max=18"`

        // The user's email address | 用户的邮箱
        // Max length: 100
        Email *string `json:"email" validate:"email,max=100"`
    }

    // register request | 注册参数
    RegisterReq {
        // User Name | 用户名
        // Required: true
        // Max length: 20
        Username string `json:"username" validate:"alphanum,max=20"`

        // Password | 密码
        // Required: true
        // Min length: 6
        // Max length: 30
        Password string `json:"password" validate:"max=30,min=6"`

        // Captcha Id which store in redis | 验证码编号, 存在redis中
        // Required: true
        // Max length: 20
        CaptchaId string `json:"captchaId" validate:"len=20"`

        // The Captcha which users input | 用户输入的验证码
        // Required: true
        // Max length: 5
        // Default: 00000
        Captcha string `json:"captcha" validate:"len=5"`

        // The user's email address | 用户的邮箱
        // Required: true
        // Max length: 100
        Email string `json:"email" validate:"email,max=100"`
    }

    // change user's password request | 修改密码请求参数
    ChangePasswordReq {
        // User's old password | 用户旧密码
        // Required: true
        // Max length: 30
        OldPassword string `json:"oldPassword" validate:"max=30"`

        // User's new password | 用户新密码
        // Required: true
        // Max length: 30
        NewPassword string `json:"newPassword" validate:"max=30"`
    }


    // The response data of user's information | 用户信息返回数据
    UserInfoResp {
        // in: body
        User *UserInfo `json:"user"`
    }

    //  用户信息
    UserInfo {
        // User's id | 用户Id
        ID uint64 `json:"id"`

        // User's UUID | 用户的UUID
        UUID string `json:"UUID"`

        // User Name | 用户名
        Username string `json:"username"`

        // User's nickname | 用户的昵称
        Nickname string `json:"nickname"`

        // User's mobile phone number | 用户的手机号码
        Mobile string `json:"mobile"`

        // User's role id | 用户的角色Id
        RoleID uint64 `json:"roleId"`

        // The user's email address | 用户的邮箱
        Email string `json:"email"`

        // The user's avatar path | 用户的头像路径
        Avatar string `json:"avatar"`

        // The user's layout mode | 用户的布局
        SideMode string `json:"sideMode"`

        // The user's status | 用户状态
        // 0 正常 1 拉黑
        Status uint8 `json:"status"`

        CreatedAt int64 `json:"createAt"`

        UpdatedAt int64 `json:"updateAt"`
    }
        // The response data of user's basic information | 用户基本信息返回数据
    GetUserInfoResp {
        // user
        // in: body
        User *UserInfo `json:"user"`

        // User's role information| 用户的角色Meta信息
        // in: body
        Roles *RoleMetaInfo `json:"roles"`
    }


    // The response data of user list | 用户列表数据
    UserListResp {
        // in: body
        Pagination *Pagination `json:"pagination"`

        // The user list data | 用户列表数据
        // in: body
        List []*UserInfo `json:"list"`
    }

    // The permission code for front end permission control | 权限码： 用于前端权限控制
    PermCodeResp {
        // Permission code data | 权限码数据
        Data []string `json:"data"`
    }

    // Create user information request | 创建新用户信息
    CreateUserReq {

        // User Name | 用户名
        // Max length: 20
        // Required: true
        // Example: admin
        Username string `json:"username" validate:"alphanum,max=20"`

        // User's nickname | 用户的昵称
        // Max length: 20
        // Required: true
        // Example: admin nickname
        Nickname string `json:"nickname" validate:"alphanumunicode,max=20"`

        // Password | 密码
        // Max length: 30
        // Min length: 6
        // Required: true
        // Example: 123456
        Password string `json:"password" validate:"max=30,min=6"`

        // The user's email address | 用户的邮箱
        // Max length: 100
        // Required: true
        // Example: admin@gmail.com
        Email string `json:"email,optional" validate:"omitempty,email,max=100"`

        // User's mobile phone number | 用户的手机号码
        // Max length: 18
        // Example: 13888888888
        Mobile *string `json:"mobile,optional" validate:"omitempty,numeric,max=18"`

        // User's role id | 用户的角色Id
        // Minimum: 1
        // Maximum: 10
        // Example: 1
        RoleID *uint64 `json:"roleId,optional" validate:"omitempty,number,max=10"`

        // The user's avatar path | 用户的头像路径
        // Example: https://localhost/static/1.png
        Avatar *string `json:"avatar,optional" validate:"omitempty,url"`

        // The user's status | 用户状态
        // 0 normal, 1 ban | 0 正常 1 拉黑
        // Maximum: 0
        Status *uint8 `json:"status,optional" validate:"omitempty,number,max=2"`
    }

    // Update user information request | 更新用户信息
    UpdateUserReq {
        // User's id | 用户Id
        // Minimum: 1
        // Required: true
        // Example: 1
        ID uint64 `json:"id,optional" validate:"omitempty,number"`

        // User Name | 用户名
        // Max length: 20
        // Example: admin
        Username *string `json:"username,optional" validate:"omitempty,alphanum,max=20"`

        // User's nickname | 用户的昵称
        // Max length: 10
        // Example: admin nickname
        Nickname *string `json:"nickname,optional" validate:"omitempty,alphanumunicode,max=20"`

        // Password | 密码
        // Max length: 30
        // Min length: 6
        // Example: 123456
        Password *string `json:"password,optional" validate:"omitempty,max=30,min=6"`

        // User's mobile phone number | 用户的手机号码
        // Max length: 18
        // Example: 13888888888
        Mobile *string `json:"mobile,optional" validate:"omitempty,numeric,max=18"`

        // User's role id | 用户的角色Id
        // Maximum: 1000
        // Example: 1
        RoleID *uint64 `json:"roleId,optional" validate:"omitempty,number,max=1000"`

        // The user's email address | 用户的邮箱
        // Max length: 100
        // Example: admin@gmail.com
        Email *string `json:"email,optional" validate:"omitempty,email,max=100"`

        // The user's avatar path | 用户的头像路径
        // Example: https://localhost/static/1.png
        Avatar *string `json:"avatar,optional" validate:"omitempty,url"`

        // The user's status | 用户状态
        // 0 normal, 1 ban | 0 正常 1 拉黑
        // Maximum: 2
        Status *uint8 `json:"status,optional" validate:"omitempty,number,max=2"`
    }

    // Get user list request | 获取用户列表请求参数
    GetUserListReq {
        // in: body
        PageReq

        // User Name | 用户名
        // Max length: 20
        Username string `json:"username,optional" validate:"omitempty,alphanum,max=20"`

        // User's nickname | 用户的昵称
        // Max length: 10
        Nickname string `json:"nickname,optional" validate:"omitempty,alphanumunicode,max=10"`

        // User's mobile phone number | 用户的手机号码
        // Max length: 18
        Mobile string `json:"mobile,optional" validate:"omitempty,numeric,max=18"`

        // The user's email address | 用户的邮箱
        // Max length: 100
        Email string `json:"email,optional" validate:"omitempty,email,max=100"`

        // User's role ID | 用户的角色Id
        // Maximum: 1000
        RoleId uint64 `json:"roleId,optional" validate:"omitempty,number,max=1000"`
    }
)

@server(
    group: user
)
service core {

    @doc(
        summary: "Log in | 登录"
        description: "登录"
    )
    @handler login
    post /user/login (LoginReq) returns (LoginResp)

    @doc(
        summary: "Register | 注册"
        description: "注册"
    )
    @handler register
    post /user/register (RegisterReq) returns (SimpleMsgResp)
}

@server(
    group : user
    jwt : Auth
    middleware: Authority
)
service core {
    @doc(
        summary: "Change Password | 修改密码"
        description: "修改用户密码"
    )
    @handler changePassword
    post /user/change-password (ChangePasswordReq) returns (SimpleMsgResp)

    @doc(
        summary: "Get user basic information | 获取用户基本信息"
        description: "获取用户基本信息"
    )
    @handler getUserInfo
    get /user/info returns (GetUserInfoResp)

    @doc(
        summary: "Create user's information | 新增用户"
        description: "新增用户"
    )
    @handler createUser
    post /user (CreateUserReq) returns (SimpleMsgResp)

    @doc(
        summary: "Update user's information | 更新用户"
        description: "更新用户"
    )
    @handler updateUser
    put /user (UpdateUserReq) returns (SimpleMsgResp)

    @doc (
        summary: "Get user list | 获取用户列表"
        description: "获取用户列表"
    )
    @handler getUserList
    post /user/list (GetUserListReq) returns (UserListResp)

    @doc(
        summary: "Delete user information | 删除用户信息"
        description: "删除用户信息"
    )
    @handler deleteUser
    delete /user (IDReq) returns (SimpleMsgResp)

    @doc (
        summary: "Get user's permission code | 获取用户权限码"
        description: "获取用户权限码"
    )
    @handler getUserPermCode
    get /user/perm returns (PermCodeResp)

    @doc(
        summary: "Get user's profile | 获取用户个人信息"
        description: "获取用户个人信息"
    )
    @handler getUserProfile
    get /user/profile returns (ProfileResp)

    @doc(
        summary: "Update user's profile | 更新用户个人信息"
        description: "更新用户个人信息"
    )
    @handler updateUserProfile
    post /user/profile (UpdateProfileReq) returns (SimpleMsgResp)

    @doc(
        summary: "Log out | 退出登陆"
        description: "退出登陆"
    )
    @handler logout
    get /user/logout returns (SimpleMsgResp)
}