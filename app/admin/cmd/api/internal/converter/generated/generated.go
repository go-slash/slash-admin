// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package generated

import (
	converter "slash-admin/app/admin/cmd/api/internal/converter"
	types "slash-admin/app/admin/cmd/api/internal/types"
	ent "slash-admin/app/admin/ent"
	types1 "slash-admin/pkg/types"
)

type ConverterImpl struct{}

func (c *ConverterImpl) ConvertPagination(source *ent.PageDetails) *types.Pagination {
	var pTypesPagination *types.Pagination
	if source != nil {
		typesPagination := c.entPageDetailsToTypesPagination(*source)
		pTypesPagination = &typesPagination
	}
	return pTypesPagination
}
func (c *ConverterImpl) ConvertRoleInfoToCreateSysRoleInput(source *types.RoleInfo) *ent.CreateSysRoleInput {
	var pEntCreateSysRoleInput *ent.CreateSysRoleInput
	if source != nil {
		entCreateSysRoleInput := c.typesRoleInfoToEntCreateSysRoleInput(*source)
		pEntCreateSysRoleInput = &entCreateSysRoleInput
	}
	return pEntCreateSysRoleInput
}
func (c *ConverterImpl) ConvertRoleInfoToUpdateSysRoleInput(source *types.RoleInfo) *ent.UpdateSysRoleInput {
	var pEntUpdateSysRoleInput *ent.UpdateSysRoleInput
	if source != nil {
		entUpdateSysRoleInput := c.typesRoleInfoToEntUpdateSysRoleInput(*source)
		pEntUpdateSysRoleInput = &entUpdateSysRoleInput
	}
	return pEntUpdateSysRoleInput
}
func (c *ConverterImpl) ConvertSysRoleToRoleInfo(source *ent.SysRole) *types.RoleInfo {
	var pTypesRoleInfo *types.RoleInfo
	if source != nil {
		typesRoleInfo := c.entSysRoleToTypesRoleInfo(*source)
		pTypesRoleInfo = &typesRoleInfo
	}
	return pTypesRoleInfo
}
func (c *ConverterImpl) ConvertSysRoleToRoleInfoList(source []*ent.SysRole) []*types.RoleInfo {
	pTypesRoleInfoList := make([]*types.RoleInfo, len(source))
	for i := 0; i < len(source); i++ {
		pTypesRoleInfoList[i] = c.ConvertSysRoleToRoleInfo(source[i])
	}
	return pTypesRoleInfoList
}
func (c *ConverterImpl) entPageDetailsToTypesPagination(source ent.PageDetails) types.Pagination {
	var typesPagination types.Pagination
	typesPagination.Page = source.Page
	typesPagination.Limit = source.Limit
	typesPagination.Total = source.Total
	return typesPagination
}
func (c *ConverterImpl) entSysRoleToTypesRoleInfo(source ent.SysRole) types.RoleInfo {
	var typesRoleInfo types.RoleInfo
	typesRoleInfo.ID = source.ID
	typesRoleInfo.Name = source.Name
	typesRoleInfo.Value = source.Value
	typesRoleInfo.DefaultRouter = source.DefaultRouter
	typesRoleInfo.Status = converter.StatusToUint8(source.Status)
	typesRoleInfo.Remark = source.Remark
	typesRoleInfo.OrderNo = source.OrderNo
	return typesRoleInfo
}
func (c *ConverterImpl) typesRoleInfoToEntCreateSysRoleInput(source types.RoleInfo) ent.CreateSysRoleInput {
	var entCreateSysRoleInput ent.CreateSysRoleInput
	pUint64 := source.ID
	entCreateSysRoleInput.ID = &pUint64
	pString := source.Name
	entCreateSysRoleInput.Name = &pString
	pString2 := source.Value
	entCreateSysRoleInput.Value = &pString2
	pString3 := source.DefaultRouter
	entCreateSysRoleInput.DefaultRouter = &pString3
	pTypesStatus := types1.Status(source.Status)
	entCreateSysRoleInput.Status = &pTypesStatus
	pString4 := source.Remark
	entCreateSysRoleInput.Remark = &pString4
	pUint32 := source.OrderNo
	entCreateSysRoleInput.OrderNo = &pUint32
	return entCreateSysRoleInput
}
func (c *ConverterImpl) typesRoleInfoToEntUpdateSysRoleInput(source types.RoleInfo) ent.UpdateSysRoleInput {
	var entUpdateSysRoleInput ent.UpdateSysRoleInput
	pUint64 := source.ID
	entUpdateSysRoleInput.ID = &pUint64
	pString := source.Name
	entUpdateSysRoleInput.Name = &pString
	pString2 := source.Value
	entUpdateSysRoleInput.Value = &pString2
	pString3 := source.DefaultRouter
	entUpdateSysRoleInput.DefaultRouter = &pString3
	pTypesStatus := types1.Status(source.Status)
	entUpdateSysRoleInput.Status = &pTypesStatus
	pString4 := source.Remark
	entUpdateSysRoleInput.Remark = &pString4
	pUint32 := source.OrderNo
	entUpdateSysRoleInput.OrderNo = &pUint32
	return entUpdateSysRoleInput
}
