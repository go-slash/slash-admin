// Code generated by goctl. DO NOT EDIT.
package types

type BaseMsgResp struct {
	Code int32  `json:"code"`
	Msg  string `json:"msg"`
	Data string `json:"data"`
}

type SimpleMsgResp struct {
	Msg string `json:"msg"` //Message | 信息
}

type PageReq struct {
	PageNo   int `json:"pageNo,optional,default=1" validate:"number,min=1"`       //Page number | 第几页
	PageSize int `json:"pageSize,optional,default=10," validate:"number,max=100"` //Page size | 单页数据行数
}

type PageParamReq struct {
	PageNo   int `form:"pageNo,optional,default=1" validate:"number,min=1"`       //Page number | 第几页
	PageSize int `form:"pageSize,optional,default=10," validate:"number,max=100"` //Page size | 单页数据行数
}

type IDReq struct {
	ID uint64 `json:"id" validate:"number"` //ID
}

type IDParamReq struct {
	ID uint64 `form:"id" validate:"number"` //ID
}

type Pagination struct {
	Page  int `json:"page"`
	Limit int `json:"limit"`
	Total int `json:"total"`
}

type IDPathReq struct {
	ID uint64 `path:"id"` //ID
}

type UUIDReq struct {
	UUID string `json:"uuid,required"` //UUID
}

type BaseInfo struct {
	ID        uint64 `json:"id"`        //ID
	CreatedAt int64  `json:"createdAt"` //Create date | 创建日期
	UpdatedAt int64  `json:"updatedAt"` //Update date | 更新日期
	DeletedAt int64  `json:"deletedAt"` //Delete date | 删除日期
}

type SetBooleanStatusReq struct {
	ID     uint64 `json:"id" validate:"number"`     //ID, Required: true
	Status uint8  `json:"status" validate:"number"` //Status code | 状态码
}

type RoleMetaInfo struct {
	RoleName string `json:"roleName"` //Role name | 角色名
	Value    string `json:"value"`    //Role value | 角色值
}

type RoleInfo struct {
	ID            uint64 `json:"id,optional,default=0"` //Role ID | 角色 ID
	Name          string `json:"name"`                  //Role Name | 角色名
	Value         string `json:"value"`                 //Role value | 角色值
	DefaultRouter string `json:"defaultRouter"`         //Role's default page | 角色默认管理页面
	Status        uint8  `json:"status,default=0"`      //Role status | 角色状态
	Remark        string `json:"remark,default=''"`     //Role remark | 角色备注
	OrderNo       uint32 `json:"orderNo"`               //Role's sorting number | 角色排序
}

type CreateRoleReq struct {
	Name          string `json:"name" validate:"max=20"`                                       //Role Name | 角色名
	Value         string `json:"value" validate:"max=10"`                                      //Role value | 角色值
	DefaultRouter string `json:"defaultRouter,optional,default='dashboard'" validate:"max=50"` //Role's default page | 角色默认管理页面
	Status        uint8  `json:"status,optional,default=0" validate:"number,oneof=0 1"`        //Role status | 角色状态
	Remark        string `json:"remark,optional,default=''" validate:"omitempty,max=200"`      //Role remark | 角色备注
	OrderNo       uint32 `json:"orderNo,optional,default=0" validate:"number,max=1000"`        //Role's sorting number | 角色排序
}

type UpdateRoleReq struct {
	ID            uint64  `path:"id" validate:"number,max=1000"`                      //Role ID | 角色 ID
	Name          *string `json:"name,optional" validate:"omitempty,max=20"`          //Role Name | 角色名
	Value         *string `json:"value,optional" validate:"omitempty,max=10"`         //Role value | 角色值
	DefaultRouter *string `json:"defaultRouter,optional" validate:"omitempty,max=50"` //Role's default page | 角色默认管理页面
	Status        *uint8  `json:"status,optional" validate:"omitempty,number,max=10"` //Role status | 角色状态
	Remark        *string `json:"remark,default=''" validate:"omitempty,max=200"`     //Role remark | 角色备注
	OrderNo       *uint32 `json:"orderNo" validate:"omitempty,number,max=1000"`       //Role's sorting number | 角色排序
}

type RoleListResp struct {
	Pagination *Pagination `json:"pagination"` //PageInfo | 分页信息
	List       []*RoleInfo `json:"list"`       //The role list data | 角色列表数据
}

type SetStatusReq struct {
	ID     uint64 `path:"id" validate:"number,max=1000"`      //ID
	Status uint8  `json:"status" validate:"number,oneof=0 1"` //Status code | 状态码
}

type RoleListReq struct {
	PageParamReq
	Keyword string `form:"keyword,optional,default=''" validate:"omitempty,max=20"`
}

type CaptchaInfoResp struct {
	CaptchaId string `json:"captchaId"`
	ImgPath   string `json:"imgPath"`
}

type LoginReq struct {
	Username  string `json:"username" validate:"alphanum,max=20"` //UserName | 用户名
	Password  string `json:"password" validate:"max=30,min=6"`    //Password | 密码
	CaptchaId string `json:"captchaId"  validate:"len=20"`        //Captcha Id | 验证码编号
	Captcha   string `json:"captcha" validate:"len=5"`            //The Captcha | 验证码
}

type LoginResp struct {
	User      *UserInfo     `json:"user"`      //用户信息
	Role      *RoleMetaInfo `json:"role"`      //User's role information| 用户的角色信息
	Token     string        `json:"token"`     //Token for authorization | 验证身份的token
	ExpiredAt int64         `json:"expiredAt"` //Expire timestamp | 过期时间戳
}

type ProfileResp struct {
	User *UserInfo `json:"user"`
}

type UpdateProfileReq struct {
	Nickname *string `json:"nickname,optional" validate:"alphanumunicode,max=10"` //user's nickname | 用户的昵称
	Avatar   *string `json:"avatar,optional" validate:"max=512"`                  //The user's avatar path | 用户的头像路径
	Mobile   *string `json:"mobile,optional" validate:"numeric,max=18"`           //User's mobile phone number | 用户的手机号码
	Email    *string `json:"email" validate:"email,max=100"`                      //The user's email address | 用户的邮箱
}

type RegisterReq struct {
	Username  string `json:"username" validate:"alphanum,max=20"` //User Name | 用户名
	Password  string `json:"password" validate:"max=30,min=6"`    //Password | 密码
	CaptchaId string `json:"captchaId" validate:"len=20"`         //Captcha Id which store in redis | 验证码编号, 存在redis中
	Captcha   string `json:"captcha" validate:"len=5"`            //The Captcha which users input | 用户输入的验证码
	Email     string `json:"email" validate:"email,max=100"`      //The user's email address | 用户的邮箱
}

type ChangePasswordReq struct {
	OldPassword string `json:"oldPassword" validate:"max=30"` //User's old password | 用户旧密码
	NewPassword string `json:"newPassword" validate:"max=30"` //User's new password | 用户新密码
}

type UserInfoResp struct {
	User *UserInfo `json:"user"`
}

type UserInfo struct {
	ID        uint64 `json:"id"`       //User's id | 用户Id
	UUID      string `json:"UUID"`     //User's UUID | 用户的UUID
	Username  string `json:"username"` //User Name | 用户名
	Nickname  string `json:"nickname"` //User's nickname | 用户的昵称
	Mobile    string `json:"mobile"`   //User's mobile phone number | 用户的手机号码
	RoleID    uint64 `json:"roleId"`   //User's role id | 用户的角色Id
	Email     string `json:"email"`    //The user's email address | 用户的邮箱
	Avatar    string `json:"avatar"`   //The user's avatar path | 用户的头像路径
	SideMode  string `json:"sideMode"` //The user's layout mode | 用户的布局
	Status    uint8  `json:"status"`   //The user's status | 用户状态
	CreatedAt int64  `json:"createAt"`
	UpdatedAt int64  `json:"updateAt"`
}

type GetUserInfoResp struct {
	User  *UserInfo     `json:"user"`  //user
	Roles *RoleMetaInfo `json:"roles"` //User's role information| 用户的角色Meta信息
}

type UserListResp struct {
	Pagination *Pagination `json:"pagination"`
	List       []*UserInfo `json:"list"` //The user list data | 用户列表数据
}

type PermCodeResp struct {
	Data []string `json:"data"` //Permission code data | 权限码数据
}

type CreateUserReq struct {
	Username string  `json:"username" validate:"alphanum,max=20"`                   //User Name | 用户名
	Nickname string  `json:"nickname" validate:"alphanumunicode,max=20"`            //User's nickname | 用户的昵称
	Password string  `json:"password" validate:"max=30,min=6"`                      //Password | 密码
	Email    string  `json:"email,optional" validate:"omitempty,email,max=100"`     //The user's email address | 用户的邮箱
	Mobile   *string `json:"mobile,optional" validate:"omitempty,numeric,max=18"`   //User's mobile phone number | 用户的手机号码
	RoleID   *uint64 `json:"roleId,optional" validate:"omitempty,number,max=10"`    //User's role id | 用户的角色Id
	Avatar   *string `json:"avatar,optional" validate:"omitempty,url"`              //The user's avatar path | 用户的头像路径
	Status   *uint8  `json:"status,optional" validate:"omitempty,number,oneof=0 1"` //The user's status | 用户状态, 0 normal, 1 ban | 0 正常 1 拉黑
}

type UpdateUserReq struct {
	ID       uint64  `json:"id,optional" validate:"omitempty,number"`                       //User's id | 用户Id
	Username *string `json:"username,optional" validate:"omitempty,alphanum,max=20"`        //User Name | 用户名
	Nickname *string `json:"nickname,optional" validate:"omitempty,alphanumunicode,max=20"` //User's nickname | 用户的昵称
	Password *string `json:"password,optional" validate:"omitempty,max=30,min=6"`           //Password | 密码
	Mobile   *string `json:"mobile,optional" validate:"omitempty,numeric,max=18"`           //User's mobile phone number | 用户的手机号码
	RoleID   *uint64 `json:"roleId,optional" validate:"omitempty,number,max=1000"`          //User's role id | 用户的角色Id
	Email    *string `json:"email,optional" validate:"omitempty,email,max=100"`             //The user's email address | 用户的邮箱
	Avatar   *string `json:"avatar,optional" validate:"omitempty,url"`                      //The user's avatar path | 用户的头像路径
	Status   *uint8  `json:"status,optional" validate:"omitempty,number,oneof=0 1"`         //The user's status | 用户状态
}

type GetUserListReq struct {
	PageReq
	Username string `json:"username,optional" validate:"omitempty,alphanum,max=20"`        //User Name | 用户名
	Nickname string `json:"nickname,optional" validate:"omitempty,alphanumunicode,max=10"` //User's nickname | 用户的昵称
	Mobile   string `json:"mobile,optional" validate:"omitempty,numeric,max=18"`           //User's mobile phone number | 用户的手机号码
	Email    string `json:"email,optional" validate:"omitempty,email,max=100"`             //The user's email address | 用户的邮箱
	RoleId   uint64 `json:"roleId,optional" validate:"omitempty,number,max=1000"`          //User's role ID | 用户的角色Id
}

type MenuInfo struct {
	ID        uint64 `json:"id"`        //ID
	MenuType  uint8  `json:"type"`      //Menu type: directory or menu | 菜单类型: 目录或菜单
	ParentId  uint64 `json:"parentId"`  //Parent menu ID | 父级菜单ID
	MenuLevel uint8  `json:"level"`     //The menu level | 菜单等级
	Path      string `json:"path"`      //The path to visit menu | 菜单访问路径
	Name      string `json:"name"`      //Menu name | 菜单名
	Redirect  string `json:"redirect"`  //Redirect path | 跳转路径
	Component string `json:"component"` //The component path | 组件路径
	OrderNo   uint32 `json:"orderNo"`   //The sorting number | 排序编号
	Disabled  bool   `json:"disabled"`  //If disabled | 是否禁用菜单
	MenuMetaInfo
	Children  []*MenuInfo `json:"children"`  //children | 子集, in: body
	CreatedAt int64       `json:"createdAt"` //Create date | 创建日期
	UpdatedAt int64       `json:"updatedAt"` //Update date | 更新日期
	DeletedAt int64       `json:"deletedAt"` //Delete date | 删除日期
}

type MenuMetaInfo struct {
	Title              string `json:"title" validate:"max=50"`                       //Menu title show in page | 菜单显示名, Max length: 50
	Icon               string `json:"icon" validate:"max=50"`                        //Menu Icon | 菜单图标, Max length: 50
	HideMenu           bool   `json:"hideMenu" validate:"boolean"`                   //Hide menu | 隐藏菜单
	HideBreadcrumb     bool   `json:"hideBreadcrumb" validate:"boolean"`             //If hide the breadcrumb | 隐藏面包屑
	CurrentActiveMenu  string `json:"currentActiveMenu,omitempty" validate:"max=30"` //Current active menu, if not nil, it will active the tab | 当前激活的菜单
	IgnoreKeepAlive    bool   `json:"ignoreKeepAlive" validate:"boolean"`            //Do not keep alive the tab | 不缓存Tab
	HideTab            bool   `json:"hideTab" validate:"boolean"`                    //Hide the tab header | 当前路由不在标签页显示
	FrameSrc           string `json:"frameSrc,omitempty" validate:"max=100"`         //Iframe path | 内嵌iframe的地址
	CarryParam         bool   `json:"carryParam" validate:"boolean"`                 //The route carries parameters or not | 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true
	HideChildrenInMenu bool   `json:"hideChildrenInMenu" validate:"boolean"`         //Hide children menu or not | 隐藏所有子菜单
	Affix              bool   `json:"affix" validate:"boolean"`                      //Affix tab | 是否固定标签
	DynamicLevel       uint32 `json:"dynamicLevel" validate:"number,lt=30"`          //The maximum number of pages the router can open | 动态路由可打开Tab页数
	RealPath           string `json:"realPath,omitempty" validate:"max=200"`         //The real path of the route without dynamic part | 动态路由的实际Path, 即去除路由的动态部分
}

type MenuListResp struct {
	Pagination *Pagination `json:"pagination"` //Pagination information | 分页信息
	List       []*MenuInfo `json:"list"`       //The menu list data | 菜单列表数据
}

type GetMenuListBase struct {
	MenuType  uint8              `json:"type"`      //Menu type: directory or menu | 菜单类型: 目录或菜单
	ParentId  uint               `json:"parentId"`  //Parent menu ID | 父级菜单ID
	MenuLevel uint32             `json:"level"`     //The menu level | 菜单等级
	Path      string             `json:"path"`      //The path to visit menu | 菜单访问路径
	Name      string             `json:"name"`      //Menu name | 菜单名
	Redirect  string             `json:"redirect"`  //Redirect path | 跳转路径
	Component string             `json:"component"` //The component path | 组件路径
	OrderNo   uint32             `json:"orderNo"`   //The sorting number | 排序编号
	Disabled  bool               `json:"disabled"`  //If disabled | 是否禁用菜单
	Meta      MenuMetaInfo       `json:"meta"`      //in: body
	Children  []*GetMenuListBase `json:"children"`  //children | 子集
}

type CreateOrUpdateMenuReq struct {
	ID        uint32 `json:"id" validate:"number"`               //ID
	MenuType  uint32 `json:"type" validate:"number,max=10"`      //Menu type: directory or menu | 菜单类型: 目录或菜单
	ParentId  uint   `json:"parentId" validate:"number"`         //Parent menu ID | 父级菜单ID
	Path      string `json:"path" validate:"max=200"`            //The path to visit menu | 菜单访问路径
	Name      string `json:"name" validate:"max=50"`             //Menu name | 菜单名
	Redirect  string `json:"redirect" validate:"max=100"`        //Redirect path | 跳转路径
	Component string `json:"component" validate:"max=100"`       //The component path | 组件路径
	OrderNo   uint32 `json:"orderNo" validate:"number,max=1000"` //The sorting number | 排序编号
	Disabled  bool   `json:"disabled" validate:"boolean"`        //If disabled | 是否禁用菜单
	MenuMetaInfo
}

type CreateOrUpdateMenuParamsReq struct {
	ID       uint32 `json:"id" validate:"number"`            //ID
	MenuId   uint32 `json:"menuId" validate:"number"`        //Menu ID | 菜单ID
	DataType string `json:"dataType" validate:"min=1,max=8"` //Data Type | 数据类型
	Key      string `json:"key" validate:"min=1,max=20"`     //Key | 键
	Value    string `json:"value" validate:"min=1,max=100"`  //Value | 值
}

type MenuParamResp struct {
	BaseInfo
	MenuId   uint32 `json:"menuId"`   //Menu ID | 菜单ID
	DataType string `json:"dataType"` //Data Type | 数据类型
	Key      string `json:"key"`      //Key | 键
	Value    string `json:"value"`    //Value | 值
}

type MenuParamListByMenuIdResp struct {
	Pagination *Pagination      `json:"pagination"` //page information | 分页信息
	List       []*MenuParamResp `json:"list"`       //The menu list data | 菜单列表数据
}

type ApiInfo struct {
	ID          uint64 `json:"id"`          //ID
	Path        string `json:"path"`        //API path | API路径
	Description string `json:"description"` //API Description | API 描述
	Group       string `json:"group"`       //API group | API分组
	Method      string `json:"method"`      //API request method e.g. POST | API请求类型 如POST
	CreatedAt   int64  `json:"createdAt"`   //created time | 创建时间
}

type CreateApiReq struct {
	Path        string `json:"path" validate:"min=1,max=50"`            //API path | API路径
	Description string `json:"description" validate:"max=50"`           //API Description | API 描述
	Group       string `json:"group" validate:"alphanum,min=1,max=10"`  //API group | API分组
	Method      string `json:"method" validate:"uppercase,min=3,max=4"` //API request method e.g. POST | API请求类型 如POST
}

type UpdateApiReq struct {
	ID          uint64  `json:"id" validate:"number"`                                       //ID
	Path        *string `json:"path,optional" validate:"omitempty,min=1,max=50"`            //API path | API路径
	Description *string `json:"description,optional" validate:"omitempty,max=50"`           //API Description | API 描述
	Group       *string `json:"group,optional" validate:"omitempty,alphanum,min=1,max=10"`  //API group | API分组
	Method      *string `json:"method,optional" validate:"omitempty,uppercase,min=3,max=4"` //API request method e.g. POST | API请求类型 如POST
}

type ApiListResp struct {
	Pagination *Pagination `json:"pagination"` //Page information | 分页信息
	List       []*ApiInfo  `json:"data"`       //The API list data | API列表数据
}

type ApiListReq struct {
	PageReq
	Path        *string `json:"path,optional" validate:"omitempty,max=100"`           //API path | API路径
	Description *string `json:"description,optional" validate:"omitempty,max=50"`     //API Description | API 描述
	Group       *string `json:"group,optional" validate:"omitempty,alphanum,max=10"`  //API group | API分组
	Method      *string `json:"method,optional" validate:"omitempty,uppercase,max=4"` //API request method e.g. POST | API请求类型 如POST
}

type ApiAuthorityInfo struct {
	Path   string `json:"path"`   //API path | API 路径
	Method string `json:"method"` //API method | API请求方法
}

type CreateApiAuthorityReq struct {
	RoleId uint64              `json:"roleId" validate:"number,max=1000"` //Role ID | 角色ID
	Data   []*ApiAuthorityInfo `json:"data"`                              //API authorization list | API授权列表数据
}

type UpdateApiAuthorityReq struct {
	RoleId uint64              `json:"roleId" validate:"number,max=1000"` //Role ID | 角色ID
	Data   []*ApiAuthorityInfo `json:"data"`                              //API authorization list | API授权列表数据
}

type ApiAuthorityListResp struct {
	Pagination *Pagination         `json:"pagination"` //Pageinfo | 分页信息
	List       []*ApiAuthorityInfo `json:"list"`       //The api authorization list data | API授权列表数据
}

type CreateMenuAuthorityReq struct {
	RoleId  uint64   `json:"roleId" validate:"number,max=1000"` //role ID | 角色ID
	MenuIds []uint64 `json:"menuIds"`                           //menu ID array | 菜单ID数组
}

type UpdateMenuAuthorityReq struct {
	RoleId  uint64   `json:"roleId" validate:"number,max=1000"` //role ID | 角色ID
	MenuIds []uint64 `json:"menuIds"`                           //menu ID array | 菜单ID数组
}

type MenuAuthorityInfoResp struct {
	RoleId  uint64   `json:"roleId"`  //role ID | 角色ID
	MenuIds []uint64 `json:"menuIds"` //menu ID array | 菜单ID数组
}

type DictionaryInfo struct {
	ID          uint64 `json:"id"`          //ID
	Title       string `json:"title"`       //Dictionary title | 字典显示名称
	Name        string `json:"name"`        //Dictionary name | 字典名称
	Status      uint8  `json:"status"`      //Dictionary status | 字典状态
	Description string `json:"description"` //Dictionary description | 字典描述
	CreatedAt   int64  `json:"createdAt"`   //Create time | 创建时间
}

type CreateDictionaryReq struct {
	Title       string `json:"title" validate:"min=1,max=50"`       //Dictionary title | 字典显示名称
	Name        string `json:"name" validate:"min=1,max=50"`        //Dictionary name | 字典名称
	Status      uint8  `json:"status" validator:"number,oneof=0 1"` //Dictionary status | 字典状态
	Description string `json:"description" validate:"max=50"`       //Dictionary description | 字典描述
}

type UpdateDictionaryReq struct {
	ID          uint64  `json:"id" validate:"number"`                                   //ID
	Title       *string `json:"title,optional" validate:"omitempty,min=1,max=50"`       //Dictionary title | 字典显示名称
	Name        *string `json:"name,optional" validate:"omitempty,min=1,max=50"`        //Dictionary name | 字典名称
	Status      *uint8  `json:"status,optional" validator:"omitempty,number,oneof=0 1"` //Dictionary status | 字典状态
	Description *string `json:"description,optional" validate:"omitempty,max=50"`       //Dictionary description | 字典描述
}

type DictionaryListResp struct {
	Pagination *Pagination       `json:"pagination"` //PageInfo | 分页信息
	List       []*DictionaryInfo `json:"list"`       //The dictionary list data | 字典列表数据
}

type DictionaryListReq struct {
	PageReq
	Title *string `json:"title,optional" validate:"omitempty,max=50"` //Dictionary title | 字典显示名称
	Name  *string `json:"name,optional" validate:"omitempty,max=50"`  //Dictionary name | 字典名称
}

type DictionaryDetailInfo struct {
	ID           uint64 `json:"id"`           //ID
	Title        string `json:"title"`        //Dictionary title | 字典显示名称
	Key          string `json:"key"`          //Key name | 键
	Value        string `json:"value"`        //Value | 值
	Status       uint8  `json:"status"`       //Status | 状态
	CreatedAt    int64  `json:"createdAt"`    //Create time | 创建时间
	UpdatedAt    int64  `json:"updatedAt"`    //Update time | 更新时间
	DictionaryID uint64 `json:"dictionaryId"` //Dictionary ID | 字典ID
}

type DictionaryDetailListResp struct {
	Pagination *Pagination             `json:"pagination"` //PageInfo | 分页信息
	List       []*DictionaryDetailInfo `json:"list"`       //The dictionary list data | 字典列表数据
}

type CreateDictionaryDetailReq struct {
	Title        string `json:"title" validate:"min=1,max=50"`      //Detail title | 字典值显示名称
	Key          string `json:"key" validate:"min=1,max=50"`        //Detail key | 键
	Value        string `json:"value"`                              //Detail value | 值
	Status       uint8  `json:"status" validate:"number,oneof=0 1"` //Status | 状态
	DictionaryID uint64 `json:"dictionaryId" validate:"number"`     //DictionaryID | 所属字典ID
}

type UpdateDictionaryDetailReq struct {
	ID     uint64  `json:"id" validate:"number"`                                  //ID
	Title  *string `json:"title,optional" validate:"omitempty,min=1,max=50"`      //Detail title | 字典值显示名称
	Key    *string `json:"key,optional" validate:"omitempty,min=1,max=50"`        //Detail key | 键
	Value  *string `json:"value,optional"`                                        //Detail value | 值
	Status *uint8  `json:"status,optional" validate:"omitempty,number,oneof=0 1"` //Status | 状态
}

type DictionaryDetailReq struct {
	Name string `json:"name"` //Dictionary name | 字典名
}

type OauthProviderInfo struct {
	ID           uint64 `json:"id"`           //ID
	Name         string `json:"name"`         //Provider name | 提供商名字
	ClientID     string `json:"clientID"`     //Client ID | 客户端ID
	ClientSecret string `json:"clientSecret"` //Client secret | 客户端密码
	RedirectURL  string `json:"redirectURL"`  //Redirect URL | 跳转URL
	Scopes       string `json:"scopes"`       //Scopes | 范围
	AuthURL      string `json:"authURL"`      //Auth URL | 鉴权URL
	TokenURL     string `json:"tokenURL"`     //Token URL | 获取 Token 的网址
	AuthStyle    uint8  `json:"authStyle"`    //Auth Style | 鉴权方式, 0 表示自动检测
	InfoURL      string `json:"infoURL"`      //Get User information URL | 获取用户信息地址
	CreatedAt    int64  `json:"createdAt"`    //Created time | 创建时间
}

type CreateProviderReq struct {
	Name         string `json:"name" validate:"min=1,max=50"`            //Provider name | 提供商名字
	ClientID     string `json:"clientID" validate:"max=100"`             //Client ID | 客户端ID
	ClientSecret string `json:"clientSecret" validate:"min=1,max=100"`   //Client secret | 客户端密码
	RedirectURL  string `json:"redirectURL" validate:"max=200"`          //Redirect URL | 跳转URL
	Scopes       string `json:"scopes" validate:"max=200"`               //Scopes | 范围
	AuthURL      string `json:"authURL" validate:"max=200"`              //Auth URL | 鉴权URL
	TokenURL     string `json:"tokenURL" validate:"max=200"`             //Token URL | 获取 Token 的网址
	AuthStyle    uint8  `json:"authStyle" validate:"number,oneof=0 1 2"` //Auth Style is specifies how the endpoint wants the client ID & client secret sent. The zero value means to auto-detect. | 鉴权方式, 0 表示自动检测
	InfoURL      string `json:"infoURL" validate:"max=200"`              //Get User information URL | 获取用户信息地址
}

type UpdateProviderReq struct {
	ID           uint64  `json:"id" validate:"number"`                                       //ID
	Name         *string `json:"name,optional" validate:"omitempty,min=1,max=50"`            //Provider name | 提供商名字
	ClientID     *string `json:"clientID,optional" validate:"omitempty,max=100"`             //Client ID | 客户端ID
	ClientSecret *string `json:"clientSecret,optional" validate:"omitempty,min=1,max=100"`   //Client secret | 客户端密码
	RedirectURL  *string `json:"redirectURL,optional" validate:"omitempty,max=200"`          //Redirect URL | 跳转URL
	Scopes       *string `json:"scopes,optional" validate:"omitempty,max=200"`               //Scopes | 范围
	AuthURL      *string `json:"authURL,optional" validate:"omitempty,max=200"`              //Auth URL | 鉴权URL
	TokenURL     *string `json:"tokenURL,optional" validate:"omitempty,max=200"`             //Token URL | 获取 Token 的网址
	AuthStyle    *uint8  `json:"authStyle,optional" validate:"omitempty,number,oneof=0 1 2"` //Auth Style is specifies how the endpoint wants the client ID & client secret sent. The zero value means to auto-detect. | 鉴权方式, 0 表示自动检测
	InfoURL      *string `json:"infoURL,optional" validate:"omitempty,max=200"`              //Get User information URL | 获取用户信息地址
}

type ProviderListResp struct {
	Pagination *Pagination          `json:"pagination"` //Page information | 分页信息
	List       []*OauthProviderInfo `json:"list"`       //The provider list data | 提供商列表数据
}

type OauthLoginReq struct {
	State    string `json:"state" validate:"max=30"`    //State code to avoid hack | 状态码，请求前后相同避免安全问题
	Provider string `json:"provider" validate:"max=40"` //Provider name | 提供商名字
}

type OauthCallbackParamReq struct {
	State string `form:"state" validate:"max=30"`
	Code  string `form:"code" validate:"max=100"`
}

type RedirectResp struct {
	URL string `json:"URL"`
}

type CallbackResp struct {
	UserId    string        `json:"userId"`    //User's UUID | 用户的UUID
	Role      *RoleMetaInfo `json:"role"`      //User's role information| 用户的角色信息
	Token     string        `json:"token"`     //Token for authorization | 验证身份的token
	ExpiredAt uint64        `json:"expiredAt"` //Expire timestamp | 过期时间戳
}

type TokenInfo struct {
	ID        uint64 `json:"id"`        //ID
	UUID      string `json:"UUID"`      //User's UUID | 用户的UUID
	Token     string `json:"token"`     //Token string | Token 字符串
	Source    string `json:"source"`    //Log in source such as github | Token 来源 （本地为core, 第三方如github等）
	Status    uint8  `json:"status"`    //JWT status 0 ban 1 active | JWT状态， 0 禁止 1 正常
	CreatedAt int64  `json:"createdAt"` //Create time | 创建时间
	ExpiredAt int64  `json:"expiredAt"` //Expire time | 过期时间
}

type CreateTokenReq struct {
	UUID     string `json:"UUID" validate:"max=36"`                                //User's UUID | 用户的UUID
	Token    string `json:"token"`                                                 //Token string | Token 字符串
	Source   string `json:"source" validate:"max=50"`                              //Log in source such as github | Token 来源 （本地为core, 第三方如github等）
	Status   uint8  `json:"status,optional,default=0" validate:"number,oneof=0 1"` //JWT status 0 ban 1 active | JWT状态， 0 禁止 1 正常
	ExpireAt int64  `json:"expireAt" validate:"number"`                            //Expire time | 过期时间
}

type UpdateTokenReq struct {
	ID        uint64  `json:"id" validate:"number"`                           //ID
	UUID      *string `json:"UUID,optional" validate:"omitempty,max=36"`      //User's UUID | 用户的UUID
	Token     *string `json:"token,optional" validate:"omitempty,max=50"`     //Token string | Token 字符串
	Source    *string `json:"source,optional" validate:"omitempty,max=50"`    //Log in source such as github | Token 来源 （本地为core, 第三方如github等）
	Status    *uint8  `json:"status,optional" validate:"omitempty,number"`    //JWT status 0 ban 1 active | JWT状态， 0 禁止 1 正常
	CreatedAt *int64  `json:"createdAt,optional" validate:"omitempty,number"` //Create date | 创建日期
	ExpiredAt *int64  `json:"expiredAt,optional" validate:"omitempty,number"` //Expire time | 过期时间
}

type TokenListResp struct {
	Pagination *Pagination  `json:"pagination"` //The Page information | 分页信息
	List       []*TokenInfo `json:"list"`       //The token list data | Token列表数据
}

type TokenListReq struct {
	PageReq
	UUID     *string `json:"UUID,optional" validate:"omitempty,max=36"`                     //User's UUID | 用户的UUID
	Nickname *string `json:"nickname,optional" validate:"omitempty,alphanumunicode,max=10"` //user's nickname | 用户的昵称
	Username *string `json:"username,optional" validate:"omitempty,alphanum,max=20"`        //User Name | 用户名
	Email    *string `json:"email,optional" validate:"omitempty,email,max=100"`             //The user's email address | 用户的邮箱
}
