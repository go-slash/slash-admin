// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"slash-admin/app/bookstore/ent/bsuser"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// BsUser is the model entity for the BsUser schema.
type BsUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 登录名
	Username string `json:"username,omitempty"`
	// Points holds the value of the "points" field.
	Points uint64 `json:"points,omitempty"`
	// Status holds the value of the "status" field.
	Status bsuser.Status `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BsUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bsuser.FieldID, bsuser.FieldPoints:
			values[i] = new(sql.NullInt64)
		case bsuser.FieldUsername, bsuser.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BsUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BsUser fields.
func (bu *BsUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bsuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bu.ID = uint64(value.Int64)
		case bsuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				bu.Username = value.String
			}
		case bsuser.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				bu.Points = uint64(value.Int64)
			}
		case bsuser.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bu.Status = bsuser.Status(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BsUser.
// Note that you need to call BsUser.Unwrap() before calling this method if this BsUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (bu *BsUser) Update() *BsUserUpdateOne {
	return (&BsUserClient{config: bu.config}).UpdateOne(bu)
}

// Unwrap unwraps the BsUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bu *BsUser) Unwrap() *BsUser {
	_tx, ok := bu.config.driver.(*txDriver)
	if !ok {
		panic("ent: BsUser is not a transactional entity")
	}
	bu.config.driver = _tx.drv
	return bu
}

// String implements the fmt.Stringer.
func (bu *BsUser) String() string {
	var builder strings.Builder
	builder.WriteString("BsUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bu.ID))
	builder.WriteString("username=")
	builder.WriteString(bu.Username)
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", bu.Points))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bu.Status))
	builder.WriteByte(')')
	return builder.String()
}

// BsUsers is a parsable slice of BsUser.
type BsUsers []*BsUser

func (bu BsUsers) config(cfg config) {
	for _i := range bu {
		bu[_i].config = cfg
	}
}
