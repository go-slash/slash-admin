// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"slash-admin/app/bookstore/ent/bsuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BsUserCreate is the builder for creating a BsUser entity.
type BsUserCreate struct {
	config
	mutation *BsUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUsername sets the "username" field.
func (buc *BsUserCreate) SetUsername(s string) *BsUserCreate {
	buc.mutation.SetUsername(s)
	return buc
}

// SetPoints sets the "points" field.
func (buc *BsUserCreate) SetPoints(u uint64) *BsUserCreate {
	buc.mutation.SetPoints(u)
	return buc
}

// SetStatus sets the "status" field.
func (buc *BsUserCreate) SetStatus(b bsuser.Status) *BsUserCreate {
	buc.mutation.SetStatus(b)
	return buc
}

// SetID sets the "id" field.
func (buc *BsUserCreate) SetID(u uint64) *BsUserCreate {
	buc.mutation.SetID(u)
	return buc
}

// Mutation returns the BsUserMutation object of the builder.
func (buc *BsUserCreate) Mutation() *BsUserMutation {
	return buc.mutation
}

// Save creates the BsUser in the database.
func (buc *BsUserCreate) Save(ctx context.Context) (*BsUser, error) {
	var (
		err  error
		node *BsUser
	)
	if len(buc.hooks) == 0 {
		if err = buc.check(); err != nil {
			return nil, err
		}
		node, err = buc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BsUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buc.check(); err != nil {
				return nil, err
			}
			buc.mutation = mutation
			if node, err = buc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(buc.hooks) - 1; i >= 0; i-- {
			if buc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BsUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BsUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (buc *BsUserCreate) SaveX(ctx context.Context) *BsUser {
	v, err := buc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (buc *BsUserCreate) Exec(ctx context.Context) error {
	_, err := buc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buc *BsUserCreate) ExecX(ctx context.Context) {
	if err := buc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buc *BsUserCreate) check() error {
	if _, ok := buc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "BsUser.username"`)}
	}
	if _, ok := buc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "BsUser.points"`)}
	}
	if _, ok := buc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BsUser.status"`)}
	}
	if v, ok := buc.mutation.Status(); ok {
		if err := bsuser.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BsUser.status": %w`, err)}
		}
	}
	return nil
}

func (buc *BsUserCreate) sqlSave(ctx context.Context) (*BsUser, error) {
	_node, _spec := buc.createSpec()
	if err := sqlgraph.CreateNode(ctx, buc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (buc *BsUserCreate) createSpec() (*BsUser, *sqlgraph.CreateSpec) {
	var (
		_node = &BsUser{config: buc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bsuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: bsuser.FieldID,
			},
		}
	)
	_spec.OnConflict = buc.conflict
	if id, ok := buc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := buc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bsuser.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := buc.mutation.Points(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bsuser.FieldPoints,
		})
		_node.Points = value
	}
	if value, ok := buc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: bsuser.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BsUser.Create().
//		SetUsername(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BsUserUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (buc *BsUserCreate) OnConflict(opts ...sql.ConflictOption) *BsUserUpsertOne {
	buc.conflict = opts
	return &BsUserUpsertOne{
		create: buc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BsUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (buc *BsUserCreate) OnConflictColumns(columns ...string) *BsUserUpsertOne {
	buc.conflict = append(buc.conflict, sql.ConflictColumns(columns...))
	return &BsUserUpsertOne{
		create: buc,
	}
}

type (
	// BsUserUpsertOne is the builder for "upsert"-ing
	//  one BsUser node.
	BsUserUpsertOne struct {
		create *BsUserCreate
	}

	// BsUserUpsert is the "OnConflict" setter.
	BsUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUsername sets the "username" field.
func (u *BsUserUpsert) SetUsername(v string) *BsUserUpsert {
	u.Set(bsuser.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *BsUserUpsert) UpdateUsername() *BsUserUpsert {
	u.SetExcluded(bsuser.FieldUsername)
	return u
}

// SetPoints sets the "points" field.
func (u *BsUserUpsert) SetPoints(v uint64) *BsUserUpsert {
	u.Set(bsuser.FieldPoints, v)
	return u
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *BsUserUpsert) UpdatePoints() *BsUserUpsert {
	u.SetExcluded(bsuser.FieldPoints)
	return u
}

// AddPoints adds v to the "points" field.
func (u *BsUserUpsert) AddPoints(v uint64) *BsUserUpsert {
	u.Add(bsuser.FieldPoints, v)
	return u
}

// SetStatus sets the "status" field.
func (u *BsUserUpsert) SetStatus(v bsuser.Status) *BsUserUpsert {
	u.Set(bsuser.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BsUserUpsert) UpdateStatus() *BsUserUpsert {
	u.SetExcluded(bsuser.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BsUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bsuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BsUserUpsertOne) UpdateNewValues() *BsUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bsuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BsUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BsUserUpsertOne) Ignore() *BsUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BsUserUpsertOne) DoNothing() *BsUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BsUserCreate.OnConflict
// documentation for more info.
func (u *BsUserUpsertOne) Update(set func(*BsUserUpsert)) *BsUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BsUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *BsUserUpsertOne) SetUsername(v string) *BsUserUpsertOne {
	return u.Update(func(s *BsUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *BsUserUpsertOne) UpdateUsername() *BsUserUpsertOne {
	return u.Update(func(s *BsUserUpsert) {
		s.UpdateUsername()
	})
}

// SetPoints sets the "points" field.
func (u *BsUserUpsertOne) SetPoints(v uint64) *BsUserUpsertOne {
	return u.Update(func(s *BsUserUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *BsUserUpsertOne) AddPoints(v uint64) *BsUserUpsertOne {
	return u.Update(func(s *BsUserUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *BsUserUpsertOne) UpdatePoints() *BsUserUpsertOne {
	return u.Update(func(s *BsUserUpsert) {
		s.UpdatePoints()
	})
}

// SetStatus sets the "status" field.
func (u *BsUserUpsertOne) SetStatus(v bsuser.Status) *BsUserUpsertOne {
	return u.Update(func(s *BsUserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BsUserUpsertOne) UpdateStatus() *BsUserUpsertOne {
	return u.Update(func(s *BsUserUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *BsUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BsUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BsUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BsUserUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BsUserUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BsUserCreateBulk is the builder for creating many BsUser entities in bulk.
type BsUserCreateBulk struct {
	config
	builders []*BsUserCreate
	conflict []sql.ConflictOption
}

// Save creates the BsUser entities in the database.
func (bucb *BsUserCreateBulk) Save(ctx context.Context) ([]*BsUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bucb.builders))
	nodes := make([]*BsUser, len(bucb.builders))
	mutators := make([]Mutator, len(bucb.builders))
	for i := range bucb.builders {
		func(i int, root context.Context) {
			builder := bucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BsUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bucb *BsUserCreateBulk) SaveX(ctx context.Context) []*BsUser {
	v, err := bucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bucb *BsUserCreateBulk) Exec(ctx context.Context) error {
	_, err := bucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bucb *BsUserCreateBulk) ExecX(ctx context.Context) {
	if err := bucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BsUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BsUserUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (bucb *BsUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *BsUserUpsertBulk {
	bucb.conflict = opts
	return &BsUserUpsertBulk{
		create: bucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BsUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bucb *BsUserCreateBulk) OnConflictColumns(columns ...string) *BsUserUpsertBulk {
	bucb.conflict = append(bucb.conflict, sql.ConflictColumns(columns...))
	return &BsUserUpsertBulk{
		create: bucb,
	}
}

// BsUserUpsertBulk is the builder for "upsert"-ing
// a bulk of BsUser nodes.
type BsUserUpsertBulk struct {
	create *BsUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BsUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bsuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BsUserUpsertBulk) UpdateNewValues() *BsUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bsuser.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BsUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BsUserUpsertBulk) Ignore() *BsUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BsUserUpsertBulk) DoNothing() *BsUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BsUserCreateBulk.OnConflict
// documentation for more info.
func (u *BsUserUpsertBulk) Update(set func(*BsUserUpsert)) *BsUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BsUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *BsUserUpsertBulk) SetUsername(v string) *BsUserUpsertBulk {
	return u.Update(func(s *BsUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *BsUserUpsertBulk) UpdateUsername() *BsUserUpsertBulk {
	return u.Update(func(s *BsUserUpsert) {
		s.UpdateUsername()
	})
}

// SetPoints sets the "points" field.
func (u *BsUserUpsertBulk) SetPoints(v uint64) *BsUserUpsertBulk {
	return u.Update(func(s *BsUserUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *BsUserUpsertBulk) AddPoints(v uint64) *BsUserUpsertBulk {
	return u.Update(func(s *BsUserUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *BsUserUpsertBulk) UpdatePoints() *BsUserUpsertBulk {
	return u.Update(func(s *BsUserUpsert) {
		s.UpdatePoints()
	})
}

// SetStatus sets the "status" field.
func (u *BsUserUpsertBulk) SetStatus(v bsuser.Status) *BsUserUpsertBulk {
	return u.Update(func(s *BsUserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BsUserUpsertBulk) UpdateStatus() *BsUserUpsertBulk {
	return u.Update(func(s *BsUserUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *BsUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BsUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BsUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BsUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
